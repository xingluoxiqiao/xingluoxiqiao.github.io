<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星落溪桥</title>
  
  
  <link href="https://xlxq.fun/atom.xml" rel="self"/>
  
  <link href="https://xlxq.fun/"/>
  <updated>2024-01-13T11:18:02.000Z</updated>
  <id>https://xlxq.fun/</id>
  
  <author>
    <name>星落溪桥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RocketMQ入门</title>
    <link href="https://xlxq.fun/posts/badb3e06.html"/>
    <id>https://xlxq.fun/posts/badb3e06.html</id>
    <published>2024-01-13T11:18:02.000Z</published>
    <updated>2024-01-13T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>消息队列</h1><ol><li>消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。</li><li>消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在，从而实现模块间的解耦合。</li><li>消息队列是一种应用间的异步协作机制，同时消息队列中间件是分布式系统中重要的组件，主要解决<strong>应用耦合，异步消息，流量削锋</strong>等问题。实现高性能，高可用，可伸缩和最终一致性架构。</li></ol><h2 id="消息队列的作用">消息队列的作用</h2><ol><li><strong>解耦：</strong> 消息队列可以将系统内不同模块之间的通信解耦，使得模块之间不直接依赖于彼此的实现。这降低了系统的复杂性，使得各个组件可以独立演化。</li><li><strong>异步通信：</strong> 消息队列支持异步通信，发送方将消息放入队列后即可继续执行其他操作，而不需要等待接收方的处理。这提高了系统的响应性，特别是在处理大量请求或在网络延迟较高的情况下。</li><li><strong>流量削峰：</strong> 消息队列可以用于缓冲和平滑处理系统的流量，防止突发的高峰值请求对系统造成压力。通过控制消息的消费速率，可以有效地削平流量峰值。</li></ol><h2 id="常见消息队列对比">常见消息队列对比</h2><p>常见的消息队列系统包括RocketMQ、RabbitMQ和Kafka，它们在一些方面有一些共同点，但也有一些明显的区别。以下是它们的一些对比：</p><ol><li><strong>消息传递模型：</strong><ul><li><strong>RocketMQ：</strong> 提供点对点和发布/订阅两种消息传递模型。</li><li><strong>RabbitMQ：</strong> 同样支持点对点和发布/订阅模型，非常灵活。</li><li><strong>Kafka：</strong> 主要支持发布/订阅模型。</li></ul></li><li><strong>性能：</strong><ul><li><strong>RocketMQ：</strong> 注重高吞吐量和低延迟，适合实时消息处理。</li><li><strong>RabbitMQ：</strong> 相对较低的延迟，适用于一些对延迟敏感的场景。</li><li><strong>Kafka：</strong> 专注于高吞吐量和持久性，适用于大规模数据处理。</li></ul></li><li><strong>可靠性：</strong><ul><li><strong>RocketMQ：</strong> 提供了较好的消息可靠性，支持同步和异步复制。</li><li><strong>RabbitMQ：</strong> 可以配置为提供高可靠性，但需要在配置上更多的努力。</li><li><strong>Kafka：</strong> 通过分区和副本机制来确保消息的可靠性。</li></ul></li><li><strong>水平扩展性：</strong><ul><li><strong>RocketMQ：</strong> 支持较好的水平扩展性，可以通过添加节点来增加容量。</li><li><strong>RabbitMQ：</strong> 可以通过集群来实现水平扩展，但可能相对复杂。</li><li><strong>Kafka：</strong> 具有出色的水平扩展性，适用于大规模数据流处理。</li></ul></li><li><strong>使用场景：</strong><ul><li><strong>RocketMQ：</strong> 适用于大规模实时消息处理，例如电商交易系统。</li><li><strong>RabbitMQ：</strong> 适用于传统企业应用，也可以用于实时数据处理。</li><li><strong>Kafka：</strong> 适用于大规模数据流处理，如日志收集、事件流处理等。</li></ul></li></ol><h1>RocketMQ</h1><h2 id="架构设计">架构设计</h2><ol><li><strong>生产者（Producer）</strong>：消息的发送者，负责产生消息，生产者向消息服务器发送由业务应用程序系统生成的消息。</li><li><strong>消费者（Consumer）</strong>：消息接收者，负责消费消息，消费者从消息服务器拉取信息并将其输入用户应用程序。</li><li><strong>消息服务器（Broker）</strong>：暂存和传输消息；是消息存储中心，主要作用是接收来自 Producer 的消息并存储， Consumer 从这里取得消息。</li><li><strong>名称服务器（NameServer）</strong>：管理Broker，用来保存 Broker 相关 Topic 等元信息并给 Producer ，提供 Consumer 查找 Broker 信息。</li><li><strong>主题（Topic）</strong>：区分消息的种类；一个发送者可以发送消息给一个或者多个Topic；一个消息的接收者 可以订阅一个或者多个Topic消息</li><li><strong>消息队列（Message Queue）</strong>：相当于是Topic的分区；用于并行发送和接收消息</li><li><strong>标签（Tag）</strong>： 用于对消息进行二级分类。一个 Topic 可以有多个 Tag，用于更细粒度地过滤消息</li></ol><h2 id="启动流程">启动流程</h2><img src="/post-img/Pasted image 20240217160000.png" alt="图片损坏" style="zoom:100%;" /><ol><li><strong>启动 NameServer</strong>，NameServer 启动后监听端口，等待 Broker、Producer、Consumer 连接，相当于一个路由控制中心。</li><li><strong>启动 Broker</strong>，Broker启动后与所有 NameServer 保持长连接，定时发送心跳包。心跳包中包含当前 Broker 信息以及存储所有 Topic 信息。注册成功后，NameServer 集群中就有 Topic 跟 Broker 的映射关系。</li><li><strong>创建 Topic</strong>，创建 Topic 时需要指定该 Topic 要存储在哪些 Broker 上，也可以在发送消息时自动创建 Topic。</li><li><strong>生产者发送消息</strong>，启动时先跟 NameServer 集群中的其中一台建立长连接，并从 NameServer 中获取当前发送的 Topic 存在于哪些 Broker 上，轮询从队列列表中选择一个队列，然后与队列所在的 Broker 建立长连接从而向 Broker发消息。</li><li><strong>消费者接受消息</strong>，跟其中一台 NameServer 建立长连接，获取当前订阅 Topic 存在哪些 Broker 上，然后直接跟 Broker 建立连接通道，然后开始消费消息。</li></ol><h2 id="特点">特点</h2><h3 id="顺序消费">顺序消费</h3><p>顺序消息是 RocketMQ 提供的一种对消息发送和消费顺序有严格要求的消息。对于一个指定的 Topic，消息严格按照先进先出（FIFO）的原则进行消息发布和消费，即先发布的消息先消费，后发布的消息后消费。</p><h4 id="分区顺序消息">分区顺序消息</h4><p>对于指定的一个 Topic，所有消息根据 Sharding Key 进行区块分区，<strong>同一个分区内</strong>的消息按照严格的先进先出（FIFO）原则进行发布和消费。同一分区内的消息保证顺序，不同分区之间的消息顺序不做要求。</p><ol><li>适用场景：适用于性能要求高，以 Sharding Key 作为分区字段，在同一个区块中严格地按照先进先出（FIFO）原则进行消息发布和消费的场景。</li><li>示例：<ul><li>用户注册需要发送验证码，以用户 ID 作为 Sharding Key，那么同一个用户发送的消息都会按照发布的先后顺序来消费。</li><li>电商的订单创建，以订单 ID 作为 Sharding Key，那么同一个订单相关的创建订单消息、订单支付消息、订单退款消息、订单物流消息都会按照发布的先后顺序来消费。</li></ul></li></ol><h4 id="全局顺序消息">全局顺序消息</h4><p>对于指定的一个Topic，<strong>所有消息</strong>按照严格的先入先出（FIFO）的顺序来发布和消费。</p><ol><li>适用场景：适用于性能要求不高，所有的消息严格按照 FIFO 原则来发布和消费的场景。</li><li>示例：</li></ol><ul><li>在证券处理中，以人民币兑换美元为 Topic，在价格相同的情况下，先出价者优先处理，则可以按照 FIFO 的方式发布和消费全局顺序消息。</li></ul><ol start="3"><li>全局顺序消息实际上是<strong>一种特殊的分区顺序消息</strong>，即 Topic 中只有一个分区，因此全局顺序和分区顺序的实现原理相同。因为分区顺序消息有多个分区，所以分区顺序消息比全局顺序消息的并发度和性能更高。</li></ol><h3 id="消息可靠性">消息可靠性</h3><p>保证消息可靠性也就是保证消息一定会被消费，不会丢失，而消息丢失可能会在这三个阶段发生：<strong>生产阶段、存储阶段、消费阶段</strong></p><ol><li>生产阶段：<strong>请求确认机制</strong><ul><li>同步发送的时候，要注意处理响应结果和异常。如果返回响应OK，表示消息成功发送到了Broker，如果响应失败，或者发生其它异常，都应该重试。</li><li>异步发送的时候，应该在回调方法里检查，如果发送失败或者异常，都应该进行重试。</li><li>如果发生超时的情况，也可以通过查询日志的API，来检查是否在Broker存储成功。</li></ul></li><li>存储阶段：<strong>通过配置可靠性优先的 Broker 参数来避免因为宕机丢消息</strong>，也就是进行<strong>数据持久化</strong><ul><li>消息只要持久化到CommitLog（日志文件）中，即使Broker宕机，未消费的消息也能重新恢复再消费。</li><li>Broker的刷盘机制：<strong>同步刷盘和异步刷盘</strong>，不管哪种刷盘都可以保证消息一定存储在pagecache中（内存中），但是同步刷盘更可靠，它是Producer发送消息后等数据持久化到磁盘之后再返回响应给Producer。</li><li>Broker通过<strong>主从模式</strong>来保证高可用，Broker支持Master和Slave同步复制、Master和Slave异步复制模式，生产者的消息都是发送给Master，但是消费既可以从Master消费，也可以从Slave消费。同步复制模式可以保证即使Master宕机，消息肯定在Slave中有备份，保证了消息不会丢失。</li></ul></li><li>消费阶段<ul><li>Consumer保证消息成功消费的关键在于确认的时机，不要在收到消息后就立即发送消费确认，而是应该在执行完所有消费业务逻辑之后，再发送消费确认。</li></ul></li></ol><h3 id="死信队列">死信队列</h3><ol><li>死信队列用于处理无法被正常消费的消息，即死信消息。</li><li>当一条消息初次消费失败，消息队列 RocketMQ 会自动进行消息重试；达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，RocketMQ 不会立刻将消息丢弃，而是将其发送到该消费者对应的特殊队列中，该特殊队列称为死信队列。</li><li>死信消息的特点：<ul><li>不会再被消费者正常消费。</li><li>有效期与正常消息相同，均为 3 天，3 天后会被自动删除。因此，需要在死信消息产生后的 3 天内及时处理。</li></ul></li><li>死信队列的特点：<ul><li><strong>一个死信队列对应一个 Group ID</strong>， 而不是对应单个消费者实例。</li><li>如果一个 Group ID 未产生死信消息，消息队列 RocketMQ 不会为其创建相应的死信队列。</li><li>一个死信队列包含了对应 Group ID 产生的所有死信消息，不论该消息属于哪个 Topic。</li><li>RocketMQ 控制台提供对死信消息的<strong>查询、导出和重发</strong>的功能。</li></ul></li></ol><h3 id="延迟队列">延迟队列</h3><p>RocketMQ是支持延时消息的，只需要在生产消息的时候设置消息的延时级别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化一个生产者来产生延时消息</span></span><br><span class="line"><span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;ExampleProducerGroup&quot;</span>);</span><br><span class="line"><span class="comment">// 启动生产者</span></span><br><span class="line">producer.start();</span><br><span class="line"><span class="type">int</span> <span class="variable">totalMessagesToSend</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; totalMessagesToSend; i++) &#123;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;TestTopic&quot;</span>, (<span class="string">&quot;message &quot;</span> + i).getBytes());</span><br><span class="line">    <span class="comment">// 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间)</span></span><br><span class="line">    message.setDelayTimeLevel(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    producer.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是目前RocketMQ支持的延时级别是有限的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">messageDelayLevel</span> <span class="operator">=</span> </span><br><span class="line"><span class="string">&quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;</span>;</span><br></pre></td></tr></table></figure><p>RocketMQ通过<strong>临时存储+定时任务</strong>来实现延时消息<br>Broker收到延时消息了，会先发送到主题（SCHEDULE_TOPIC_XXXX）的相应时间段的Message Queue中，然后通过一个定时任务轮询这些队列，到期后，把消息投递到目标Topic的队列中，然后消费者就可以正常消费这些消息。</p><h2 id="常见问题解决">常见问题解决</h2><h3 id="消息幂等性">消息幂等性</h3><p>对分布式消息队列来说，同时做到确保一定投递和不重复投递是很难的，就是所谓的“有且仅有一次” 。RocketMQ择了确保一定投递，保证消息不丢失，但有可能造成消息重复。<br>处理消息重复问题，主要由业务端保证，主要的方式有两种：<strong>业务幂等和消息去重</strong></p><ol><li>业务幂等：保证消费逻辑的幂等性，也就是多次调用和一次调用的效果是一样的。这样一来，不管消息消费多少次，对业务都没有影响。</li><li>消息去重：业务端对重复的消息就不再消费了。这种方法，需要保证每条消息都有一个唯一的编号，通常是业务相关的，比如订单号，消费的记录需要落库，而且需要保证和消息确认这一步的原子性。<br>基于以下两个方向思考：</li><li>接口只允许调用一次，比如mysql唯一索引，基于redis分布式锁机制</li><li>对数据的影响只会触发一次，比如乐观锁或状态机（数据的状态信息是向前变化的，因此如果数据的当前状态小于记录的状态，就可以忽略这次修改的信息）</li></ol><h3 id="消息积压">消息积压</h3><p>事前处理：上线之前对流量有个预估，压测得出消费者的消费能力上限，再根据实际情况进行部署以支撑整个服务<br>事中处理：先保证服务，进行消费者的临时扩容操作</p><ol><li>消费者扩容：<ul><li>如果当前Topic的Message Queue的数量大于消费者数量，就可以对消费者进行扩容，增加消费者，来提高消费能力，尽快把积压的消息消费玩。</li></ul></li><li>消息迁移Queue扩容：<ul><li>如果当前Topic的Message Queue的数量小于或者等于消费者数量，这种情况，再扩容消费者就没什么用，就得考虑扩容Message Queue。可以新建一个临时的Topic，临时的Topic多设置一些Message Queue，然后先用一些消费者把消费的数据丢到临时的Topic，因为不用业务处理，只是转发一下消息，还是很快的。接下来用扩容的消费者去消费新的Topic里的数据，消费完了之后，恢复原状。<br>事后处理：</li></ul></li><li>提高并行消费度，如：合理设置消费者组；增加队列分区，考虑把消息分散到多个队列中，避免单个队列出现积压</li><li>批量方式消费，提高消费吞吐量</li><li>调整消息处理的优先级：根据消息的重要性和紧急程度，调整消息处理的优先级。优先处理重要的消息，确保关键业务的及时性，而对于非关键的消息可以进行降级处理、跳过、或延后处理。</li><li>优化每条消息的消费过程（业务）<br>5. 合理设置超时机制</li><li>数据清理和重试：定期清理过期或无效信息</li><li>扩容：若MQ出现性能瓶颈，对MQ扩容</li><li>增加消费者数量：增加消费能力</li></ol><h3 id="消息过滤">消息过滤</h3><ol><li>在 Broker 端按照 Consumer 的去重逻辑进行过滤，这样做的好处是避免了无用的消息传输到 Consumer 端，缺点是加重了 Broker 的负担，实现起来相对复杂。</li><li>在 Consumer 端过滤，比如按照消息设置的 tag 去重，这样的好处是实现起来简单，缺点是有大量无用的消息到达了 Consumer 端只能丢弃不处理。</li><li>一般采用Cosumer端过滤，如果希望提高吞吐量，可以采用Broker过滤。</li><li>对消息的过滤有三种方式：<ul><li>根据Tag过滤：高效简单</li><li>SQL 表达式过滤：更加灵活</li><li>Filter Server 方式：最灵活，也是最复杂的一种方式，允许用户自定义函数进行过滤</li></ul></li></ol><h3 id="高可用（消息持久化）">高可用（消息持久化）</h3><ol><li>RocketMQ的高可用主要是在体现在Broker的读和写的高可用，Broker的高可用是通过<strong>主从集群</strong>实现的</li><li>Broker可以配置两种角色：Master和Slave<ul><li>Master角色的Broker支持读和写</li><li>Slave角色的Broker只支持读</li><li>Master会向Slave同步消息。</li><li>Producer只能向Master角色的Broker写入消息，Cosumer可以从Master和Slave角色的Broker读取消息。</li></ul></li><li>读的高可用：<strong>自动切换</strong><ul><li>Consumer 的配置文件中，并不需要设置是从 Master 读还是从 Slave读，当 Master 不可用或者繁忙的时候， Consumer 的读请求会被自动切换到从 Slave。有了自动切换 Consumer 这种机制，当一个 Master 角色的机器出现故障后，Consumer 仍然可以从 Slave 读取消息，不影响 Consumer 读取消息，这就实现了读的高可用。</li></ul></li><li>写的高可用：<strong>多Master</strong><ul><li>在创建 Topic 的时候，把 Topic 的多个Message Queue 创建在多个 Broker 组上（相同 Broker 名称，不同 brokerId机器组成 Broker 组），这样当 Broker 组的 Master 不可用后，其他组Master 仍然可用， Producer 仍然可以发送消息</li><li>RocketMQ 目前还不支持把Slave自动转成 Master ，如果机器资源不足，需要把 Slave 转成 Master ，则要手动停止 Slave 色的 Broker ，更改配置文件，用新的配置文件启动 Broker。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">消息队列RocketMQ简单了解</summary>
    
    
    
    <category term="消息队列" scheme="https://xlxq.fun/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="消息队列" scheme="https://xlxq.fun/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>maven</title>
    <link href="https://xlxq.fun/posts/c6e613d8.html"/>
    <id>https://xlxq.fun/posts/c6e613d8.html</id>
    <published>2024-01-12T11:18:02.000Z</published>
    <updated>2024-01-12T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Maven</h1><h2 id="基本概念">基本概念</h2><h3 id="仓库">仓库</h3><p>用于存储资源，包含各种jar包<br>分类：<br><strong>本地仓库</strong>:自己电脑上存储资源的仓库,连接远程仓库获取资源<br><strong>远程仓库</strong>:非本机电脑上的仓库，为本地仓库提供资源，分为中央仓库和私服<br>中央仓库: Maven团队维护，存储所有资源的仓库<br>私服:部门/公司范围内存储资源的仓库，从中央仓库获取资源<br><strong>私服的作用</strong>:<br>保存具有版权的资源,包含购买或自主研发的jar<br>中央仓库中的jar都是开源的，不能存储具有版权的资源<br>一定范围内共享资源，仅对内部开放，不对外共享</p><h3 id="坐标">坐标</h3><p>Maven中的坐标用于描述仓库中资源的位置<br>Maven坐标主要组成：<br>groupld:定义当前Maven项目隶属组织名称(通常是域名反写，例如: org.mybatis)<br>artifactld:定义当前Maven项目名称(通常是模块名称，例如CRM、SMS)<br>version:定义当前项目版本号<br>（packaging:定义该项目的打包方式）<br>Maven坐标的作用：<br>使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成</p><h3 id="仓库配置">仓库配置</h3><p>在maven的下载路径下有一个setting文件，可以更改一些基础设置，比如本地仓库的存储位置，以及配置阿里镜像仓库，即从阿里的仓库中获取资源而非中央仓库，这样快一点</p><h2 id="Maven的工程目录结构">Maven的工程目录结构</h2><img src="/post-img/Pasted image 20230822152137.png" alt="图片损坏" style="zoom:100%;" /><p>大概了解一下，现在一般是在idea中直接创建maven工程或spring工程</p><h2 id="依赖管理">依赖管理</h2><h3 id="依赖配置">依赖配置</h3><p>依赖是指当前项目运行所需的jar，一个项目可以设置多个依赖，这些依赖一般来自于中心仓库（私服），是前人或同事写好的jar包或工具类<br><img src="/post-img/Pasted image 20230822152553.png" alt="图片损坏" style="zoom:100%;" /></p><h3 id="依赖传递">依赖传递</h3><p>在引入一个新的jar包时，这个jar包可能依赖其它的jar包，在导入这个jar包时，会将它的所有依赖也一起导入，这就是依赖的传递性<br>直接依赖：在当前项目中通过依赖配置建立的依赖关系<br>间接依赖：被依赖的资源如果依赖其它资源，当前项目间接依赖其它资源<br>这有时会导致依赖传递冲突问题，也就是可能不同级的依赖相同但版本号不同，应遵守以下原则：<br>路径优先:当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高<br>声明优先:当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的<br>特殊优先:当同级配置了相同资源的不同版本，后配置的覆盖先配置的</p><h3 id="可选依赖">可选依赖</h3><p>可选依赖指对外隐藏当前所依赖的资源（但仍在使用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="排除依赖">排除依赖</h3><p>排除依赖指不再使用当前所指的资源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exalusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="依赖范围">依赖范围</h3><p>依赖的jar默认情况可以在任何地方使用，可以通过scope标签设定其作用范围<br>作用范围：<br>主程序范围有效(main文件夹范围内)<br>测试程序范围有效(test文件夹范围内)<br>是否参与打包(package指令范围内)<br><img src="/post-img/Pasted image 20230822153502.png" alt="图片损坏" style="zoom:100%;" /></p><h3 id="循环依赖">循环依赖</h3><ol><li><strong>优化模块设计</strong>： 首先，考虑你的模块设计是否合理。循环依赖通常是模块之间划分不清晰所导致的。尽量遵循单一职责原则，将模块按照功能分割，减少模块之间的直接依赖。</li><li><strong>拆分和合并模块</strong>： 如果发现存在循环依赖，考虑将其中一个或多个模块进行拆分或合并，以消除循环依赖。有时，将功能合并到一个模块中，或者将一些共享的功能抽离成一个独立的模块，可以帮助解决循环依赖问题。</li><li><strong>使用接口和抽象</strong>： 如果模块之间需要互相调用，尽量通过接口或抽象类来定义依赖关系，而不是直接依赖具体实现。这可以减少循环依赖的风险。</li><li><strong>Maven 中的 <code>&lt;dependencyManagement&gt;</code></strong>： 如果循环依赖是由于版本问题引起的，可以使用 Maven 的 <code>&lt;dependencyManagement&gt;</code> 部分来集中管理依赖的版本，以确保一致性。</li><li><strong>提取接口模块</strong>： 为了解决循环依赖，你可以创建一个独立的接口模块，其中定义了所有模块之间的接口。然后各个模块可以依赖于这个接口模块，而不会产生循环依赖。</li><li><strong>调整模块依赖关系</strong>： 在 <code>&lt;dependencies&gt;</code> 部分中，可以明确声明模块的依赖关系和作用域，以便更好地控制依赖。</li><li><strong>检查插件和目标</strong>： 有时，循环依赖可能是由于插件的配置或目标的执行引起的。检查是否有插件或目标的配置引发了循环依赖。</li><li><strong>使用模块路径</strong>： 如果使用 Java 9 及更高版本，可以尝试使用模块路径来隔离模块，避免循环依赖。</li><li><strong>重新考虑项目结构</strong>： 如果循环依赖问题无法通过上述方法解决，可能需要重新审视项目结构和模块之间的关系，进行更大范围的重构。</li></ol><h2 id="生命周期与插件">生命周期与插件</h2><h3 id="生命周期">生命周期</h3><p>生命周期指maven对项目的阶段的管理，一般分为三类：<br>clean：清理工作<br>default：核心工作，例如编译，测试，打包，部署等<br>site：产生报告，发布站点等<br>在执行某个生命周期时，会默认将这个生命周期前的所有生命周期全部执行完成，除非指定不执行某个生命周期</p><h3 id="插件">插件</h3><p>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能<br>内置插件：默认maven在各个生命周期上绑定有预设的功能<br>自定义插件：通过插件可以自定义其他功能，如果内置插件无法满足特定需求，可以创建自定义插件。自定义插件通常使用 Java 编写，通过继承 Maven 插件框架来实现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> <span class="comment">&lt;!-- 插件的 Group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-custom-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> <span class="comment">&lt;!-- 插件的 Artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 插件的版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>custom-goal<span class="tag">&lt;/<span class="name">goal</span>&gt;</span> <span class="comment">&lt;!-- 自定义插件的目标（Goal） --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>idea中执行的生命周期：</p><ol><li><strong>clean</strong>： 清理项目构建生成的目录和文件，包括 <code>target</code> 目录。</li><li><strong>compile</strong>：编译项目的源代码，生成字节码文件。</li><li><strong>test</strong>： 运行项目的单元测试。</li><li><strong>package</strong>： 将编译后的代码打包成可分发的格式，如 JAR、WAR 或 EAR。</li><li><strong>install</strong>：将项目构建结果安装到本地 Maven 仓库，以供其他项目引用。</li><li><strong>deploy</strong>: 将构建结果部署到远程 Maven 仓库，以便其他项目或团队访问。</li><li><strong>site</strong>: 生成项目的站点文档和报告，如代码覆盖率、测试报告等。</li></ol><h2 id="分模块开发">分模块开发</h2><p>分模块开发思想是将一个大型应用程序分解为更小、更易管理的模块，每个模块负责不同的功能或组件。每个模块都可以独立开发、测试和部署。如在web编程中，将实体类pojo，业务层service，数据层dao，控制层controller都分别设置为一个独立的模块<br>这种方式有许多好处：</p><ol><li><strong>模块化</strong>：将应用程序分为模块使得代码更加模块化和组织有序，容易理解和维护。</li><li><strong>独立开发</strong>：开发人员可以专注于自己负责的模块，而不必关心整个应用程序。</li><li><strong>并行开发</strong>：不同模块可以并行开发，提高了开发效率。</li><li><strong>重用性</strong>：可以更轻松地将模块复用在其他项目中，从而提高了代码的重用性。</li><li><strong>测试</strong>：每个模块都可以独立测试，减少了单一应用程序中的复杂度。</li><li><strong>扩展性</strong>：添加新功能时，可以更容易地将新模块集成到现有应用程序中。</li></ol><h3 id="模块聚合">模块聚合</h3><p>模块聚合是将分开开发的模块汇总在一起，形成一个完整的应用程序。通常情况下，会有一个父级 POM（Project Object Model），其中包含所有模块的定义和依赖关系。父级 POM 也可以定义构建的顺序和版本控制策略。对父级模块进行操作时，所有子模块也会进行相同的操作<br><img src="/post-img/Pasted image 20230822162539.png" alt="图片损坏" style="zoom:100%;" /></p><h3 id="依赖继承">依赖继承</h3><p>在父工程中定义依赖管理，在子工程中定义依赖关系，无需声明依赖版本，版本参照父工程中依赖的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;! --声明此处进行依赖管理--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--具体的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org. springframework&lt;/ groupId&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="继承与聚合对比">继承与聚合对比</h3><p>作用<br>聚合用于快速构建项目<br>继承用于快速配置<br>相同点:<br>聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一个pom文件中<br>聚合与继承均属于设计型模块，并无实际的模块内容<br>不同点:<br>聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些<br>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</p><h3 id="属性">属性</h3><p>在pom文件中可以通过property标签自定义属性，相当于define，之后用到时就可以用#{属性名}直接引用，修改属性中的值就可以同时修改所有引用处的值<br>属性分为自定义属性，内置属性，setting属性，java系统属性，环境变量属性<br><img src="/post-img/Pasted image 20230822163251.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="版本管理">版本管理</h2><p><strong>工程版本</strong><br>SNAPSHOT(快照版本)<br>项目开发过程中，为方便团队成员合作，解决模块间相互依赖和时时更新的问题，开发者对每个模块进行构建的时候，输出的临时性版本叫快照版本（(测试阶段版本)，快照版本会随着开发的进展不断更新<br>RELEASE(发布版本)<br>项目开发到进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的，即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本<br><strong>工程版本号约定</strong><br>约定规范:<br>1.&lt;主版本&gt;.&lt;次版本&gt;,&lt;增量版本&gt;&lt;里程碑版本&gt;<br>2.主版本:表示项目重大架构的变更，如: spring5相较于spring4的迭代<br>3.次版本:表示有较大的功能增加和变化，或者全面系统地修复漏洞<br>4.增量版本:表示有重大漏洞的修复<br>5.里程碑版本:表明一个版本的里程碑（版本内部）。这样的版本同下一个正式版本相比，相对来说不是很稳定，有待更多的测试<br>范例:<br>5.1.9.RELEASE</p><h2 id="资源加载属性值">资源加载属性值</h2><p>如果想任意配置文件中加载pom文件中定义的属性，可以在配置文件中使用 ${属性名}来调用，同时，需要在pom文件中配置开启此方式，反则编译时无法获取到属性值</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!--配置资源文件对应的信息--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;!-设定配置文件对应的位置目录，支持使用属性动态设定路径--&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>$</span><span class="template-variable">&#123;project.basedir&#125;</span><span class="language-xml">/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--开启对配置文件的资源加载过滤--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;/ resource&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="跳过测试">跳过测试</h2><p>1.使用命令跳过测试(执行的指令生命周期必须包含测试环节)</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mvn</span> 某个指令 -D skipTests</span><br></pre></td></tr></table></figure><p>2.使用界面操作跳过测试<br><img src="/post-img/Pasted image 20230822164623.png" alt="图片损坏" style="zoom:100%;" /><br>3.使用配置跳过测试（还可以包含或排除某些测试用例）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span><span class="comment">&lt;!--设置跳过测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span> <span class="comment">&lt;!--包含指定的测试用例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inalude</span>&gt;</span>**/User*Test.java<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span>&gt;</span><span class="comment">&lt;!--排除指定的测试用例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/User*Testcase.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">maven相关知识</summary>
    
    
    
    <category term="开发工具" scheme="https://xlxq.fun/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="maven" scheme="https://xlxq.fun/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>idea快捷键</title>
    <link href="https://xlxq.fun/posts/385c30d.html"/>
    <id>https://xlxq.fun/posts/385c30d.html</id>
    <published>2024-01-12T11:18:02.000Z</published>
    <updated>2024-01-12T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://blog.csdn.net/m0_69057918/article/details/131036872">https://blog.csdn.net/m0_69057918/article/details/131036872</a><br>以下加粗是笔者根据自身使用情况整理的更常用的快捷键<br><strong>Ctrl + F 在当前文件进行文本查找</strong><br><strong>Ctrl + Z 撤销</strong><br><strong>Ctrl + Y 删除光标所在行 或 删除选中的行</strong><br><strong>Ctrl + X 剪切光标所在行 或 剪切选择内容</strong><br><strong>Ctrl + C 复制光标所在行 或 复制选择内容</strong><br><strong>Ctrl + D 复制光标所在行 或 复制选择内容，并把复制内容粘贴</strong><br><strong>Ctrl + P 方法参数提示显示</strong><br><strong>Ctrl + B 进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击</strong><br><strong>Ctrl + K 版本控制提交项目，需要此项目有加入到版本控制才可用</strong><br><strong>Ctrl + T 版本控制更新项目，需要此项目有加入到版本控制才可用</strong><br><strong>Ctrl + H 显示当前类的层次结构（所有父类和子类）</strong><br><strong>Ctrl + / 注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</strong></p><p><strong>Alt + Enter IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</strong><br><strong>Alt + Insert 代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</strong></p><p><strong>Ctrl + Alt + L 格式化代码，可以对当前文件和整个包目录使用</strong><br><strong>Ctrl + Alt + O 优化导入的类，可以对当前文件和整个包目录使用</strong><br><strong>Ctrl + Alt + 左方向键 退回到上一个操作的地方</strong><br><strong>Ctrl + Alt + 右方向键 前进到上一个操作的地方</strong></p><p><strong>Ctrl + Shift + U 对选中的代码进行大 / 小写转换</strong><br><strong>Ctrl + Shift + / 代码块注释</strong></p><p>一. Ctrl相关<br>Ctrl + W 递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围(从词逐渐向左右扩展)<br>Ctrl + R 在当前文件进行文本替换<br>Ctrl + E 显示最近打开的文件记录列表<br>Ctrl + N 根据输入的 类名 查找类文件<br>Ctrl + G 在当前文件跳转到指定行处<br>Ctrl + J 插入自定义动态代码模板<br>Ctrl + Q 光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容<br>Ctrl + U 前往当前光标所在的方法的父类的方法 / 接口定义<br>Ctrl + O 选择可重写的方法<br>Ctrl + I 选择可继承的方法<br>Ctrl + + 展开代码<br>Ctrl + - 折叠代码<br>Ctrl + [ 移动光标到当前所在代码的花括号开始位置<br>Ctrl + ] 移动光标到当前所在代码的花括号结束位置<br>Ctrl + F1 在光标所在的错误代码处显示错误信息<br>Ctrl + F3 调转到所选中的词的下一个引用位置<br>Ctrl + F4 关闭当前编辑文件<br>Ctrl + F8 在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点<br>Ctrl + F9 执行 Make Project 操作<br>Ctrl + F11 选中文件 / 文件夹，使用助记符设定 / 取消书签<br>Ctrl + F12 弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选<br>Ctrl + Tab 编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口<br>Ctrl + Enter 智能分隔行<br>Ctrl + End 跳到文件尾<br>Ctrl + Home 跳到文件头<br>Ctrl + Space 基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 ALT+/（必备）<br>Ctrl + Delete 删除光标后面的单词或是中文句<br>Ctrl + BackSpace 删除光标前面的单词或是中文句<br>Ctrl + 1,2,3…9 定位到对应数值的书签位置<br>Ctrl + 左键单击 在打开的文件标题上，弹出该文件路径<br>Ctrl + 光标定位 按 Ctrl 不要松开，会显示光标所在的类信息摘要<br>Ctrl + 左方向键 光标跳转到当前单词 / 中文句的左侧开头位置<br>Ctrl + 右方向键 光标跳转到当前单词 / 中文句的右侧开头位置</p><p>二. Alt相关<br>Alt + ` 显示版本控制常用操作菜单弹出层<br>Alt + Q 弹出一个提示，显示当前类的声明 / 上下文信息<br>Alt + F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择<br>Alt + F2 对于前面页面，显示各类浏览器打开目标选择弹出层<br>Alt + F3 选中文本，逐个往下查找相同文本，并高亮显示<br>Alt + F7 查找光标所在的方法 / 变量 / 类被调用的地方<br>Alt + F8 在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果<br>Alt + Home 定位 / 显示到当前文件的 Navigation Bar<br>Alt + 左方向键 按左方向切换当前已打开的文件视图<br>Alt + 右方向键 按右方向切换当前已打开的文件视图<br>Alt + 前方向键 当前光标跳转到当前文件的前一个方法名位置<br>Alt + 后方向键 当前光标跳转到当前文件的后一个方法名位置<br>Alt + 1,2,3…9 显示对应数值的选项卡，其中 1 是 Project 用得最多</p><p>三. Shift相关<br>Shift + F1 如果有外部文档可以连接外部文档<br>Shift + F2 跳转到上一个高亮错误 或 警告位置<br>Shift + F3 在查找模式下，查找匹配上一个<br>Shift + F4 对当前打开的文件，使用新Windows窗口打开，旧窗口保留<br>Shift + F6 对文件 / 文件夹 重命名<br>Shift + F7 在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法<br>Shift + F8 在 Debug 模式下，跳出，表现出来的效果跟 F9 一样<br>Shift + F9 等效于点击工具栏的 Debug 按钮<br>Shift + F10 等效于点击工具栏的 Run 按钮<br>Shift + F11 弹出书签显示层<br>Shift + Tab 取消缩进<br>Shift + ESC 隐藏当前 或 最后一个激活的工具窗口<br>Shift + End 选中光标到当前行尾位置<br>Shift + Home 选中光标到当前行头位置<br>Shift + Enter 开始新一行。光标所在行下空出一行，光标定位到新行位置<br>Shift + 左键单击 在打开的文件名上按此快捷键，可以关闭当前打开文件<br>Shift + 滚轮前后滚动 当前文件的横向滚动轴滚动</p><p>四. Ctrl + Alt相关<br>Ctrl + Alt + I 光标所在行 或 选中部分进行自动代码缩进，有点类似格式化<br>Ctrl + Alt + T 对选中的代码弹出环绕选项弹出层<br>Ctrl + Alt + J 弹出模板选择窗口，将选定的代码加入动态模板中<br>Ctrl + Alt + H 调用层次<br>Ctrl + Alt + B 在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口<br>Ctrl + Alt + V 快速引进变量<br>Ctrl + Alt + Y 同步、刷新<br>Ctrl + Alt + S 打开 IntelliJ IDEA 系统设置<br>Ctrl + Alt + F7 显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来<br>Ctrl + Alt + F11 切换全屏模式<br>Ctrl + Alt + Enter 光标所在行上空出一行，光标定位到新行<br>Ctrl + Alt + Home 弹出跟当前文件有关联的文件弹出层<br>Ctrl + Alt + Space 类名自动完成<br>Ctrl + Alt + 前方向键 在查找模式下，跳到上个查找的文件<br>Ctrl + Alt + 后方向键 在查找模式下，跳到下个查找的文件</p><p>五. Ctrl + Shift相关<br>Ctrl + Shift + F 根据输入内容查找整个项目 或 指定目录内文件<br>Ctrl + Shift + R 根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件<br>Ctrl + Shift + J 自动将下一行合并到当前行末尾<br>Ctrl + Shift + Z 取消撤销<br>Ctrl + Shift + W 递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围<br>Ctrl + Shift + N 通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠<br>Ctrl + Shift + T 对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择<br>Ctrl + Shift + C 复制当前文件磁盘路径到剪贴板<br>Ctrl + Shift + V 弹出缓存的最近拷贝的内容管理器弹出层<br>Ctrl + Shift + E 显示最近修改的文件列表的弹出层<br>Ctrl + Shift + H 显示方法层次结构<br>Ctrl + Shift + B 跳转到类型声明处<br>Ctrl + Shift + I 快速查看光标所在的方法 或 类的定义<br>Ctrl + Shift + A 查找动作 / 设置<br>Ctrl + Shift + [ 选中从光标所在位置到它的顶部中括号位置<br>Ctrl + Shift + ] 选中从光标所在位置到它的底部中括号位置<br>Ctrl + Shift + + 展开所有代码<br>Ctrl + Shift + - 折叠所有代码<br>Ctrl + Shift + F7 高亮显示所有该选中文本，按Esc高亮消失<br>Ctrl + Shift + F8 在 Debug 模式下，指定断点进入条件<br>Ctrl + Shift + F9 编译选中的文件 / 包 / Module<br>Ctrl + Shift + F12 编辑器最大化<br>Ctrl + Shift + Space 智能代码提示<br>Ctrl + Shift + Enter 自动结束代码，行末自动添加分号 （必备）<br>Ctrl + Shift + Backspace 退回到上次修改的地方<br>Ctrl + Shift + 1,2,3…9 快速添加指定数值的书签<br>Ctrl + Shift + 左键单击 把光标放在某个类变量上，按此快捷键可以直接定位到该类中 （必备）<br>Ctrl + Shift + 左方向键 在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句<br>Ctrl + Shift + 右方向键 在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句<br>Ctrl + Shift + 左方向键 在光标焦点是在工具选项卡上，缩小选项卡区域<br>Ctrl + Shift + 右方向键 在光标焦点是在工具选项卡上，扩大选项卡区域<br>Ctrl + Shift + 前方向键 光标放在方法名上，将方法移动到上一个方法前面，调整方法排序<br>Ctrl + Shift + 后方向键 光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</p><p>六. Alt + Shift相关<br>Alt + Shift + N 选择 / 添加 task<br>Alt + Shift + F 显示添加到收藏夹弹出层 / 添加到收藏夹<br>Alt + Shift + C 查看最近操作项目的变化情况列表<br>Alt + Shift + I 查看项目当前文件<br>Alt + Shift + F7 在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入<br>Alt + Shift + F9 弹出 Debug 的可选择菜单<br>Alt + Shift + F10 弹出 Run 的可选择菜单<br>Alt + Shift + 左键双击 选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句<br>Alt + Shift + 前方向键 移动光标所在行向上移动<br>Alt + Shift + 后方向键 移动光标所在行向下移动</p><p>七. 其他<br>F2 跳转到下一个高亮错误 或 警告位置 （必备）<br>F3 在查找模式下，定位到下一个匹配处<br>F4 编辑源<br>F7 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中<br>F8 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内<br>F9 在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上<br>F11 添加书签<br>F12 回到前一个工具窗口<br>Tab 缩进<br>ESC 从工具窗口进入代码文件窗口</p><p>Ctrl + Shift + Alt + V 无格式黏贴<br>Ctrl + Shift + Alt + N 前往指定的变量 / 方法<br>Ctrl + Shift + Alt + S 打开当前项目设置<br>Ctrl + Shift + Alt + C 复制参考信息</p>]]></content>
    
    
    <summary type="html">idea快捷键</summary>
    
    
    
    <category term="开发工具" scheme="https://xlxq.fun/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="idea" scheme="https://xlxq.fun/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://xlxq.fun/posts/518e617c.html"/>
    <id>https://xlxq.fun/posts/518e617c.html</id>
    <published>2024-01-12T11:18:02.000Z</published>
    <updated>2024-01-12T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git 是一个分布式版本控制系统，用于跟踪软件开发过程中的代码变更。它允许多个开发者协同工作，同时记录代码的变更历史，管理不同版本的代码库，以及轻松地创建分支和合并代码。</p><h2 id="基础概念">基础概念</h2><p>以下是与 Git 相关的一些关键概念和命令：</p><ol><li><strong>仓库（Repository）</strong>：仓库是包含项目及其所有文件的目录，同时还包括了代码变更的历史记录。</li><li><strong>克隆（Clone）</strong>：要开始使用一个 Git 仓库，通常会使用 <code>git clone</code> 命令将远程仓库克隆到本地计算机上</li><li><strong>提交（Commit）</strong>：提交是在特定时间点对你的更改进行快照。你可以使用 <code>git commit</code> 命令将更改保存到本地仓库。</li><li><strong>分支（Branch）</strong>：分支是仓库内的一个独立开发线。它允许你在不影响主要代码库的情况下开发功能或修复问题。可以使用 <code>git branch</code> 创建分支，使用 <code>git checkout</code> 在不同分支之间切换。</li><li><strong>合并（Merge）</strong>：合并将一个分支的更改合并到另一个分支中。使用 <code>git merge</code> 命令将源分支的更改集成到目标分支中。</li><li><strong>拉取（Pull）</strong>：拉取是从远程仓库获取更改并将其整合到本地仓库的过程。这通常用于保持本地仓库与远程仓库同步。你可以使用 <code>git pull</code> 进行拉取操作。</li><li><strong>推送（Push）</strong>：推送将本地的提交发送到远程仓库。这是与他人共享更改的方式。使用 <code>git push</code> 进行推送操作。</li><li><strong>远程（Remote）</strong>：远程是对远程仓库的引用，通常托管在平台如 GitHub、GitLab 或 Bitbucket 上。可以使用 <code>git remote</code> 命令添加、删除或管理远程仓库。</li><li><strong>状态（Status）</strong>：<code>git status</code> 命令显示仓库的当前状态，包括已经进行但尚未提交的更改。</li><li><strong>差异（Diff）</strong>：<code>git diff</code> 命令显示两个版本之间的差异，帮助你理解所做的更改。</li></ol><h2 id="常用命令">常用命令</h2><p>当涉及到 Git 常用命令时，以下是一些可能会用到的一些命令及其简要描述：</p><ol><li><code>git init</code>：在当前目录初始化一个新的 Git 仓库。</li><li><code>git clone &lt;URL&gt;</code>：从远程仓库克隆代码到本地。</li><li><code>git add &lt;file&gt;</code>：将文件的更改添加到暂存区。</li><li><code>git commit -m &quot;message&quot;</code>：将暂存区的更改提交到本地仓库。</li><li><code>git status</code>：查看当前仓库的状态，包括未提交的更改。</li><li><code>git diff</code>：显示当前工作目录中的更改。</li><li><code>git branch</code>：列出所有本地分支，显示当前所在分支。</li><li><code>git checkout &lt;branch&gt;</code>：切换到指定分支。</li><li><code>git merge &lt;branch&gt;</code>：将指定分支的更改合并到当前分支。</li><li><code>git pull</code>：从远程仓库拉取最新更改。</li><li><code>git push</code>：将本地更改推送到远程仓库。</li><li><code>git remote add &lt;name&gt; &lt;URL&gt;</code>：添加一个远程仓库。</li><li><code>git log</code>：查看提交历史记录。</li><li><code>git reset &lt;file&gt;</code>：从暂存区撤销文件的更改。</li><li><code>git revert &lt;commit&gt;</code>：创建一个新提交，撤销指定提交的更改。</li><li><code>git stash</code>：将当前未提交的更改暂存起来，以便在切换分支时使用。</li><li><code>git tag &lt;tagname&gt;</code>：创建一个标签，用于标记某个特定的提交。</li></ol><h2 id="git的工作原理">git的工作原理</h2><h3 id="工作区域">工作区域</h3><p>Git本地有三个工作区域∶工作目录(Working Directory )、暂存区(Stage/ndex)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下∶<br><img src="/post-img/Pasted image 20230822165257.png" alt="图片损坏" style="zoom:100%;" /></p><p>Workspace :工作区，就是平时存放项目代码的地方<br>Index / Stage:暂存区，用于临时存放改动，事实上它只是一个文件，保存即将提交到文件列表信息<br>Repository :仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交的所有版本的数据。其中HEAD指向最新放入仓库的版本</p><h3 id="工作流程">工作流程</h3><p>1、在工作目录中添加、修改文件;<br>2.将需要进行版本管理的文件放入暂存区域;<br>3.将暂存区域的文件提交到git仓库。<br>因此，git管理的文件有三种状态：已修改，已暂存，已提交</p><h2 id="关于分支">关于分支</h2><p>git是一个帮助多人协同合作的工具，由于个人之间的工作不同，项目代码势必会在同一基础上进行不同的修改，这个同一基础就是master主分支，要对master进行修改，一般要新建一个分支，对master进行不同修改后得到的不同分支进行合并时，一般会由git判断是否存在冲突，这时，Git 不能自动决定应该选择哪个更改，因为它无法确定哪个更改是正确的。在这种情况下，Git 会将冲突标记在文件中，然后需要开发者手动解决冲突，冲突解决后，可以将合并后的这个新的分支设置为新的master<br>解决冲突的一般步骤是：<br>1.执行<code>git pu11</code>以获取远程分支的最新更改。<br>2.Git将会提示存在冲突的文件，需要在这些文件中手动编辑并解决冲突。<br>3.编辑后的文件需要保存，然后使用<code>git add</code>将文件标记为已解决。<br>4.最后，运行<code>git commit</code>来提交解决冲突的更改。</p><h2 id="关于一些常见问题">关于一些常见问题</h2><ol><li><strong>Git的原理和工作流程</strong>： Git 是一种分布式版本控制系统，它的核心原理是基于快照（snapshot）。每次提交（commit）都会创建一个文件和目录的快照，而不是保存文件之间的差异。Git 的工作流程通常包括以下步骤：<ul><li><strong>克隆（Clone）</strong>：从远程仓库复制项目到本地，创建一个本地仓库。</li><li><strong>工作目录（Working Directory）</strong>：在本地仓库中，你可以在工作目录中修改文件。</li><li><strong>暂存区（Staging Area）</strong>：将工作目录中的修改添加到暂存区，为下一次提交做准备。</li><li><strong>提交（Commit）</strong>：从暂存区中创建一个快照，将其保存到版本历史中。</li><li><strong>分支（Branch）</strong>：可以创建分支来在不同功能上开展并行开发，每个分支都有自己的工作目录、暂存区和提交历史。</li><li><strong>合并（Merge）</strong>：将不同分支上的修改合并到一起，形成一个新的提交。</li><li><strong>推送（Push）</strong>：将本地提交推送到远程仓库，与团队共享。</li><li><strong>拉取（Pull）</strong>：从远程仓库获取最新的变更，包括其他人的提交。</li></ul></li><li><strong>版本控制系统</strong>： 版本控制系统（Version Control System，VCS）是一种用于追踪和管理文件版本和变更历史的工具。它允许多人协同开发、追踪代码变化、回溯历史、分支和合并等。VCS 的主要目的是使开发团队能够更有效地协同工作，减少错误和冲突，并为项目提供详细的版本历史。</li><li><strong>git fetch和git pull命令的区别</strong>：<ul><li><p><code>git fetch</code>：从远程仓库获取最新的提交和分支信息，但不会自动合并或更新你的工作目录。它会将获取的内容存储在本地仓库的远程跟踪分支中。</p></li><li><p><code>git pull</code>：执行两个操作，首先，它会从远程仓库拉取最新的提交并合并到当前分支，然后更新你的工作目录。这相当于执行了 <code>git fetch</code> 后紧接着的 <code>git merge</code>。</p></li></ul></li><li><strong>git rebase和git merge命令的区别</strong>：<ul><li><code>git merge</code>：将一个分支的更改合并到另一个分支。合并会创建一个新的提交节点，记录两个分支的历史交汇点。</li><li><code>git rebase</code>：将一个分支上的更改在另一个分支的基础上重新应用。它将当前分支上的提交逐个应用到目标分支的顶部，创造更线性的提交历史。</li></ul></li><li><strong>Git Flow</strong>： Git Flow 是一种流行的 Git 分支管理工作流，它提供了一套规范的分支命名和管理策略。它包括主分支（master）、开发分支（develop）、功能分支（feature）、发布分支（release）、修复分支（hotfix）等。Git Flow 的好处在于使协同开发更有条理，促进版本控制和发布的流程化，降低冲突和错误。</li><li><strong>暂存区</strong>： 暂存区是 Git 版本控制系统的一个重要概念。在进行提交之前，你可以将工作目录中的修改（包括新增、修改和删除的文件）添加到暂存区。暂存区允许你控制哪些更改应该包含在下一次提交中。这使你能够构建精细的提交，准备提交前进行检查，避免错误和混乱的提交。<br>Git 需要暂存区的存在，因为它提供了更多的控制权和准备提交的灵活性。你可以选择性地将不同文件的修改添加到暂存区，从而创建更清晰、有序的提交历史。</li><li><strong>控制某些文件不被提交</strong>： 你可以使用<code>.gitignore</code>文件来控制哪些文件或目录在提交时被忽略。在项目根目录下创建或编辑<code>.gitignore</code>文件，然后列出你希望忽略的文件、目录、通配符等。这样，这些文件就不会出现在提交中。</li><li><strong>提交冲突的情况和解决方法</strong>： 冲突通常发生在以下情况：<ul><li>多人同时修改同一行或相邻行的代码。</li><li>合并分支时，两个分支有相同文件的不同修改。<br>解决冲突的步骤：</li><li>运行 <code>git status</code> 查看冲突文件。</li><li>打开冲突文件，在文件中可以看到类似于 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>、<code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch_name</code> 的标记，这是冲突的标志。</li><li>手动编辑文件，保留需要的代码部分，删除冲突标记和无关的部分。</li><li>保存文件，然后运行 <code>git add</code> 将冲突文件标记为已解决。</li><li>运行 <code>git commit</code> 提交解决冲突后的修改。</li></ul></li><li><strong>恢复错误的代码或删除的文件</strong>：<ul><li>对于已提交的错误代码，可以通过创建新的提交来修复。你可以修改代码，然后提交一个新的修复提交。</li><li>对于已删除的文件，如果你没有提交删除操作，可以使用 <code>git checkout</code> 命令来还原文件，例如：<code>git checkout filename</code>。</li></ul></li><li><strong>项目代码管理的方法</strong>：<ul><li>使用版本控制系统，如 Git。</li><li>遵循分支管理策略，如 Git Flow，以便有条理地管理功能开发、测试和发布。</li><li>使用代码审查来保证代码质量。</li><li>使用持续集成和持续交付工具，确保代码的集成和交付过程自动化、稳定和可重复。</li><li>鼓励团队成员遵循一致的编码风格和最佳实践。</li></ul></li><li><strong>防止错误的代码提交</strong>：<ul><li>使用代码审查：通过审查他人的代码，可以发现和纠正错误。</li><li>使用自动化测试：编写自动化测试用例来检查代码是否正常工作。</li><li>使用持续集成：集成和自动化测试可以在提交之前自动运行，减少错误的机会。</li><li>使用预提交挂钩（pre-commit hooks）：可以设置钩子，在提交前运行特定的脚本来检查代码是否符合规范。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">git基本使用</summary>
    
    
    
    <category term="开发工具" scheme="https://xlxq.fun/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="https://xlxq.fun/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>消息队列概述</title>
    <link href="https://xlxq.fun/posts/487a8a3.html"/>
    <id>https://xlxq.fun/posts/487a8a3.html</id>
    <published>2024-01-12T11:18:02.000Z</published>
    <updated>2024-01-12T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>消息队列</h1><p>消息队列源于消费者生产者模式，由生产者（Producer）、消息处理中心（Broker）、和消费者（Consumer）三者构成，一般有点对点和发布订阅两种模式：</p><ol><li>点对点模式：多个生产者向同一个队列发送消息，每个消息只能由一个消费者消费</li><li>发布订阅模式：每个消息都能被多个订阅者获取和处理</li></ol><h1>核心功能</h1><p>消息队列（MQ）提供三个核心功能：解耦、异步处理和削峰。</p><ol><li><strong>业务解耦</strong> 是指在分布式系统中，各组件或服务之间不直接通信，而是通过消息队列进行交互。这种方式使得各组件可以独立地进行更新和扩展，增强了系统的灵活性和可扩展性。例如，在电商平台中，订单服务和支付服务可以通过消息队列进行通信，互不影响，从而减少系统间的直接依赖。</li><li><strong>异步处理</strong> 意味着系统的不同部分可以在不同的时间处理信息，从而提高整体效率和响应速度。在异步模型中，一个服务可以发送消息到队列，而不需要等待接收服务的响应。这种模式在高流量应用中尤其重要，如社交媒体平台中的消息传递。</li><li><strong>流量削峰</strong> 指的是使用消息队列来应对短时间内的高流量。通过消息队列，可以平衡负载，确保系统在面对高峰流量时不会崩溃。例如，在促销或大型销售事件期间，消息队列可以帮助电子商务网站处理突发的大量订单请求。</li></ol><h1>特点</h1><p>作为消息队列中间件，需要具备以下能力：</p><ol><li><strong>消息持久化</strong>：确保在系统故障时消息不会丢失。</li><li><strong>高可用性和容错性</strong>：通过集群和故障转移机制确保系统的稳定运行。</li><li><strong>消息确认和可靠传递</strong>：保证消息被正确接收和处理。</li><li><strong>负载均衡</strong>：在多个生产者和消费者间有效分配消息。</li><li><strong>扩展性</strong>：支持根据负载增加节点以扩展系统。</li></ol><h1>常见消息队列</h1><h2 id="RabbitMQ">RabbitMQ</h2><p>少数几个支持 AMQP 协议的消息队列之一。很容易部署和使用。客户端支持多种编程语言。<br>但有以下缺点：</p><ul><li>对消息堆积的支持不好，当大量消息积压的时候，会导致 RabbitMQ 的性能急剧下降。</li><li>RabbitMQ的性能是这几个消息队列中最差的，大概每秒钟只能处理几万到十几万条消息。如果应用对消息队列的性能要求非常高，那么不要选择 RabbitMQ。</li><li>RabbitMQ使用的编程语言是Erlang，扩展和二次开发成本高。</li></ul><h2 id="Kafka">Kafka</h2><p>Kafka与周边生态系统的兼容性是最好的没有之一，尤其在大数据和流计算领域，几乎所有的相关开源软件系统都会优先支持 Kafka。Kafka性能高效、可扩展良好并且可持久化。它的分区特性，可复制和可容错都是不错的。Kafka 使用 Scala 和Java 语言开发，设计上大量使用了批量和异步的思想，使得 Kafka能做到超高的性能。Kafka 的性能，尤其是异步收发的性能，是三者中最好的，但与 RocketMQ 并没有量级上的差异，大约每秒钟可以处理几十万条消息。<br>但有以下缺点：</p><ul><li>同步收发消息的响应时延比较高，因为当客户端发送消息的时候，Kafka 采用的是<strong>批量发送</strong>，在它的 Broker中，很多地方都会使用这种先攒一波再一起处理的设计。当业务场景中每秒钟消息数量没有那么多的时候，Kafka 的时延反而会比较高。所以，Kafka 不太适合在线业务场景。topic达到上百个时，吞吐量会大幅下降。<br>高性能的原因：</li></ul><ol><li>磁盘顺序读写：保证了消息的堆积<ul><li>顺序读写，磁盘会<strong>预读</strong>，预读即在读取的起始地址连续读取多个页面，比随机读写的速度快不少，因为免去了磁盘寻道的时间</li></ul></li><li>使用零拷贝：避免 CPU 将数据从一块存储拷贝到另外一块存储的技术。</li><li>分区分段+索引：Kafka的message消息实际上是分布式存储在一个一个小的segment中的，每次文件操作也是直接操作的segment。为了进一步的查询优化，Kafka又默认为分段后的数据文件建立了索引文件，就是文件系统上的.index文件。这种分区分段+索引的设计，不仅提升了数据读取的效率，同时也提高了数据操作的并行度</li><li>批量压缩/读写：多条消息一起压缩，降低带宽</li><li>直接操作page cache，而不是JVM、避免GC耗时及对象创建耗时，且读写速度更高，进程重启缓存也不会丢</li></ol><h2 id="RocketMQ">RocketMQ</h2><p>RocketMQ 有着不错的性能，<strong>稳定性和可靠性</strong>，具备一个现代的消息队列应该有的几乎全部功能和特性，并且它还在持续的成长中。RocketMQ 有非常<strong>活跃的中文社区</strong>，大多数问题可以找到中文的答案。RocketMQ 使用 Java 语言开发，源代码相对比较容易读懂，容易对RocketMQ 进行扩展或者二次开发。RocketMQ 对<strong>在线业务</strong>的响应时延做了很多的优化，大多数情况下可以做到毫秒级的响应。</p>]]></content>
    
    
    <summary type="html">消息队列</summary>
    
    
    
    <category term="消息队列" scheme="https://xlxq.fun/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="消息队列" scheme="https://xlxq.fun/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>synchronized详解</title>
    <link href="https://xlxq.fun/posts/f0baa025.html"/>
    <id>https://xlxq.fun/posts/f0baa025.html</id>
    <published>2023-11-15T12:18:02.000Z</published>
    <updated>2023-11-15T12:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>并发编程中的三大问题</h1><ol><li><strong>原子性问题（Atomicity）：</strong><ul><li><strong>定义：</strong> 保证一个操作是不可中断的，要么全部执行成功，要么全部不执行。</li><li><strong>问题：</strong> 当多个线程同时执行一组操作时，可能出现一部分操作已经执行而另一部分没有执行的情况，导致数据不一致性。</li></ul></li><li><strong>可见性问题（Visibility）：</strong><ul><li><strong>定义：</strong> 一个线程对共享变量的修改能够及时被其他线程看到。</li><li><strong>问题：</strong> 当一个线程修改了共享变量的值，其他线程可能无法立即感知到这个变化，从而导致数据的不一致性。</li></ul></li><li><strong>有序性问题（Ordering）：</strong><ul><li><strong>定义：</strong> 确保程序执行的顺序与代码的书写顺序一致。</li><li><strong>问题：</strong> 由于编译器的优化或硬件的乱序执行，代码的执行顺序可能与预期不一致，导致意外的结果。</li></ul></li></ol><h1>JMM（Java Memory Modle）</h1><p>Java内存模型，是Java虚拟机规范中所定义的一种内存模型，Java内存模型是标准化的，屏蔽掉了底层不同计算机的区别。它是一套规范，描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存和从内存中读取变量这样的底层细节。Java内存模型是一套在多线程读写共享数据时，对共享数据的可见性、有序性、和原子性的规则和保障。</p><ol><li>主内存：是所有线程都共享的，都能访问的。所有的共享变量都存储于主内存。</li><li>工作内存：每一个线程有自己的工作内存，工作内存只存储该线程对共享变量的<strong>副本</strong>。线程对变量的所有的操作(读，取)都必须在工作内存中完成，而不能直接读写主内存中的变量，不同线程之间也不能直接访问对方工作内存中的变量。</li><li>JMM是一种抽象的逻辑概念，Java内存模型和计算机硬件内存架构是一个相互交叉的关系，是一种抽象概念划分与真实物理硬件的交叉</li></ol><h2 id="JMM中主内存与工作内存之间的数据交互过程">JMM中主内存与工作内存之间的数据交互过程</h2><p>Java内存模型中定义了以下8种操作来完成，主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的。<br>分别是lock、read、load、use、assign、store、write、unlock<br>1.如果对一个变量执行lock操作，将会清空工作内存中此变量的值<br>2.对一个变量执行unlock操作之前，必须先把此变量同步到主内存中</p><h1>synchronized与三大特性</h1><p>synchronized可以保证原子性、有序性、可见性，其中有序性和可见性是通过JMM规范的八个命令中的lock和unlock命令保证的</p><ol><li><strong>原子性（Atomicity）：</strong><ul><li><code>synchronized</code> 保证了代码块或方法中的所有操作要么全部执行成功，要么全部失败，不会被其他线程中断。当一个线程获得锁时，它将独占锁，其他线程必须等待释放锁后才能继续执行。</li></ul></li><li><strong>可见性（Visibility）：</strong><ul><li>当一个线程获得锁进入 <code>synchronized</code> 代码块时，它会清空工作内存中的共享变量副本，强制从主内存中重新读取共享变量的值。同样，线程在释放锁的时候会将修改后的值刷新回主内存，这样其他线程能够感知到这些变化。这确保了对共享变量的修改对其他线程可见。</li></ul></li><li><strong>有序性（Ordering）：</strong><ul><li>as-if-serial：不管编译器和CPU如何重排序，必须保证在单线程情况下程序的结果是正确的。也就是逻辑上有先后关系的代码不会被重排序，例如a=1,b=2,c=a+b可能被重排序为b=2,a=1,c=a+b，但不可能被重排序为a=1,c=a+b,b=2</li><li><code>synchronized</code> 保证了线程进入和退出临界区的有序性。即，一个线程在释放锁之前，必须把修改过的变量刷新到主内存，而获取锁的线程要求从主内存中读取变量的最新值。这就确保了线程之间的有序性，防止了乱序执行。</li></ul></li></ol><h1>特性</h1><h2 id="可重入锁">可重入锁</h2><p>一个线程在持有锁的情况下，可以再次获取相同的锁，而不会造成死锁。这是通过<strong>为每个锁关联一个持有者线程和一个计数器</strong>来实现的。当一个线程第一次获取锁时，计数器为1，每次递归获取锁，计数器递增。只有当计数器降为零时，锁才会被释放。这确保了线程可以多次进入同一个 <code>synchronized</code> 代码块，而不会发生死锁。可重入锁是一种提高程序灵活性和避免死锁的设计。</p><h2 id="不可中断">不可中断</h2><p>不可中断：一个线程获得锁后，另一个线程想要获得锁，必须处于阻塞或等待状态，如果第一个线程不释放锁，第二个线程会一直阻塞或等待，不可被中断。</p><h1>原理</h1><h2 id="monitorenter">monitorenter</h2><ol><li>每一个对象都会和一个<strong>监视器</strong>monitor关联。监视器被占用时会被锁住，其他线程无法来获取该monitor。当JVM执行某个线程的某个方法内部的monitorenter时，它会尝试去获取当前对象对应的monitor的所有权。其过程如下︰</li><li>获取当前对象对应的monitor的所有权的过程：<ul><li>若monior的进入数为0，线程可以进入monitor，并将monitor的进入数置为1。当前线程成为monitor的owner (所有者）</li><li>若线程已拥有monitor的所有权，允许它重入monitor，则进入monitor的进入数加1</li><li>若其他线程已经占有monitor的所有权，那么当前尝试获取monitor的所有权的线程会被阻塞，直到monitor的进入数变为0，才能重新尝试获取monitor的所有权。</li></ul></li><li>synchronized的锁对象会关联一个monitor,这个monitor不是我们主动创建的,是JVM的线程执行到这个同步代码块,发现锁对象没有monitor就会创建monitor,monitor内部有两个重要的成员变量：<ul><li>owner:拥有这把锁的线程</li><li>recursions会记录线程拥有锁的次数,当一个线程拥有monitor后其他线程只能等待</li></ul></li></ol><h2 id="monitorexit">monitorexit</h2><ol><li>能执行monitorexit指令的线程一定是拥有当前对象的monitor的所有权（owner）的线程。</li><li>执行monitorexit时会将monitor的进入数减1。当monitor的进入数减为0时，当前线程退出monitor，不再拥有monitor的所有权，此时其他被这个monitor阻塞的线程可以尝试去获取这个monitor的所有权monitorexit释放锁。</li><li>monitorexit插入在方法结束处和异常处，JVM保证每个monitorenter必须有对应的monitorexit，因此<strong>synchornized出现异常时会释放锁</strong></li></ol><h2 id="对象头的结构">对象头的结构</h2><p>在 HotSpot JVM 中，对象头包括两部分信息，分别是 Mark Word 和 Klass Pointer</p><ol><li>Mark Word用于存储对象自身的运行时数据，如哈希码(HashCode ) 、GC分代年龄、锁状态标志线程持有的锁、偏向线程ID、偏向时间戳等等，占用内存大小与虚拟机位长一致。</li><li>Klass Pointer用于存储对象的类型指针，该指针指向它的类元数据，JVM通过这个指针确定对象是哪个类的实例。该指针的位长度为JVM的一个字大小，即32位的JVM为32位，64位的JVM为64位。</li></ol><h1>锁升级</h1><ol><li><strong>偏向锁（Biased Locking）：</strong><ul><li>初始时，一个对象的头部信息会包含偏向锁标记。当某个线程访问这个对象并获取锁时，会将该线程的ID记录在对象头中，并将偏向锁标记置为1。之后，如果同一个线程再次访问该对象，无需竞争，直接获取锁。这提高了同一线程多次获取锁的效率。</li></ul></li><li><strong>轻量级锁（Lightweight Locking）：</strong><ul><li>当有多个线程竞争同一把锁时，偏向锁就不再合适。此时，锁会升级为轻量级锁。在轻量级锁的情况下，当前获取到锁的线程将对象的Mark Word复制到栈帧中的Lock Recod中，Mark Word更新为指向Lock Record的指针。其他线程在尝试获取锁时会将对象头的 Mark Word 复制到线程的栈帧中，并进行自旋操作，而不是直接阻塞线程。如果自旋失败（10次以上仍未获取），锁升级为重量级锁。</li></ul></li><li><strong>重量级锁（Heavyweight Locking）：</strong><ul><li>当轻量级锁自旋失败，多个线程竞争同一把锁的时候，锁会升级为重量级锁。在这种情况下，JVM 使用操作系统提供的互斥量来实现锁。此时，如果一个线程获取了锁，其他线程必须阻塞等待。重量级锁是通过对象头关联的monitor（见补充）实现的。</li></ul></li></ol><h1>优化</h1><ol><li>锁消除：在synchronized修饰的代码中，如果不存在操作临界资源的情况，编译时JIT触发锁消除，相当于无锁</li><li>锁膨胀：如果在一个循环中，频繁的获取和释放做资源，这样带来的消耗很大，锁膨胀就是将锁的范围扩大，避免频繁的竞争和获取锁资源带来不必要的消耗</li><li>锁升级：synchronized在JDK1.6之前，获取不到锁，立即挂起当前线程，所synchronized性能比较差，之后做了锁升级的优化，即无锁—&gt;偏向锁—&gt;轻量级锁—&gt;重量级锁；有的观点认为锁只能升级，不能降级，也有说锁降级确实是会发生的，当 JVM 进入安全点（SafePoint）的时候，会检查是否有闲置的 Monitor，然后试图进行降级。</li></ol><h1>补充</h1><h2 id="java中对象的结构">java中对象的结构</h2><p>java对象由三部分组成：对象头，实例数据，对齐填充</p><ol><li>对象头：由 Mark Word 和 Klass Pointer组成</li><li>实例数据：就是类中定义的成员变量</li><li>对齐填充：并不是必然存在的，也没有什么特别的意义，他仅仅起着占位符的作用，由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说，就是对象的大小必须是8字节的整数倍。而对象头正好是8字节的倍数，因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</li></ol><h2 id="monitor">monitor</h2><ol><li>每一个Java对象都<code>可以</code>与一个监视器monitor关联，我们可以把它理解成为一把锁，当一个线程想要执行一段被synchronized圈起来的同步方法或者代码块时，该线程得先获取到synchronized修饰的对象对应的monitor。</li><li>monitor并不是随着对象创建而创建的。我们是通过synchronized修饰符告诉VM需要为我们的某个对象创建关联的monitor对象。</li><li>monitor的重要成员变量<ul><li>_owner:初始时为NULL。当有线程占有该monitor时，owner标记为该线程的唯一标识。当线程释放monitor时，owner又恢复为NULL。owner是一个临界资源，JVM是通过CAS操作来保证其线程安全的。</li><li>_CXq∶竞争队列，所有请求锁的线程首先会被放在这个队列中（单向链接）。_cxq是一个临界资源，JVM通过CAS原子指令来修改_cxq队列。修改前_cxq的旧值填入了node的next字段，_cxq指向新值（新线程)。因此_cxq是一个后进先出的stack(栈)。</li><li>_EntryList : _cxq队列中有资格成为候选资源的线程会被移动到该队列中。</li><li>_WaitSet :因为调用wait方法而被阻塞的线程会被放在该队列中。</li></ul></li><li>monitor是重量级锁：<ul><li>ObjectMonitor（hotspot的monitor实现）的函数调用中会涉及到Atomic::cmpxchg_ptr，Atomic:.inc_ptr等内核函数，执行同步代码块，没有竞争到锁的对象会park()被挂起，竞争到锁的线程会unpark()唤醒。这个过程中存在操作系统用户态和内核态的转换，这种切换会消耗大量的系统资源。所以synchronized在Java语言中是一个重量级(Heavyweight)的操作。</li></ul></li></ol><h2 id="安全点（safe-point）">安全点（safe point）</h2><p>安全点是程序执行的一个状态，JVM 在这个状态下，能够确保所有线程都在安全位置，不会出现对对象引用的修改。在安全点上，JVM 可以停止所有线程，进行垃圾回收、线程栈的修改等操作，而不会导致数据不一致或错误的状态。在安全点上，线程不会在执行关键的、可能导致数据不一致的代码。<br>安全点通常发生在一些特定的位置，包括：</p><ol><li><strong>方法调用：</strong><ul><li>在方法调用的地方，JVM 可以方便地确保所有线程都在一个安全的状态。这可以是方法的入口或返回点。</li></ul></li><li><strong>循环跳跃：</strong><ul><li>在循环的迭代点，例如 for 循环的迭代点，也是安全点。这是因为在循环迭代点，线程通常都在相对较安全的位置。</li></ul></li><li><strong>异常抛出：</strong><ul><li>在抛出异常的地方，例如在 <code>throw</code> 语句附近，也是一个潜在的安全点。</li></ul></li><li><strong>代码生成器插入的安全点：</strong><ul><li>代码生成器在生成机器码时，会在适当的位置插入安全点，以确保在执行这些机器码时，所有线程都在一个安全的状态。。在某些情况下，为了减少安全点的频率，JVM 可能会选择较少的插入安全点，从而提高程序的运行效率。</li></ul></li></ol><h2 id="synchronized与Lock的区别">synchronized与Lock的区别</h2><ol><li>synchronized是关键字，而Lock是一个接口。</li><li>synchronized会自动释放锁，而Lock必须手动释放锁。</li><li>synchronized是不可中断的，Lock可以中断也可以不中断。</li><li>通过Lock可以知道线程有没有拿到锁，而synchronized不能。</li><li>synchronized能锁住方法和代码块，而Lock只能锁住代码块。</li><li>Lock可以使用读锁提高多线程读效率。</li><li>synchronized是非公平锁，ReentrantLock可以控制是否是公平锁。</li></ol><h1>总结</h1><ol><li>synchornized是可重入锁，不可中断锁</li><li>可以保证原子性，有序性和可见性（JMM中定义的8种原子操作）</li><li>原理是java对象头（偏向锁、轻量级锁）以及monitor（重量级锁）</li><li>jdk6后提供了锁优化：锁消除、锁膨胀、锁升级</li></ol>]]></content>
    
    
    <summary type="html">java基础知识</summary>
    
    
    
    <category term="java" scheme="https://xlxq.fun/categories/java/"/>
    
    
    <category term="源码解析" scheme="https://xlxq.fun/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot自动配置原理</title>
    <link href="https://xlxq.fun/posts/38650253.html"/>
    <id>https://xlxq.fun/posts/38650253.html</id>
    <published>2023-11-12T12:18:02.000Z</published>
    <updated>2023-11-12T12:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>@SpringBootApplication</h1><p>Spring Boot的启动类上的注解@SpringBootApplication是实现自动配置的关键，跟踪可以看到@SpringBootApplication包含许多注解<br><img src="/post-img/Pasted image 20240303201036.png" alt="图片损坏" style="zoom:100%;" /></p><p>下面依次说明各注解的作用</p><ol><li><code>@Target(&#123;ElementType.TYPE&#125;)</code>: 这个注解指定了该自定义注解可以应用的目标元素类型。在这里，它指定了这个注解只能应用于类（Type）。</li><li><code>@Retention(RetentionPolicy.RUNTIME)</code>: 这个注解指定了该自定义注解在运行时可见。在这里，它表示这个注解在运行时会保留，因此可以通过<strong>反射</strong>来访问它。</li><li><code>@Documented</code>: 这个注解指定了当Java文档工具（如Javadoc）生成文档时，是否将这个注解包含在文档中。在这里，它表示这个注解会被文档化。</li><li><code>@Inherited</code>: 这个注解指定了子类是否会继承父类的注解。在这里，它表示子类会继承这个注解。</li><li><code>@SpringBootConfiguration</code>: 这个注解是Spring Boot提供的一个特殊的配置类注解，它等同于<code>@Configuration</code>。用于标识一个类是Spring Boot应用程序的配置类，通常用于定义Bean。</li><li><code>@EnableAutoConfiguration</code>: 这个注解启用了Spring Boot的自动配置功能。它会根据类路径中的情况自动配置Spring应用程序。这是Spring Boot自动配置的核心注解之一。</li><li><code>@ComponentScan</code>: 这个注解指示Spring在指定的包及其子包中搜索带有注解的组件。它可以用于指定要扫描的包路径。</li></ol><h1>@EnableAutoConfiguration</h1><p>@EnableAutoConfiguration是Spring Boot自动配置的核心注解之一，跟踪可以发现它同样包含许多注解，其中@AutoConfigurationPackage和@Import是自动配置的关键<br><img src="/post-img/Pasted image 20240303201722.png" alt="图片损坏" style="zoom:100%;" /></p><ol><li><code>@AutoConfigurationPackage</code>: 这个注解用于指示Spring Boot应该自动配置位于指定包及其子包中的Bean。它会将该包及其子包下的所有组件加入到Spring Boot的自动配置中。</li><li><code>@Import</code>: 这个注解是Spring的核心注解之一，它用于导入其他配置类或者配置项。在这里，通过导入<code>AutoConfigurationImportSelector.class</code>，实现了自动配置的导入。</li></ol><h1>类AutoConfigurationImportSelector</h1><p>@Import导入了类AutoConfigurationImportSelector，这个类实现了DeferredImportSelector，再跟进可以发现DeferredImportSelector继承自ImportSelector，而ImportSelector中的方法selectImports的返回值就保存着需要自动配置的类的全类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br></pre></td></tr></table></figure><p>它在AutoConfigurationImportSelector中的实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;  </span><br><span class="line">       <span class="keyword">return</span> NO_IMPORTS;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> getAutoConfigurationEntry(annotationMetadata);  </span><br><span class="line">    <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容易发现，返回值是通过getAutoConfigurationEntry方法获取并通过getConfigurations获取的，继续跟进getAutoConfigurationEntry方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;  </span><br><span class="line">       <span class="keyword">return</span> EMPTY_ENTRY;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> getAttributes(annotationMetadata);  </span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);  </span><br><span class="line">    configurations = removeDuplicates(configurations);  </span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);  </span><br><span class="line">    checkExcludedClasses(configurations, exclusions);  </span><br><span class="line">    configurations.removeAll(exclusions);  </span><br><span class="line">    configurations = getConfigurationClassFilter().filter(configurations);  </span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>(configurations, exclusions);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出我们需要的configurations集合来自getCandidateConfigurations方法，继续跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;  </span><br><span class="line">    List&lt;String&gt; configurations = ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader())  </span><br><span class="line">       .getCandidates();  </span><br><span class="line">    Assert.notEmpty(configurations,  </span><br><span class="line">          <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you are using a custom packaging, make sure that file is correct.&quot;</span>);  </span><br><span class="line">    <span class="keyword">return</span> configurations;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的文本信息很关键，告诉我们auto configuration classes（自动配置类）是在两个文件中获取的（springboot3.0之后已经取消了META-INF/spring.factories），找到这两个文件，可以发现其中确实存在许多全类名，随便选一个类名跟进，可以发现有@AutoConfiguration，而这个注解又包含@Configuration，也就是说，它是一个配置类，并且提供了被@Bean修饰的方法来返回bean对象，因此，一旦该类被加载，对应的bean就会自动进入IOC容器，我们后续就可以使用，这就是所谓的自动配置</p><h1>流程梳理</h1><p>经过上述跟进源码，我们可以梳理一下整个流程：</p><ol><li>Spring Boot实现自动配置的关键注解<ul><li>@SpringBootApplication—&gt;@EnableAutoConfiguration</li><li>@EnableAutoConfiguration—&gt;@Import({AutoConfigurationImportSelector.class})</li></ul></li><li>AutoConfigurationImportSelector类中的方法selectImports返回需要加载的配置类<ul><li>selectImports—&gt;getAutoConfigurationEntry</li><li>getAutoConfigurationEntry—&gt;getCandidateConfigurations</li><li>getCandidateConfigurations—&gt;META-INF/spring.factories文件</li></ul></li><li>META-INF/spring.factories文件中存放了所有需要进行自动配置的类</li></ol><h1>@ConditionalOnXXX</h1><p>一个配置类中通常会包含许多bean，那么这些bean全部都会随着配置类的加载进入IOC容器吗，当然不会，这就是@ConditionalOnXXX系列注解的作用<br>它用于配置类或者组件上(@Bean修饰的方法)上，可以根据项目的特定需求和环境来决定是否加载某个组件或配置，从而实现更加灵活和可配置的应用程序开发。<br>常见的<code>@ConditionalOnXXX</code>注解及其作用：</p><ol><li><code>@ConditionalOnClass</code>: 当指定的类位于类路径中时，才会生效。</li><li><code>@ConditionalOnMissingClass</code>: 当指定的类不位于类路径中时，才会生效。</li><li><code>@ConditionalOnBean</code>: 当指定的Bean存在于Spring应用程序上下文中时，才会生效。</li><li><code>@ConditionalOnMissingBean</code>: 当指定的Bean不存在于Spring应用程序上下文中时，才会生效。</li><li><code>@ConditionalOnProperty</code>: 当指定的属性满足条件时，才会生效。</li><li><code>@ConditionalOnResource</code>: 当指定的资源存在时，才会生效。</li><li><code>@ConditionalOnWebApplication</code>: 当应用程序是一个Web应用程序时，才会生效。</li><li><code>@ConditionalOnNotWebApplication</code>: 当应用程序不是一个Web应用程序时，才会生效。</li><li><code>@ConditionalOnExpression</code>: 当指定的SpEL表达式计算结果为true时，才会生效。</li></ol><h1>总结</h1><p>Spring Boot自动配置原理：</p><ol><li>@SpringBootApplication包含若干注解，其中比较重要的是@ComponentScan，@EnableAutoConfiguration，@@SpringBootApplication，而@EnableAutoConfiguration是实现自动配置的关键注解</li><li>@EnableAutoConfiguration包含@AutoConfigurationPackage和@Import两个关键注解，@AutoConfigurationPackage指明Spring Boot应该自动配置位于指定包及其子包中的Bean，而@Import导入的类AutoConfigurationImportSelector中则通过selectImports方法扫描了META-INF/spring.factories文件，并加载了其中的所有配置类</li><li>配置类加载后，其中的bean根据其条件注解@ConditionalOnXXX决定是否被放入IOC容器中</li><li>可以从IOC容器中获取bean对象，自动配置完成</li></ol><h1>补充</h1><h2 id="ComponentScan的参数">@ComponentScan的参数</h2><p><code>@ComponentScan</code>注解可以包含多个参数，用于指定扫描的方式和范围。下面是<code>@ComponentScan</code>注解常用的参数：</p><ol><li><strong>basePackages</strong>: 指定要扫描的基础包。可以指定一个或多个包路径，多个包路径之间用逗号分隔。如果不指定该参数，默认扫描注解所在类的包及其子包。</li><li><strong>basePackageClasses</strong>: 指定要扫描的基础类。通常是一些标志性的类，<code>@ComponentScan</code>会扫描这些类所在的包及其子包。如果同时指定了<code>basePackages</code>和<code>basePackageClasses</code>，则<code>basePackages</code>会被忽略。</li><li><strong>includeFilters</strong>: 指定包含过滤器，用于指定哪些类应该被包含在扫描范围内。默认为空数组。可以通过<code>@Filter</code>注解指定过滤条件。</li><li><strong>excludeFilters</strong>: 指定排除过滤器，用于指定哪些类应该被排除在扫描范围外。默认为空数组。可以通过<code>@Filter</code>注解指定过滤条件。</li><li><strong>useDefaultFilters</strong>: 是否启用默认过滤器。默认值为true，表示启用默认过滤器，会扫描所有的组件。如果设置为false，则需要显式地配置包含和排除过滤器。</li><li><strong>lazyInit</strong>: 是否启用延迟初始化。默认值为false，表示不启用延迟初始化。如果设置为true，则会延迟初始化扫描到的所有组件。</li><li><strong>resourcePattern</strong>: 指定要扫描的资源模式。默认值为&quot;/*.class&quot;，表示扫描所有的类文件。可以根据需要指定其他模式，比如&quot;/*.java&quot;。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    basePackages = &#123;&quot;com.example.services&quot;, &quot;com.example.controllers&quot;&#125;,</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class&#125;),</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.REGEX, pattern = &quot;.*Test.*&quot;)</span></span><br><span class="line"><span class="meta">    &#125;,</span></span><br><span class="line"><span class="meta">    useDefaultFilters = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 这是一个配置类，用于指定组件扫描的方式和范围</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ComponentScan和-EnableAutoConfiguration">@ComponentScan和@EnableAutoConfiguration</h2><ol><li>在Spring Boot应用程序中，<code>@ComponentScan</code>注解通常用于扫描自定义的配置类（例如包含<code>@Configuration</code>注解的类），以及其他自定义的组件（例如包含<code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code>等注解的类）。这些自定义的配置类和组件通常位于<strong>自己编写的包</strong>中。</li><li>对于<strong>starter中的配置类</strong>，通常是通过<code>@EnableAutoConfiguration</code>注解来启用的。starter通常会提供一些自动配置类，这些自动配置类会被Spring Boot的<code>@EnableAutoConfiguration</code>注解自动扫描并加载。这些自动配置类中通常包含了一些自动配置的逻辑，用于根据项目的依赖和条件自动配置应用程序的一些功能。</li><li>在Spring Boot应用程序中，自定义的配置类和组件可以使用@ComponentScan注解来扫描并加载，而starter中的配置类通常是通过@EnableAutoConfiguration注解来启用的，然后通过SpringFactoriesLoader加载自动配置类。这样就能够实现自定义配置和自动配置的组合使用，从而灵活地定制和配置应用程序的功能。</li></ol><h2 id="自定义starter">自定义starter</h2><ol><li>SpringBoot Starter 类似于一种插件机制，抛弃了之前繁琐的配置，将复杂依赖统一集成进 Starter。所有依赖模块都遵循着约定成俗的默认配置，并允许我们调整这些配置，即遵循“约定大于配置”的理念 。Starter 的出现极大的帮助开发者们从繁琐的框架配置中解放出来，从而更专注于业务代码。</li><li>Spring 官方提供 Starter 通常命名为 spring-boot-starter-{name} 如：spring-boot-starter-web，spring-boot-starter-activemq 等；Spring 官方建议非官方提供的 Starter 命名应遵守 {name}-spring-boot-starter 的格式：如mybatis-spring-boot-starter。</li><li>Starter 也是基于 SpringBoot 项目创建的，所以第一步应该先创建 SpringBoot 项目，编写pom文件和需要自动配置的类（用@Configuration和@Bean），Resources 目录下新建 META-INF 文件夹，然后创建 spring.factories 文件<ul><li>为什么要指定 resources/META-INF 下写 spring.factories？后续补充</li></ul></li><li>完成后通过maven打包测试（可以获取到bean就算成功了）并保存到本地仓库中，后续就可以供自己使用了</li><li>可插拔starter虽然引入了Starter Jar 包，但是可以通过条件判断是否加载满足条件的话加载此 Jar 相关配置，不满足就不加载，这可以通过自定义注解+条件注解实现，例如</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfigTest &#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AutoConfigurationTest 类中添加条件注解，然后重新打包至本地仓库</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(annotation = EnableAutoConfigTest.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConfigurationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServiceBean <span class="title function_">getServiceBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServiceBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在主程序引用 @EnableAutoConfigTest 注解</span></span><br><span class="line"><span class="meta">@EnableAutoConfigTest</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTestSpringBootStarterApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoTestSpringBootStarterApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么一定是spring-factories">为什么一定是spring.factories</h2><p><code>@EnableAutoConfiguration</code>注解通过读取<code>META-INF/spring.factories</code>文件的内容来加载自动配置类。这个过程是由Spring框架的<code>SpringFactoriesLoader</code>类实现的。<br>具体来说，<code>SpringFactoriesLoader</code>类提供了一个静态方法<code>loadFactoryNames()</code>，这个方法接收一个ClassLoader和一个要加载的工厂类型作为参数，然后返回一个包含工厂名称的列表。在Spring Boot中，<code>@EnableAutoConfiguration</code>注解内部就是通过调用<code>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader)</code>方法来加载自动配置类的。<br><code>SpringFactoriesLoader</code>在加载<code>META-INF/spring.factories</code>文件时，会使用给定的ClassLoader来查找这个文件。一旦找到了<code>spring.factories</code>文件，它会读取文件中每个工厂类型对应的配置，并将这些工厂名称加载到一个列表中返回。<br>总而言之<code>SpringFactoriesLoader#loadFactories</code> 负责完成自动装配类的加载，扫描的就是这个变量文件，因此它的名称不可随意更改</p>]]></content>
    
    
    <summary type="html">从源码解析Spring Boot自动配置原理</summary>
    
    
    
    <category term="框架" scheme="https://xlxq.fun/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="源码解析" scheme="https://xlxq.fun/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>redis为什么高性能</title>
    <link href="https://xlxq.fun/posts/561bfca6.html"/>
    <id>https://xlxq.fun/posts/561bfca6.html</id>
    <published>2023-10-19T10:19:03.000Z</published>
    <updated>2023-10-19T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>原因总结</h1><p>redis作为数据库能拥有如此高的性能具有多方面的原因，本文来探讨其中重要的一部分</p><ol><li><strong>网络I/O：</strong><ul><li><strong>非阻塞I/O模型：</strong> Redis使用非阻塞I/O模型，采用事件驱动的方式进行网络通信。这意味着在一个线程内，可以同时处理多个客户端请求而无需为每个连接创建一个新线程。这提高了并发处理能力。</li><li><strong>高效的协议：</strong> Redis使用轻量级的文本协议，如RESP（REdis Serialization Protocol），它简单而高效，减少了网络传输的开销。</li></ul></li><li><strong>磁盘I/O：</strong><ul><li><strong>内存数据库：</strong> Redis主要将数据存储在内存中，减少了对磁盘的频繁读写操作。这使得对数据的访问速度非常快，适用于高速读写的场景。</li><li><strong>持久化机制：</strong> 尽管主要是内存数据库，但Redis提供了多种持久化机制，如RDB快照和AOF日志文件。这些机制可以根据需求进行配置，以实现数据持久化，同时尽量减小对性能的影响。</li></ul></li><li><strong>计算速度：</strong><ul><li><strong>单线程模型：</strong> Redis采用单线程模型，通过使用高效的数据结构和算法，提高了在单个线程上的计算速度。这对于简单的操作和高并发场景是非常有效的。</li></ul></li><li><strong>数据结构：</strong><ul><li><strong>优化的数据结构：</strong> Redis提供了丰富的数据结构，如字符串、哈希表、有序集合等。这些数据结构在实现上经过了优化，使得它们在各自的应用场景下能够高效地执行相关操作。</li><li><strong>内部编码：</strong> Redis对不同类型的值采用了不同的内部编码方式，例如压缩列表、哈希表、跳跃表等，以提高存储效率。</li></ul></li><li><strong>多路复用：</strong><ul><li><strong>事件驱动和多路复用：</strong> Redis使用事件驱动的模型，通过多路复用技术（如<code>epoll</code>、<code>kqueue</code>等）来处理多个客户端连接。这允许Redis在单个线程上同时监听多个套接字，提高了并发连接的处理能力。</li></ul></li><li><strong>Pipeline 操作：</strong><ul><li><strong>批量操作：</strong> Redis支持Pipeline操作，可以将多个命令打包一次性发送到服务器执行，减少了往返时间。这对于需要执行大量命令的场景，如批量读取或写入，能够显著提高性能。</li></ul></li><li><strong>分布式架构：</strong><ul><li><strong>分布式部署：</strong> Redis支持分布式部署，可以通过分片或集群的方式水平扩展。这意味着可以在多个节点上分布负载，提高整体性能。</li></ul></li><li><strong>内存管理和优化：</strong><ul><li><strong>内存碎片整理：</strong> Redis通过使用内存池和优秀的内存管理算法，减少了内存碎片的产生，提高了内存利用率。</li></ul></li></ol><h1>补充</h1><h2 id="关于多路复用">关于多路复用</h2><p>io多路复用是五种io模型（阻塞IO、非阻塞IO、IO多路复用、信号驱动IO、异步IO）之一</p><h3 id="I-O模型">I/O模型</h3><ol><li>阻塞 I/O 模型（Blocking I/O）:<ul><li>当一个应用程序发起 I/O 操作时，它会被阻塞，直到操作完成。在此期间，应用程序无法执行其他任务。</li><li>适用于简单的同步操作，对于每个操作都等待其完成。</li></ul></li><li>非阻塞 I/O 模型（Non-blocking I/O）:<ul><li>应用程序发起 I/O 操作后，可以继续执行其他任务而不被阻塞。需要通过轮询或者回调等方式来检查操作是否完成。</li><li>适用于需要同时处理多个任务的场景，可以通过轮询或事件通知来实现。</li></ul></li><li>多路复用 I/O 模型（Multiplexing I/O）:<ul><li>通过一种机制（如<code>select</code>、<code>poll</code>、<code>epoll</code>、<code>kqueue</code>等）同时监听多个 I/O 通道，当任意通道就绪时进行处理。</li><li>适用于需要同时处理多个连接的场景，提高了系统的并发性。</li></ul></li><li>信号驱动 I/O 模型（Signal-driven I/O）:<ul><li>应用程序发起 I/O 操作后，通过信号通知操作的完成。应用程序可以继续执行其他任务。</li><li>适用于需要异步通知的场景，但相对较少使用。</li></ul></li><li>异步 I/O 模型（Asynchronous I/O）:<ul><li>应用程序发起 I/O 操作后，可以继续执行其他任务。当操作完成时，应用程序通过回调或其他方式得到通知。</li><li>适用于需要异步处理的场景，能够提高并发和系统的响应性。</li></ul></li></ol><p>下面重点阐述I/O多路复用模型：<br>非阻塞IO解决了一部分问题，即应用程序发起 I/O 操作后，可以继续执行其他任务而不被阻塞，但是，仍需要进行轮询或者回调等方式来检查操作是否完成。那么有没有可能，当操作完成时再通知应用程序来避免“无用功”呢？</p><ol><li><strong>文件描述符</strong>，简称FD，是一个从0 开始的无符号整数，用来关联Linux中的一个文件。在Linux中，一切皆文件，例如常规文件、视频、硬件设备等，当然也包括网络套接字（Socket）。</li><li>当用户去读取数据的时候，<strong>不再去直接调用recvfrom</strong>（在网络编程中用于接收数据的系统调用）了，<strong>而是调用select函数</strong>，select函数会将需要监听的数据交给内核，由内核去检查这些数据是否就绪了，如果说这个数据就绪了，就会通知应用程序数据就绪，然后来读取数据，再从内核中把数据拷贝给用户态，完成数据处理，如果N多个FD一个都没处理完，此时就进行等待。</li><li>监听FD的方式、通知的方式又有多种实现，常见的有：select、poll、epoll</li></ol><ul><li>select和pool相当于是当被监听的数据准备好之后，会把监听的FD整个数据都发送给调用者，需要通过遍历的方式到整个FD中去找哪些是处理好了的文件，所以性能也并不是那么好</li><li>epoll则相当于内核准备好了之后，会把准备好的数据，直接发给调用者</li></ul><h2 id="关于事件驱动">关于事件驱动</h2><p>Redis采用单线程的事件驱动模型，而多路复用则是这种模型的一部分，它的核心是通过监听多个套接字（sockets）上的事件，从而在单个线程内同时处理多个客户端的请求。</p><h3 id="主要组成部分">主要组成部分</h3><ol><li><strong>事件处理器（Event Loop）:</strong><ul><li>Redis的事件处理器负责监听和分发事件。它通过调用操作系统提供的多路复用函数（如<code>select</code>、<code>poll</code>、<code>epoll</code>、<code>kqueue</code>等）来检测套接字上的事件。</li></ul></li><li><strong>文件事件（File Events）:</strong><ul><li>文件事件用于处理套接字上的各种事件，例如可读事件、可写事件、连接事件等。在 Redis 中，<strong>客户端的命令请求和服务器的响应都是通过文件事件来传递的</strong>。</li></ul></li></ol><h3 id="工作流程（事件循环）">工作流程（事件循环）</h3><ol><li><strong>监听事件：</strong><ul><li>事件处理器监听套接字上的事件，包括连接事件、读事件、写事件等。</li></ul></li><li><strong>等待事件：</strong><ul><li>事件处理器等待发生事件的通知。这可以通过阻塞调用多路复用函数，或者使用非阻塞I/O模型中的回调函数来实现。</li></ul></li><li><strong>事件分发：</strong><ul><li>当套接字上发生事件时，事件处理器将事件分发给相应的事件处理函数。例如，可读事件将触发处理命令请求的函数，可写事件将触发发送响应的函数。</li></ul></li><li><strong>执行事件处理函数：</strong><ul><li>事件处理函数执行相应的逻辑，例如处理命令请求、发送响应等。由于采用了非阻塞I/O，一个事件处理函数在执行时不会阻塞其他事件的处理。</li></ul></li><li><strong>重复：</strong><ul><li>事件处理器不断重复上述过程，监听、等待、分发、执行，以处理多个套接字上的事件。</li></ul></li></ol><h3 id="优点">优点</h3><ul><li><strong>高并发：</strong> 多路复用使得 Redis 能够在单线程内同时处理大量的客户端连接，提高了并发处理能力。</li><li><strong>低延迟：</strong> 通过非阻塞I/O和事件驱动模型，Redis可以实现低延迟的请求处理。</li><li><strong>资源效率：</strong> 单线程的事件处理模型减少了线程切换的开销，提高了资源利用率。</li></ul><h2 id="pipeline（Redis管道）">pipeline（Redis管道）</h2><p>Redis的管道（Pipeline）机制是一种优化技术，用于在客户端与服务器之间批量执行多个命令。通过管道机制，可以减少往返时间，提高性能，尤其是在需要执行大量命令时。<br>基本原理如下：</p><ol><li><strong>批量发送命令：</strong> 客户端可以将多个命令一次性发送给服务器，而不是分开发送。</li><li><strong>一次性获取回复：</strong> 服务器接收到命令后，不会立即执行，而是将命令缓存起来。然后一次性执行所有命令，并将结果按照命令发送的顺序一次性返回给客户端。<br>使用管道机制的好处有：</li></ol><ul><li><strong>减少网络往返时间：</strong> 因为所有命令都在一次通信中完成，而不是多次单独通信。</li><li><strong>提高吞吐量：</strong> 在需要执行大量命令时，通过批量操作可以显著提高性能。<br>创建管道—&gt;向管道中添加命令—&gt;执行命令并获取结果executePipelined</li></ul><h1>总结</h1><p>redis高性能的原因：</p><ol><li>基于内存，计算速度快，减少了对磁盘的频繁读写操作，高速读写</li><li>C语言编写，优化的数据结构</li><li>非阻塞IO模型（多路复用），高效简单的协议</li><li>支持分布式架构扩展，搭建高可用集群</li></ol>]]></content>
    
    
    <summary type="html">redis</summary>
    
    
    
    <category term="redis" scheme="https://xlxq.fun/categories/redis/"/>
    
    
    <category term="redis" scheme="https://xlxq.fun/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="https://xlxq.fun/posts/fe29e710.html"/>
    <id>https://xlxq.fun/posts/fe29e710.html</id>
    <published>2023-10-18T10:19:03.000Z</published>
    <updated>2023-10-23T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Redis（Remote Dictionary Server），即远程字典服务 !<br>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API；redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步</p><h1>NoSQL</h1><img src="/post-img/Pasted image 20230922151933.png" alt="图片损坏" style="zoom:100%;" /><h1>redis特征</h1><p>键值（ key-value）型,value支持多种不同数据结构，功能丰富<br>单线程，<strong>每个命令具备原子性</strong>，在网络请求处理方面可以实现多线程<br>低延迟，速度快（<strong>基于内存</strong>、IO多路复用、良好的编码）<br>支持数据持久化<br>支持主从集群、分片集群<br>支持多语言客户端</p><h1>redis通用命令</h1><h2 id="help【command】">help【command】</h2><p>查看一个命令的具体用法</p><h2 id="KEYS-pattern">KEYS pattern</h2><p>查看符合模板的所有key<br>其中模板指的是redis自身的一些定义，相当于模糊匹配<br><img src="/post-img/Pasted image 20230922160409.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="DEL">DEL</h2><p>删除一个指定的key</p><h2 id="EXISTS">EXISTS</h2><p>判断key是否存在</p><h2 id="EXPIRE">EXPIRE</h2><p>给一个key设置有效期，有效期到期时该key会被自动删除</p><h2 id="TTL">TTL</h2><p>查看一个key的剩余有效期</p><h1>key的层级格式</h1><p>Redis没有类似MySQL中的Table的概念，s使用key的分层级形式来区分不同类型的key<br><img src="/post-img/Pasted image 20230922160953.png" alt="图片损坏" style="zoom:100%;" /></p><h1>redis的数据结构</h1><p>redis是键值对型数据库，其键一般是字符串，而值的类型多种多样，以下是一些常见的值的类型的介绍</p><h2 id="string">string</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。<br>其value是字符串，不过根据字符串的格式不同，又可以分为3类:<br>string:普通字符串<br>int:整数类型，可以做自增、自减操作<br>float:浮点类型，可以做自增、自减操作<br>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.<br><img src="/post-img/Pasted image 20230922160736.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="hash">hash</h2><img src="/post-img/Pasted image 20230922161203.png" alt="图片损坏" style="zoom:100%;" /><img src="/post-img/Pasted image 20230922161224.png" alt="图片损坏" style="zoom:100%;" /><h2 id="list">list</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。<br>既可以支持正向检索和也可以支持反向检索。<br>特征也与LinkedList类似：<br>有序；元素可以重复；插入和删除快；查询速度一般<br><img src="/post-img/Pasted image 20230922161424.png" alt="图片损坏" style="zoom:100%;" /><br>可以用list来模拟栈，队列，阻塞队列等数据结构<br>入口和出口在同一边----&gt;栈<br>入口和出口在不同边----&gt;队列<br>入口和出口在不同边，出队时采用BLPOP或BRPOP----&gt;阻塞队列</p><h2 id="set">set</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。<br>因为也是一个hash表，因此具备与HashSet类似的特征：<br>无序；元素不可重复；查找快；支持交集、并集、差集等功能<br><img src="/post-img/Pasted image 20230922161828.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="sortedset">sortedset</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。<br>SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个<br>跳表（SkipList）加 hash表。<br>SortedSet具备下列特性:<br>可排序；元素不重复；查询速度快<br>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。<br><img src="/post-img/Pasted image 20230922164154.png" alt="图片损坏" style="zoom:100%;" /></p><h1>redis的java客户端</h1><p>jedis：以Redis命令作为方法名称。学习成本低,简单实用。但是Jedis实例是线程不安全的,多线程环境卞需要基于连接池来使用<br>lettuce：是基于Netty实现的,支持同步、异步和响应式编程方式，并且是线程家全的。支持Redis的哨兵模式、集群模式和管道模式。</p><h2 id="jedis快速入门">jedis快速入门</h2><p>官网：[<a href="https://github.com/redis/jedis">https://github.com/redis/jedis</a>]<br>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">grouprd</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">grouprd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.建立连接<br><img src="/post-img/Pasted image 20230922164616.png" alt="图片损坏" style="zoom:100%;" /><br>3.测试string<br><img src="/post-img/Pasted image 20230922164635.png" alt="图片损坏" style="zoom:100%;" /><br>4.释放资源<br><img src="/post-img/Pasted image 20230922164647.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="jedis连接池">jedis连接池</h2><p>jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗<br>因此使用jedis连接池代替jedis的直连方式<br><img src="/post-img/Pasted image 20230922164951.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="SpringDataRedis">SpringDataRedis</h2><p>springdata是spring中数据操作的模块，包含对各种数据的集成，其中对redis的集成模块就是SpringDataRedis，官网:[https:/lsprina.io/proiects/spring-data-redis]<br>它提供了如下功能和便利：<br>1.提供了对不同Redis客户端的整合（Lettuce和Jedis）<br>2.提供了RedisTemplate统一API来操作Redis<br>3.支持Redis的发布订阅模型<br>4.支持Redis哨兵和Redis集群<br>5.支持基于Lettuce的响应式编程<br>6.支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化<br>7.支持基于Redis的JDKCollection实现</p><h3 id="快速入门">快速入门</h3><p>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupid</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接池依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupid</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line"><span class="attr">lettuce:</span></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line"><span class="attr">max-active:</span> <span class="number">8</span><span class="comment">#最大连接</span></span><br><span class="line"><span class="attr">max-idle:</span> <span class="number">8</span><span class="comment">#晟大空闲连接</span></span><br><span class="line"><span class="attr">min-idle:</span> <span class="number">0</span><span class="comment">#最小空闲连接</span></span><br><span class="line"><span class="attr">max-wait:</span> <span class="number">100</span> <span class="comment">#连接等待时间</span></span><br></pre></td></tr></table></figure><p>3.注入RedisTemplate</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate</span><br></pre></td></tr></table></figure><p>4.编写测试<br><img src="/post-img/Pasted image 20230922165941.png" alt="图片损坏" style="zoom:100%;" /><br>如果要操作其它数据类型，可以参照下表以及redis中各数据类型的命令（jedis中的方法名与命令名相同），用下表的对应类调用对应方法<br><img src="/post-img/Pasted image 20230922165439.png" alt="图片损坏" style="zoom:100%;" /></p><h3 id="序列化方式">序列化方式</h3><p>RedisTemplate可以接受任意Object作为值写入redis，但是写入前会把Object序列化为字节形式，默认是采用JDK序列化，这样做使得值的可读性差，并且内存占用较大，为了解决这个问题，有两种方式<br><strong>自定义RedisTemplate的序列化方式</strong><br><img src="/post-img/Pasted image 20230922170235.png" alt="图片损坏" style="zoom:100%;" /></p><p>以上是采用jackson序列化的示例，注意需要引入jackson依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>尽管它能改善可读性差的问题，但是为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。<br><strong>使用Spring提供的一个StringRedisTemplate类</strong><br>为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，它要求只能存储String类型的key和value。当需要存储Java对象时，我们需要<strong>手动完成</strong>对象的序列化和反序列化。<br>StringRedisTemplate的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程<br><img src="/post-img/Pasted image 20230922170840.png" alt="图片损坏" style="zoom:100%;" /><br><img src="/post-img/Pasted image 20230922171119.png" alt="图片损坏" style="zoom:100%;" /></p><h1>事务和乐观锁</h1><h2 id="事务">事务</h2><p>1.原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的操作要么都做，要么都不做。<br>2.一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。<br>3.隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。<br>4.持久性（durability）。持久性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。<br>在Redis事务没有隔离级别的概念！<br>在Redis单条命令是保证原子性的，但是事务不保证原子性！</p><h2 id="乐观锁">乐观锁</h2><p>1.当程序中可能出现并发的情况时，就需要保证在并发情况下数据的准确性，以此确保当前用户和其他用户一起操作时，所得到的结果和他单独操作时的结果是一样的。<br>2.没有做好并发控制，就可能导致脏读、幻读和不可重复读等问题。<br>在Redis是可以实现乐观锁的！</p><h2 id="事务的实现">事务的实现</h2><p>一、Redis如何实现事务？<br>1.正常执行事务<br><img src="/post-img/Pasted image 20230930154014.png" alt="图片损坏" style="zoom:100%;" /><br>2.放弃事务<br><img src="/post-img/Pasted image 20230930154026.png" alt="图片损坏" style="zoom:100%;" /><br>3.编译时异常，代码有问题，或者命令有问题，所有的命令都不会被执行<br><img src="/post-img/Pasted image 20230930154041.png" alt="图片损坏" style="zoom:100%;" /><br>4.运行时异常，除了语法错误不会被执行且抛出异常后，其他的正确命令可以正常执行<br><img src="/post-img/Pasted image 20230930154059.png" alt="图片损坏" style="zoom:100%;" /><br>5.总结：由以上可以得出结论，Redis是支持单条命令事务的，但是事务并不能保证原子性！</p><h2 id="乐观锁的实现">乐观锁的实现</h2><p>1.watch（监视）<br><img src="/post-img/Pasted image 20230930154234.png" alt="图片损坏" style="zoom:100%;" /><br>2.多线程测试watch<br><img src="/post-img/Pasted image 20230930154302.png" alt="图片损坏" style="zoom:100%;" /><br><img src="/post-img/Pasted image 20230930154313.png" alt="图片损坏" style="zoom:100%;" /><br>3.总结：乐观锁和悲观锁的区别：<br>悲观锁： 什么时候都会出问题，所以一直监视着，没有执行当前步骤完成前，不让任何线程执行，十分浪费性能！一般不使用！<br>乐观锁： 只有更新数据的时候去判断一下，在此期间是否有人修改过被监视的这个数据，没有的话正常执行事务，反之执行失败！</p><h1>持久化</h1><p>Redis 是<strong>内存数据库</strong>，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了<strong>持久化功能</strong> !</p><h2 id="RDB（Redis-DataBase）">RDB（Redis DataBase）</h2><p>RDB持久化是Redis的一种快照持久化方式，它可以将内存中的数据周期性地保存到磁盘上的一个二进制文件中。这个文件包含了某个时间点上的所有数据，以及服务器的状态信息。RDB持久化的主要特点和步骤如下：</p><ol><li><strong>快照生成</strong>：Redis会定期生成一个快照文件，保存当前数据和服务器状态。你可以通过配置Redis的<code>save</code>指令来指定生成快照的条件，比如多少秒内至少有多少个写操作。</li><li><strong>生成快照文件</strong>：生成快照文件时，Redis会 fork 一个子进程来执行实际的快照生成操作，而父进程则继续响应客户端请求。这样可以确保持久化操作不会阻塞Redis的正常服务。</li><li><strong>保存到磁盘</strong>：生成的快照文件会被保存到磁盘上的一个文件中。</li><li><strong>加载快照</strong>：当Redis服务器启动时，它会检查是否存在RDB快照文件，如果存在，就会加载该文件并将数据还原到内存中。</li></ol><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。<br>这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置！在生产环境我们会将这个文件进行备份！</p><h3 id="快照生成机制（生成dump-rdb文件）">快照生成机制（生成dump.rdb文件）</h3><p>1.在redis的配置文件中修改对应区域可以指定快照生成的条件，满足条件生成快照<br><img src="/post-img/Pasted image 20230930155617.png" alt="图片损坏" style="zoom:100%;" /><br><img src="/post-img/Pasted image 20230930155652.png" alt="图片损坏" style="zoom:100%;" /><br>2.执行flushall命令，也会触发rdb规则<br>3.退出Redis，也会触发rdb规则<br>4.手动执行save命令生成快照文件</p><h3 id="恢复快照文件">恢复快照文件</h3><p>一般redis每次重启时会自动加载快照文件，实现持久化<br>1、只需将备份的rdb文件放在我们的redis启动目录即可，Redis启动的时候会自动检查dump.rdb文件并恢复其中的数据！<br>2、查找文件位置的命令：</p><h3 id="优缺点">优缺点</h3><p>优点：<br>1、适合大规模的数据恢复！<br>2、对数据的完整性要求不高！<br>3、性能高：生成快照时使用了子进程，不会影响正常的读写操作<br>4、生成的快照文件紧凑，适用于备份和恢复<br>缺点：<br>1、需要一定的时间间隔进程操作！如果redis意外宕机了，这个最后一次修改数据就没有的了！<br>2、fork进程的时候，会占用一定的内容空间！<br>3、不适用于实时数据备份：生成快照的频率较低，不适用于要求实时数据备份的场景。</p><h2 id="AOF（Append-Only-File）">AOF（Append Only File）</h2><p>Redis默认使用的是RDB模式，所以需要手动开启AOF模式，在配置文件中将下图中的no改为yes<br><img src="/post-img/Pasted image 20230930160809.png" alt="图片损坏" style="zoom:100%;" /><br>开启AOF模式后，redis会自动保存从这次启动redis服务器以来操作的命令，并记录到appendonly.aof文件中，从Redis 2.0版本开始，AOF持久化就已经是默认启用的持久化方式。</p><h3 id="appendonly-aof错误修复">appendonly.aof错误修复</h3><p>由于appendonly.aof文件是可读写的，因此有可能产生错误或遭到破坏，可以通过以下方法修复</p><ol><li><strong>备份原始AOF文件</strong>：首先，确保在尝试恢复之前备份原始的<code>appendonly.aof</code>文件。这可以帮助你在恢复过程中避免进一步的数据损坏。</li><li><strong>检查文件完整性</strong>：使用文本编辑器打开<code>appendonly.aof</code>文件，并检查文件是否完整和有效。有时，AOF文件可能会因某种原因损坏，导致无法正常解析其中的命令。如果文件完全无法打开或损坏严重，可能需要查看备份或考虑其他数据恢复方式。</li><li><strong>手动编辑文件</strong>：如果文件中只有一小部分数据受损，可以尝试手动编辑文件，修复损坏的部分。这可能需要一些Redis命令和AOF文件格式的了解。务必小心操作，以免进一步破坏文件。</li><li><strong>使用Redis-check-aof工具</strong>：Redis提供了一个名为<code>redis-check-aof</code>的工具，可以用于检查AOF文件的有效性并尝试修复其中的问题。可以通过以下命令来使用它：<code>redis-check-aof --fix &lt;AOF文件路径&gt;</code><br>该命令将尝试修复AOF文件中的问题，并在修复完成后生成一个修复后的文件（通常带有<code>.fixed</code>扩展名）。可以将修复后的文件重命名为<code>appendonly.aof</code>并替换原始文件。<br>注意虽然错误的内容少了，但是正确的也有一定的丢失！所以这个修复无法做到百分百修复！</li><li><strong>重新加载AOF文件</strong>：如果成功修复了AOF文件或者恢复了损坏的部分，可以重新启动Redis服务器以加载AOF文件中的命令并还原数据。</li></ol><h3 id="设置appendonly-aof文件大小">设置appendonly.aof文件大小</h3><p>aof默认的就是文件的无限追加，文件会越来越大！在配置文件中可以设置文件的大小！<br><img src="/post-img/Pasted image 20230930161737.png" alt="图片损坏" style="zoom:100%;" /></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span>-aof-rewrite-percentage <span class="number">100</span> #写入百分比 </span><br><span class="line"><span class="keyword">auto</span>-aof-rewrite-min-size <span class="number">64</span>mb #写入的文件最大值是多少，一般在实际工作中我们会将其设置为<span class="number">5</span>gb左右！</span><br></pre></td></tr></table></figure><h3 id="优缺点-2">优缺点</h3><p>优点：</p><ol><li><strong>可读性和透明性</strong>：AOF文件是一个可读性的文本文件，它记录了每个写操作的命令。这使得AOF文件易于查看和理解，有助于调试和分析。</li><li><strong>实时备份</strong>：AOF模式以追加的方式记录每个写操作，这意味着数据变化会立即被记录到AOF文件中。这使得AOF模式适用于实时数据备份需求。每一次修改都同步，文件的完整性会更加好</li><li><strong>可靠性</strong>：AOF文件采用了追加写入方式，相对于RDB持久化，更不容易损坏。即使在写入过程中发生意外宕机，已经写入的数据不会丢失。每秒同步一次，最多会丢失一秒的数据</li><li><strong>重写机制</strong>：Redis提供了AOF文件的重写机制，允许定期对AOF文件进行重新压缩和优化。这可以控制AOF文件的大小，避免无限增长。</li><li><strong>数据恢复</strong>：AOF文件记录了写操作的历史，因此可以用于恢复数据。在Redis服务器启动时，AOF文件中的命令将会重新执行，还原数据。<br>缺点：</li><li><strong>文件大小</strong>：AOF文件通常会随着时间的推移逐渐增大，特别是在高写入负载下。较大的AOF文件可能占用大量磁盘空间，因此需要定期进行AOF文件的重写和优化。</li><li><strong>写入性能</strong>：相对于RDB持久化，AOF持久化在高写入负载下可能会稍微降低性能，因为每个写操作都要追加到AOF文件中。</li><li><strong>文件恢复时间</strong>：如果AOF文件过大，Redis服务器在启动时加载AOF文件的时间可能会较长，因为需要重新执行大量写操作。</li><li><strong>数据丢失风险</strong>：虽然AOF文件相对可靠，但在某些极端情况下，可能会出现数据丢失。例如，如果AOF文件在写入期间发生了损坏，那么写入的数据可能会丢失。</li></ol><h2 id="两种方式对比和总结">两种方式对比和总结</h2><p>1、RDB 持久化方式能够在指定的时间间隔内对数据进行快照存储<br>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。<br>3、只做缓存，如果只希望数据在服务器运行的时候存在，也可以不使用任何持久化<br>4、同时开启两种持久化方式时，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。<br>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，但建议不要只使用AOF，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。<br>5.一般情况下无脑两种一起用，此外<br><strong>使用AOF持久化的情况</strong>：</p><ol><li><strong>实时备份需求</strong>：如果你需要实时备份数据以确保数据不会丢失，AOF持久化是更好的选择。AOF以追加方式记录每个写操作，确保数据变更会立即记录到AOF文件中。</li><li><strong>可读性和调试需求</strong>：AOF文件是可读性的文本文件，易于查看和理解其中的命令。这对于调试和分析非常有用。</li><li><strong>数据恢复要求</strong>：AOF文件记录了写操作的历史，因此可以用于数据恢复。在Redis服务器启动时，AOF文件中的命令将会重新执行，还原数据。</li><li><strong>数据一致性要求高</strong>：AOF模式相对可靠，即使在写入过程中发生宕机，已经写入的数据不会丢失，因此适用于要求数据一致性高的场景。<br><strong>使用RDB持久化的情况</strong>：</li><li><strong>周期性备份需求</strong>：如果你只需要定期备份数据，而不需要实时备份，RDB持久化是一种有效的选择。RDB生成全量快照，适用于周期性的备份操作。</li><li><strong>磁盘空间有限</strong>：RDB文件通常比较小，适用于磁盘空间有限的情况。如果你的磁盘空间有限，可以考虑使用RDB持久化。</li><li><strong>启动速度要求</strong>：在Redis服务器启动时，加载RDB文件比加载大型AOF文件更快。如果需要快速启动，可以选择RDB持久化。</li><li><strong>性能优化</strong>：在某些高性能场景下，RDB持久化可能会比AOF持久化更适合，因为RDB生成快照的性能开销较小。</li></ol><h2 id="性能建议">性能建议</h2><p>1.因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。<br>2.如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率<br>AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。<br>3.如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</p><h1>发布订阅</h1><p>Redis发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接受消息。<br><img src="/post-img/Pasted image 20230930174823.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="实现">实现</h2><p>订阅端<br><img src="/post-img/Pasted image 20230930174926.png" alt="图片损坏" style="zoom:100%;" /><br>发送端<br><img src="/post-img/Pasted image 20230930174936.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="常用命令">常用命令</h2><p><strong>发布消息到指定频道</strong>：<br><strong>PUBLISH</strong>：将消息发布到指定的频道。<br><code>PUBLISH channel message</code><br>- <code>channel</code>：指定要发布消息的频道名称。<br>- <code>message</code>：要发布的消息内容。<br><strong>订阅频道</strong>：</p><ol><li><strong>SUBSCRIBE</strong>：订阅一个或多个频道。<br><code>SUBSCRIBE channel [channel ...]</code><ul><li><code>channel</code>：一个或多个频道名称，可以同时订阅多个频道。</li></ul></li><li><strong>PSUBSCRIBE</strong>：通过正则表达式订阅匹配的频道。<br><code>PSUBSCRIBE pattern [pattern ...]</code><ul><li><code>pattern</code>：一个或多个正则表达式，用于匹配多个频道名称。<br><strong>取消订阅频道</strong>：</li></ul></li><li><strong>UNSUBSCRIBE</strong>：取消订阅一个或多个频道。<br><code>UNSUBSCRIBE [channel [channel ...&quot; alt=&quot;图片损坏&quot; style=&quot;zoom:100%;&quot; /&gt;</code><ul><li><code>channel</code>：要取消订阅的频道名称，如果未提供任何频道名称，则取消所有频道的订阅。</li></ul></li><li><strong>PUNSUBSCRIBE</strong>：通过正则表达式取消订阅匹配的频道。<br><code>PUNSUBSCRIBE [pattern [pattern ...&quot; alt=&quot;图片损坏&quot; style=&quot;zoom:100%;&quot; /&gt;</code><ul><li><code>pattern</code>：要取消订阅的正则表达式，如果未提供任何正则表达式，则取消所有匹配的频道的订阅。<br><strong>查看订阅频道</strong>：</li></ul></li><li><strong>SUBSCRIBE</strong> 和 <strong>PSUBSCRIBE</strong> 命令会返回关于订阅状态的信息。你可以使用以下命令来查看当前订阅的频道和模式：<ul><li><code>PUBSUB CHANNELS</code>：列出当前活动的频道。</li><li><code>PUBSUB NUMSUB channel [channel ...]</code>：获取指定频道的订阅者数量。</li><li><code>PUBSUB NUMPAT</code>：获取匹配的模式数量。</li></ul></li></ol><h1>主从复制</h1><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave 以读为主。<br>主要作用：<br>1.数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。<br>2.故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。<br>3.负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。<br>4.高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</p><h2 id="环境配置（单机集群）">环境配置（单机集群）</h2><p>1.基本查看命令info replication<br><img src="/post-img/Pasted image 20230930175500.png" alt="图片损坏" style="zoom:100%;" /><br>2.例开启三台服务<br><img src="/post-img/Pasted image 20230930175635.png" alt="图片损坏" style="zoom:100%;" /><br>3.全部启动并查看<br><img src="/post-img/Pasted image 20230930175658.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="单机测试（一主二从）">单机测试（一主二从）</h2><p>1.任命一台服务器为主节点，其它服务器为从节点slaveof  IP port<br><img src="/post-img/Pasted image 20230930175810.png" alt="图片损坏" style="zoom:100%;" /><br>2.从主节点处查看信息info replication<br><img src="/post-img/Pasted image 20230930175847.png" alt="图片损坏" style="zoom:100%;" /><br>3.以上的配置是一次性的，如果断电、宕机等，就要重新任命<br>可以通过修改配置文件来实现永久配置<br><img src="/post-img/Pasted image 20230930180117.png" alt="图片损坏" style="zoom:100%;" /><br>4.测试读写操作<br>主机写，从机可读<br>主机死，从机可读<br>主机复活，从机自动寻找主机（配置文件配置时）<br>从机死，不可重连（命令配置时）<br>从机只能读，不能写</p><h2 id="原理">原理</h2><p>Slave 启动成功连接到 master 后会发送一个sync同步命令<br>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p><p>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。<br>增量复制： Master 继续将新的所有收集到的修改命令依次传给slave，完成同步但是只要是重新连接master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中看到</p><h2 id="从机的从机">从机的从机</h2><p>层层链路<br><img src="/post-img/Pasted image 20230930180522.png" alt="图片损坏" style="zoom:100%;" /><br>从机可以有自己的从机（主从机的概念是相对的）</p><h2 id="主机转移（谋朝篡位）">主机转移（谋朝篡位）</h2><p>使用<code>SLAVEOF no one</code>让自己变成主机！其他的节点就可以手动连接到最新的这个主节点（手动）<br>如果主机复活，重新成为从机</p><h2 id="小结">小结</h2><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机），原因如下：<br>1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；<br>2、从容量上，单个Redis服务器内存容量有限，就算一Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该20G。<br>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主二从！<br>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用Redis！</p><h1>哨兵模式</h1><p>是对主从复制的补充<br>主机断开后，我们得手动设置另一个从机变成主机！这是不智能的！在实际工作中，我们都是用哨兵模式来自动切换主机。Redis从2.8开始正式提供了Sentinel（哨兵） 架构，后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。<br>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的 <strong>进程</strong> ，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p><h2 id="配置哨兵">配置哨兵</h2><p>1.添加哨兵配置文件sentinel.conf<br>内容如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor 被监控的名称 host port 1 （代表自动投票选举大哥！）</span></span><br><span class="line">sentinel<span class="built_in"> monitor </span>myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>2.启动哨兵</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel sentinel配置文件路径   <span class="meta">#和启动Redis一致</span></span><br></pre></td></tr></table></figure><p>3.准备测试环境（一主二从三台服务器）<br>4.测试主机宕机后自动选取大哥，如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则！等待哨兵的默认配置时间时是30 秒！</p><h2 id="优缺点-3">优缺点</h2><p>优点<br>1.哨兵集群基于主从复制模式 ，所有的主从配置优点，它全有<br>2.主从可以切换，故障可以转移 ，系统的 可用性 就会更好<br>3.哨兵模式就是主从模式的升级，手动到自动，更加健壮<br>缺点<br>1.Redis 不好在线扩容 的，集群容量一旦到达上限，在线扩容就十分麻烦！<br>2.实现哨兵模式的配置其实是很 麻烦 的，里面有很多选择！<br>注意<br>以上所有的配置因为条件所限都是基于单机集群的前提下！正式集群下的多哨兵模式如下图：<br><img src="/post-img/Pasted image 20230930181510.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="哨兵的配置文件解析">哨兵的配置文件解析</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># Example sentinel.conf </span><br><span class="line"></span><br><span class="line"># 哨兵sentinel实例运行的端口 默认<span class="number">26379</span> </span><br><span class="line">port <span class="number">26379</span> </span><br><span class="line"></span><br><span class="line"># 哨兵sentinel的工作目录 </span><br><span class="line">dir /tmp </span><br><span class="line"></span><br><span class="line"># 哨兵sentinel监控的redis主节点的 ip port </span><br><span class="line"># master-name 可以自己命名的主节点名字 只能由字母A-z、数字<span class="number">0</span><span class="number">-9</span> 、这三个字符<span class="string">&quot;.-_&quot;</span>组成。 </span><br><span class="line"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了 </span><br><span class="line"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt; sentinel monitor mymaster <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span> <span class="number">2</span> </span><br><span class="line"></span><br><span class="line"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供 密码</span><br><span class="line"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码 </span><br><span class="line"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt; </span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret<span class="number">-0123</span>passw0rd </span><br><span class="line"></span><br><span class="line"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认<span class="number">30</span>秒 </span><br><span class="line"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt; </span><br><span class="line">sentinel down-after-milliseconds mymaster <span class="number">30000</span> </span><br><span class="line"></span><br><span class="line"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步</span><br><span class="line">#这个数字越小，完成failover所需的时间就越长，</span><br><span class="line"># 但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。 </span><br><span class="line">#可以通过将这个值设为 <span class="number">1</span> 来保证每次只有一个slave 处于不能处理命令请求的状态。 </span><br><span class="line"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt; </span><br><span class="line">sentinel parallel-syncs mymaster <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span><br><span class="line">#<span class="number">1.</span> 同一个sentinel对同一个master两次failover之间的间隔时间。 </span><br><span class="line">#<span class="number">2.</span> 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那 里同步数据时。 </span><br><span class="line">#<span class="number">3.</span>当想要取消一个正在进行的failover所需要的时间。 </span><br><span class="line">#<span class="number">4.</span>当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时， slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了 </span><br><span class="line"># 默认三分钟 # sentinel failover-timeout &lt;master-name&gt; </span><br><span class="line">sentinel failover-timeout mymaster <span class="number">180000</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SCRIPTS EXECUTION #配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知 相关人员。 </span><br><span class="line">#对于脚本的运行结果有以下规则： </span><br><span class="line">#若脚本执行后返回<span class="number">1</span>，那么该脚本稍后将会被再次执行，重复次数目前默认为<span class="number">10</span> #若脚本执行后返回<span class="number">2</span>，或者比<span class="number">2</span>更高的一个返回值，脚本将不会重复执行。 </span><br><span class="line">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为<span class="number">1</span>时的行为相同。 </span><br><span class="line">#一个脚本的最大执行时间为<span class="number">60</span>s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。 </span><br><span class="line">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等）， 将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信 息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配 置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无 法正常启动成功。 </span><br><span class="line">#通知脚本 </span><br><span class="line"># shell编程 </span><br><span class="line"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt; </span><br><span class="line">sentinel notification-script mymaster /var/redis/notify.sh </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 客户端重新配置主节点参数脚本 </span><br><span class="line"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已 经发生改变的信息。 </span><br><span class="line"># 以下参数将会在调用脚本时传给脚本: </span><br><span class="line"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;<span class="keyword">from</span>-ip&gt; &lt;<span class="keyword">from</span>-port&gt; &lt;to-ip&gt; &lt;to-port&gt; </span><br><span class="line"># 目前&lt;state&gt;总是“failover”, </span><br><span class="line"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span><br><span class="line"># 参数 <span class="keyword">from</span>-ip, <span class="keyword">from</span>-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通 信的</span><br><span class="line"># 这个脚本应该是通用的，能被多次调用，不是针对性的。 </span><br><span class="line"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt; </span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh </span><br><span class="line"># 一般都是由运维来配置！</span><br></pre></td></tr></table></figure><h1>缓存穿透</h1><p>用户需要查询一个数据，但是redis中没有（比如说mysql中id=-1的数），直接去请求MySQL，当很多用户同时请求并且都没有命中！于是都去请求了持久层的数据库，那么这样会给持久层数据库带来非常大的压力。一般出现这样的情况都不是正常用户，基本上都是恶意用户！<br><strong>缓存穿透前提是：Redis和MySQL中都没有，然后不停的直接请求MySQL。</strong></p><h2 id="解决方案">解决方案</h2><h3 id="布隆过滤器">布隆过滤器</h3><img src="/post-img/Pasted image 20230930181912.png" alt="图片损坏" style="zoom:100%;" />布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则  丢弃，从而避免了对底层存储系统的查询压力；<h3 id="缓冲空对象">缓冲空对象</h3><img src="/post-img/Pasted image 20230930181949.png" alt="图片损坏" style="zoom:100%;" />当存储层查不到，即使是空值，我们也将其存储起来并且在Redis中设置一个过期时间，之后再访问这个数据将会从Redis中访问，保护了持久层的数据库！但是如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多  的空值的键；  即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。<h1>缓存击穿</h1><p>是指一个非常热点的key，在不停的扛着大并发，当这个key失效时，一瞬间大量的请求冲到持久层的数据库中，就像在一堵墙上某个点凿开了一个洞！</p><h2 id="解决方案-2">解决方案</h2><p>1.设置热点key永不过期<br>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。这样做其实并不合理<br>2.加互斥锁<br>在查询持久层数据库时，保证了只有一个线程能够进行持久层数据查询，其他的线程让它睡眠几百毫秒，等待第一个线程查询完会回写到Redis缓存当中，剩下的线程可以正常查询Redis缓存，就不存在大量请求去冲击持久层数据库了！<br><img src="/post-img/Pasted image 20230930182240.png" alt="图片损坏" style="zoom:100%;" /></p><h1>缓存雪崩</h1><p>在某一个时间段，缓存的key大量集中同时过期了，所有的请求全部冲到持久层数据库上，导致持久层数据库挂掉！<br>范例：双十一零点抢购，这波商品比较集中的放在缓存，设置了失效时间为1个小时，那么到了零点，这批缓存全部失效了，而大量的请求过来时，全部冲过了缓存，冲到了持久层数据库！</p><h2 id="解决方案-3">解决方案</h2><h3 id="Redis高可用">Redis高可用</h3><p>搭建Redis集群，既然redis有可能挂掉，那么多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。（异地多活！）</p><h3 id="限流降级">限流降级</h3><p>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><h3 id="数据预热">数据预热</h3><p>数据加热的含义就是在正式部署之前，先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀 。</p>]]></content>
    
    
    <summary type="html">redis</summary>
    
    
    
    <category term="redis" scheme="https://xlxq.fun/categories/redis/"/>
    
    
    <category term="redis" scheme="https://xlxq.fun/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis数据结构</title>
    <link href="https://xlxq.fun/posts/abcb1f8f.html"/>
    <id>https://xlxq.fun/posts/abcb1f8f.html</id>
    <published>2023-10-18T10:19:03.000Z</published>
    <updated>2023-10-20T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常所说的redis常用数据类型string，hash，set，list，sortedSet等<br>其底层都是精心优化过的数据结构，这也是redis拥有高性能的重要原因之一<br>概括的说，redis的底层有六种数据结构，分别是<strong>SDS（简单动态字符串），hashtable（哈希表），skiplist（跳表），ziplist（压缩列表），intset（整数集合），linkedlist（双向链表）</strong><br>本文从常用的五种数据类型入手，依次说明其底层数据结构</p><h1>字典（dict）</h1><p>字典是redis用来存储所有数据（K-V类型）的一种统一结构体，其定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">dictType *type;</span><br><span class="line"><span class="type">void</span> *privdata;</span><br><span class="line">dictht ht[<span class="number">2</span>];</span><br><span class="line"><span class="type">long</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1*/</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> iterators; <span class="comment">/* number of iterators currently running */</span></span><br><span class="line">&#125;dict;</span><br></pre></td></tr></table></figure><ol><li><code>dictType *type;</code>  这是一个指向 <code>dictType</code> 结构体的指针，用于表示字典的类型。<code>dictType</code> 中包含了一系列函数指针，定义了字典的操作方法，例如哈希函数、键比较函数和值释放函数等。通过这个指针，字典可以支持不同类型的键值对。</li><li><code>void *privdata;</code>  这是一个指向私有数据的指针，允许用户为字典提供额外上下文信息。</li><li><code>dictht ht[2];</code>  这是一个<strong>包含两个元素的数组，每个元素都是 <code>dictht</code> 结构体的实例</strong>。<code>dictht</code> 是 Redis 字典的哈希表表示，而数组的两个元素则<strong>用于实现哈希表的 rehash 操作</strong>。在 rehash 过程中，字典会使用两个哈希表，逐步将数据从旧表迁移到新表。</li><li><code>long rehashidx;</code>  这是一个长整型变量，<strong>表示当前 rehash 操作的索引</strong>。如果 <code>rehashidx</code> 的值为 -1，表示没有进行 rehash 操作。否则，它表示正在进行 rehash 操作，指示当前正在迁移旧表的索引位置。</li><li><code>unsigned long iterators;</code>  这是一个无符号长整型变量，表示当前正在运行的迭代器的数量。字典的修改操作可能会受到迭代器的影响，因此需要追踪迭代器的数量，以确保安全的遍历字典。</li></ol><h1>dictht（hashtable）</h1><p>dictht是redis中用来存储实际数据的结构体，其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">dictEntry **table;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> size;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> sizemask ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> used;</span><br><span class="line">&#125;dictht;</span><br></pre></td></tr></table></figure><ol><li><code>dictEntry **table;</code>  这是一个<strong>指向指针数组的指针</strong>，用于表示哈希表的槽位。每个槽位可以包含一个指向 <code>dictEntry</code> 结构体的指针，或者为 <code>NULL</code>，表示该槽位为空。<code>dictEntry</code> 结构体表示哈希表中的一个键值对。<strong>类比hashMap中的数组+链表</strong></li><li><code>unsigned long size;</code>  这是一个无符号长整型变量，表示哈希表的大小，即槽位的数量。它表示哈希表中<strong>可以存储的最大键值对数目</strong></li><li><code>unsigned long sizemask;</code>  这是一个无符号长整型变量，用于快速计算索引位置的掩码。在哈希表的大小为 2 的幂时，通过 <code>sizemask</code> 可以替代取模运算，提高效率。</li><li><code>unsigned long used;</code>  这是一个无符号长整型变量，表示哈希表中当前已经使用的槽位数量，即<strong>已经存储的键值对数目</strong></li></ol><h1>redisObject</h1><p>上面说到redis用dict来存储所有的K-V数据类型，这就像是java中的Map，键固定为String类型，但值可有五种数据类型啊，C语言中又没有类似Object这样的类，于是有了redisObject，其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span>&#123;</span></span><br><span class="line">    <span class="comment">//类型</span></span><br><span class="line">    <span class="type">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    <span class="type">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="comment">//对象最后一次被访问的时间</span></span><br><span class="line">    <span class="type">unsigned</span> lru:REDIS_LRU_BITS</span><br><span class="line">    <span class="comment">//引用计数</span></span><br><span class="line">    <span class="type">int</span> refcount</span><br><span class="line">    <span class="comment">//指向底层实现数据结构的指针</span></span><br><span class="line">    <span class="type">void</span> *ptr;</span><br><span class="line">    ...</span><br><span class="line">&#125; redisObject;</span><br></pre></td></tr></table></figure><ol><li><code>unsigned type:4;</code>  这是一个 4 位的无符号整数，<strong>表示对象的类型</strong>。</li><li><code>unsigned encoding:4;</code>  这是一个 4 位的无符号整数，表示对象的编码方式。Redis 对于不同类型的对象可以使用不同的编码方式，以优化存储和处理性能。以下是一些编码常量：<img src="/post-img/Pasted image 20240216141600.png" alt="图片损坏" style="zoom:100%;" /></li><li><code>unsigned lru:REDIS_LRU_BITS;</code>  这是一个用于 LRU（Least Recently Used）算法的字段，用于记录对象最后一次被访问的时间。</li><li><code>int refcount;</code>  这是一个整数，表示对象的引用计数。引用计数用于追踪对象被引用的次数，确保在没有引用时可以安全地释放对象的内存。</li><li><code>void *ptr;</code>  这是一个指向底层实现数据结构的指针。根据对象的类型和编码方式，<code>ptr</code> 指向实际存储数据的具体结构。例如，对于字符串对象，<code>ptr</code> 可能指向一个包含字符串数据的结构。</li></ol><p><strong>综上我们知道，redis用dict所指向的hashtable结合redisObject已经可以表示五种数据类型，但其实并不是五种数据类型都是通过dict实现的，redis还维护了其它数据结构来优化性能</strong></p><h1>string</h1><h2 id="SDS">SDS</h2><p>string类型的底层是通过SDS实现的，C语言中的字符串是不可变的，使用起来不方便<br>SDS应运而生，它有三个参数：</p><ol><li>len ：保存的字符串长度。获取字符串的长度就是O(1)</li><li>free：剩余可用存储字符串的长度</li><li>buf： 字符串数组，保存字符串<br>通过上述参数，SDS可以实现动态更改字符串的长度，具体实现如下：</li><li><strong>预分配空间：</strong><ul><li>SDS 在分配空间时，会预先分配一定的额外空间，避免每次追加操作都触发内存重新分配。 这个额外空间的大小由 SDS 结构中的free属性表示。</li><li>SDS 的空间分配策略采用了多种方式，根据当前字符串长度和预分配策略动态调整。当字符串长度小于 1MB 时，每次追加操作会分配两倍于所需空间的额外空间。当字符串长度大于等于 1MB 时，每次追加操作只会额外分配1MB的空间。</li></ul></li><li><strong>惰性空间释放：</strong><ul><li>SDS 采用惰性空间释放的策略，即在删除字符串内容时，并不立即释放相应的内存。保留已分配的内存（增大free的值），以备将来再次追加字符串时直接使用，避免频繁的内存分配和释放。</li></ul></li><li><strong>其它特点</strong>：<ul><li>len参数的存在使得获取字符串的长度是O(1)时间复杂度</li><li>上述两种空间分配策略使得SDS能很好的杜绝缓冲区移除和内存泄漏</li><li>SDS可以包含任何数据，最大可存512M，这也是为什么redis的key不能超过512M</li></ul></li></ol><h2 id="int">int</h2><p>对于简单数字或数字字符串，redis会采用int编码，严格意义上并不算是一种数据结构，也就是上述编码变量中的REDIS_ENCODING_INT</p><h1>list</h1><p>list的底层采用的是压缩列表和双向链表</p><h2 id="压缩列表（ziplist）">压缩列表（ziplist）</h2><p>数据量较少时采用<br>具体当list对象同时满足以下两个条件时，使用ziplist<br> 1. list对象保存的所有字符串元素长度都小于64字节<br> 2. list对象保存的元素数量小于512个<br>结构(从前到后依次是)：<br><strong>zlbytes</strong>： 4byte，记录整个压缩列表占用的内存字节数,在对压缩列表内存重分配或计算zlend位置时使用<br><strong>zltail</strong>：4byte，记录最后一个节点离列表起始地址有多少个字节通过这个偏移量，就可以不用遍历整个列表就知道尾节点的位置了<br><strong>zllen</strong>：2byte，记录列表中的节点数,值小于unit16_max(65535)时是准确值，大于时需要遍历<br><strong>entry1…entryN</strong>：列表节点，不定长<br><strong>zlend</strong>：特殊值，标记列表末端<br>在压缩列表中，元素按顺序存储，但不保留插入的顺序信息。每个元素的长度可以是不定长的，这使得压缩列表可以更灵活地存储不同长度的元素。<br>压缩列表也支持快速的头部和尾部插入和删除操作，在某些操作上可能比双向链表更紧凑，特别是在元素较小的情况下。但一般情况下，ziplist的增删改查需要遍历，为O(N)时间复杂度</p><h2 id="双向链表（linkedlist）">双向链表（linkedlist）</h2><p>使用redis的list数据结构时，存储数据较大时，list对象已经不满足上面描述的ziplist条件，则会使用linkedlist，修改效率高，但占用更多内存（存放指针）</p><h2 id="快速列表（quickList）">快速列表（quickList）</h2><p>Quicklist 是对双向链表的进一步优化，将长列表分成多个节点，每个节点都是一个压缩列表。这样，Quicklist 结合了双向链表和压缩列表的优势，提高了对长列表的操作效率。<br>每个 Quicklist 节点都包含压缩列表指针若干和当前节点中元素（所有指针指向的压缩列表中元素总和）的数量</p><h1>hash</h1><p>hash的底层采用的是ziplist 或hashtable，其中ziplist同上，每个列表节点都变为hash类型</p><h2 id="hashtable（dict字典）">hashtable（dict字典）</h2><p><strong>哈希表是字典的一种实现方式，而字典是键值对存储的通用概念</strong><br>字典是哈希类型的一种底层数据结构，它使用哈希表（数组）来存储键值对。哈希表通过哈希函数计算键的索引，将键值对存储在相应的槽（bucket）中。字典的主要特点包括：</p><ul><li><strong>O(1) 时间复杂度的查找、插入和删除操作</strong>：由于哈希表的设计，它提供了快速的键值对查找、插入和删除操作。</li><li><strong>动态扩展和收缩</strong>：字典会根据实际元素数量动态调整哈希表的大小，以平衡内存占用和性能。</li></ul><h3 id="详细说明">详细说明</h3><ol><li><strong>结构（hash表）:</strong><ul><li>Redis 字典的底层数据结构是哈希表，它是一个数组，每个数组元素称为<strong>桶</strong>（bucket）。这个数组的大小是可动态调整的，根据实际存储的键值对数量动态分配。每个桶中又可以存储一个或多个键值对。哈希表使用哈希函数将键映射到数组的特定位置，即桶的索引。</li></ul></li><li><strong>链地址法解决冲突:</strong><ul><li>在哈希表中，可能会出现多个键经过哈希函数后映射到同一个桶的情况，这被称为哈希冲突。Redis 使用链地址法（Separate Chaining）来解决冲突，即在每个桶中维护一个链表，将映射到同一个桶的键值对串在链表上。</li></ul></li><li><strong>O(1) 操作:</strong><ul><li>查找操作：通过哈希函数计算键的哈希值，定位到对应的桶，然后在链表中查找对应的键值对。由于链表长度相对较短，查找时间是常数级别的，即 O(1)。</li><li>插入操作：同样通过哈希函数计算哈希值，定位到对应的桶，然后在链表中插入新的键值对。由于链表操作是常数时间，插入操作也是 O(1)。</li><li>删除操作：通过哈希函数计算哈希值，定位到对应的桶，然后在链表中删除对应的键值对。链表删除操作也是常数时间，所以删除操作是 O(1)。<br>由于哈希表的设计，使得<strong>查找、插入和删除等操作具有常数级别的时间复杂度</strong>，即 O(1)。然而，需要注意的是，在极端情况下，如果哈希冲突过于频繁，导致链表变得很长，性能可能会下降，但平均情况下哈希表提供了高效的字典操作。</li></ul></li></ol><h3 id="hash表的扩展和收缩">hash表的扩展和收缩</h3><ol><li>当哈希表中元素数量达到一定阈值，为了避免哈希冲突过于频繁，Redis 会触发哈希表的<strong>扩展操作</strong>：新建一个更大的哈希表（通常是当前大小的两倍），然后将旧哈希表中的元素重新分布到新哈希表中。由于哈希表扩展是一个耗时的操作，为了不阻塞其他操作，Redis 使用了<strong>渐进式扩展</strong>的策略。这意味着 rehash 操作不会一次性完成，而是分多次逐步完成。在每个事件循环中，只处理一小部分键值对的 rehash 操作。这样可以分摊 rehash对 CPU 和内存的影响，使得系统在扩展时仍能保持响应。</li><li>当哈希表中的元素数量下降到一定程度，为了节省内存，Redis 可以触发哈希表的<strong>收缩操作</strong>：新建一个更小的哈希表，将旧哈希表中的元素重新分布到新哈希表中。与扩展类似，收缩操作也是一个耗时的操作，为了不阻塞其他操作，可以采用<strong>渐进式收缩</strong>的策略。Redis 使用两个哈希表，旧哈希表和新哈希表。在rehash过程中，会逐步将旧哈希表的元素迁移到新哈希表，同时保持两个表中的元素共存。在每个事件循环中，只迁移一小部分元素，减少对系统性能的影响。</li><li>扩展和收缩用到了dict中定义的两个变量ht[2]和rehashidx，ht[2]保存了两个hashtable，通常情况下，只会用到其中一个，当需要扩容时，另一个hashtable会申请一个较大的空间，每次CRUD操作中，rehashidx都会自增，将指向的元素迁移（如果一直没有指向元素，自增10次就会停止），这就是<strong>渐进式哈希</strong>。</li></ol><h1>set</h1><p>set底层使用的是intset 或hashtable</p><h2 id="intset">intset</h2><ol><li>结构：length（元素数量）记录了 intset中元素的数量。contents（元素数组）实际存储整数，元素按照从小到大的顺序存储。</li><li>特点：<ul><li>intset设计紧凑，对于小型整数集合可以减小内存开销。</li><li>元素按照从小到大的顺序存储，这使得在整数集合上执行范围查询等操作更加高效。</li><li>通过二分查找，<code>intset</code> 可以在 O(log N) 的时间内完成查找操作。插入操作也可以在 O(N) 的时间内完成，因为可能需要进行数组的移动和扩容。</li><li>适用于小型整数集合，当整数集合较大时，intset的性能可能不如其他数据结构</li></ul></li><li>补充：<ul><li>节约内存，但由于是连续空间，修改效率不高</li><li>集合中的数都是整数时，且数据量不超过512个时，使用intset，set默认使用hashtable</li></ul></li></ol><h1>sortedSet</h1><p>底层是由ziplist 或 skiplist 实现的<br>有序集合是有序的集合数据结构，每个元素都与一个分数（score）相关联，通过分数进行排序。有序集合中的元素也可以是各种类型，不仅限于整数。分数可以是整数或浮点数。</p><h2 id="skiplist">skiplist</h2><h3 id="结构">结构</h3><ol><li>节点结构：<br>每个节点包含了两个主要部分以及指针：<ul><li>成员（Member）：存储有序集合中的元素（例如字符串）。</li><li>分值（Score）：与成员相关联的分值，用于排序。分值可以是整数或浮点数。</li><li>指针：用于在不同层级上进行快速查找。</li></ul></li><li>多层级结构：<ul><li>skiplist由很多层结构组成，每一层都是一个有序的链表，默认是升序，也可以根据创建映射时所提供的Comparator进行排序，具体取决于使用的构造方法</li><li>最底层(Level 1)的链表包含所有元素，如果一个元素出现在Level i 的链表中，则它在Level i 之下的链表也都会出现。例如，出现在level 3中，则会出现在level 2和level 1中。后续插入新的节点时，会<strong>随机选取插入的层级</strong>，这也影响到该层级之下的所有层级中是否需要插入该节点</li><li>每个节点包含两个指针，一个指向同一链表中的下一个元素，一个指向下面一层的元素</li></ul></li><li>多级索引：<ul><li>为了提高查找效率，Skiplist包含了多级索引，每一级索引都是元素的子集。这些索引允许在不必遍历所有节点的情况下，通过跳过一些节点来快速找到目标节点。查询时，如果在当前层级找到了大于等于目标元素的位置，就可以下降到下一层级，继续查找，可以在 O(log N) 的时间内完成查询操作</li></ul></li><li>虚拟头节点：<ul><li>Skiplist中通常包含一个虚拟头节点，它不存储实际数据，但有助于简化代码逻辑，使得实现更加简洁。</li></ul></li></ol><h3 id="特点">特点</h3><ul><li>层次结构：skiplis 使用多层级的链表，每一层都是元素的子集。这种层次结构使得在有序集合中进行范围查询更加高效。</li><li>快速查询：skiplist具有 O(log N) 时间复杂度的查询操作，这使得查找某个成员或某个分值范围的成员非常高效。</li><li>元素存储：每个节点包含了一个成员和分值，同时具有多个指针，用于在不同层级上进行快速查找。</li><li>适用范围：适用于较大有序集合，对于元素数量较多或者需要频繁进行范围查询的情况。</li></ul><h1>总结</h1><p>string底层的数据结构：SDS，int<br>list底层的数据结构：ziplist、linkedlist、quicklist<br>hash底层的数据结构：ziplist、hashtable（dict）<br>set底层的数据结构：intset、hashtable（dict）<br>sortedSet底层的数据结构：ziplist、skiplist</p>]]></content>
    
    
    <summary type="html">redis</summary>
    
    
    
    <category term="redis" scheme="https://xlxq.fun/categories/redis/"/>
    
    
    <category term="redis" scheme="https://xlxq.fun/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://xlxq.fun/posts/f1601c3e.html"/>
    <id>https://xlxq.fun/posts/f1601c3e.html</id>
    <published>2023-10-15T12:18:02.000Z</published>
    <updated>2023-10-15T12:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>懒汉式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(singleton==<span class="literal">null</span>)&#123;  </span><br><span class="line">            singleton=<span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>饿汉式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton2 singleton2=<span class="keyword">new</span> <span class="title class_">Singleton2</span>();  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> singleton2;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>双重校验锁</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton3</span> &#123;  </span><br><span class="line"><span class="comment">//    创建一个对象，在JVM中会经过三步：  </span></span><br><span class="line"><span class="comment">//          （1）为singleton分配内存空间  </span></span><br><span class="line"><span class="comment">//          （2）初始化singleton对象  </span></span><br><span class="line"><span class="comment">//          （3）将singleton指向分配好的内存空间  </span></span><br><span class="line"><span class="comment">//在这个过程中2、3步可能发生指令重排序，因此需要使用volatile来修饰  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton3 singleton3;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton3</span><span class="params">()</span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title function_">getInstance</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="comment">// 线程A和线程B同时看到singleton = null，如果不为null，则直接返回singleton   </span></span><br><span class="line">        <span class="keyword">if</span> (singleton3 == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="comment">// 线程A或线程B获得该锁进行初始化  </span></span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton3.class) &#123; </span><br><span class="line">            <span class="comment">// 其中一个线程进入该分支，另外一个线程则不会进入该分支</span></span><br><span class="line">                <span class="keyword">if</span> (singleton3 == <span class="literal">null</span>) &#123;   </span><br><span class="line">                    singleton3 = <span class="keyword">new</span> <span class="title class_">Singleton3</span>();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> singleton3;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>枚举</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton4</span> &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    Singleton4() &#123; System.out.println(<span class="string">&quot;枚举创建对象了&quot;</span>); &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>单例模式的线程安全问题</h1><p>在一般的单例模式实现中，如果没有特殊处理，是不具备线程安全性的。主要的问题在于多线程环境下可能会导致<strong>多个线程同时访问到未初始化完成的实例或者同时执行实例的创建操作</strong>，从而造成实例的不一致性或错误。<br>上述四种单例模式的实现中，饿汉式、双重校验锁、枚举都可以保证单例的线程安全</p><ol><li>饿汉式在类加载时就创建了实例，因此不会存在多线程环境下的竞争问题。但它可能会提前占用资源，因为无论是否使用，实例都会被创建</li><li>双重校验锁使用<code>volatile</code>关键字确保多线程环境下对<code>instance</code>变量的可见性，而双重检查锁定通过在锁内外都进行一次判空来提高性能</li><li>枚举类型在Java中天生就是单例的，且线程安全</li></ol>]]></content>
    
    
    <summary type="html">java基础知识</summary>
    
    
    
    <category term="java" scheme="https://xlxq.fun/categories/java/"/>
    
    
    <category term="java，设计模式" scheme="https://xlxq.fun/tags/java%EF%BC%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>关系模型</title>
    <link href="https://xlxq.fun/posts/a3d48093.html"/>
    <id>https://xlxq.fun/posts/a3d48093.html</id>
    <published>2023-10-12T11:18:02.000Z</published>
    <updated>2023-10-12T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>基本概念</h1><h2 id="关系模型的提出">关系模型的提出</h2><p>IBM的研究员E.F.Codd博士<br>关系模型以关系代数理论为数学基础，将数据操作抽象为关系处理，其关系表结构简单，便于理解和访问。关系模型在当今几乎所有商业数据库中得到广泛应用。</p><h2 id="实体与关系">实体与关系</h2><p>实体（entity）——是指包含有数据特征的事物对象在概念模型世界中的抽象名称。<br>关系（relation）——是指具有关系特征、用于存放实体数据的二维表。关系也常被称为关系表。<br>在关系模型中，使用“关系”来存储“实体”中的数据。</p><h2 id="关系特征">关系特征</h2><p>表中每行存储实体的一个实例数据<br>表中每列包含实体的一项属性数据<br>表中单元格只能存储单个值<br>不允许有重复的行<br>不允许有重复的列<br>列顺序可任意<br>行顺序可任意</p><h2 id="关系的数学定义">关系的数学定义</h2><img src="/post-img/Pasted image 20230826193526.png" alt="图片损坏" style="zoom:100%;" /><h1>关系的基本概念</h1><h2 id="键（复合、候选、主键、代理）">键（复合、候选、主键、代理）</h2><p>在关系中，可以用来唯一标识元组的属性列，称为键（Key），其它属性列都为非键列。<br>复合键（Compound Key）——是指关系中用来唯一标识元组的多列作为键。<br>候选键（Candidate Key）——关系中可能有多个列均适合作为键，将其中每个都称为候选键。<br>主键（Primary key）是关系表中最有代表性的一个候选键，每个关系表中只能定义一个主键。<br>主键作用：<br>唯一标识关系表的每行（元组）<br>与关联表的外键建立联系，实现关系表之间连接<br>数据库文件使用主键值来组织关系表的数据存储<br>数据库使用主键索引快速检索数据<br>代理键——采用DBMS自动生成的数字序列作为关系表的主键，可替代复合主键，以便获得更高性能的数据访问操作处理。</p><h2 id="关系模式语句表述">关系模式语句表述</h2><img src="/post-img/Pasted image 20230826193748.png" alt="图片损坏" style="zoom:100%;" />如EMPLOYEE (EmployeeNumber,FirstNmae,LastName,Department,Email,Phone)<h1>关系模型原理</h1><p>关系模型（Relation Model）——是一种基于二维表结构存储数据实体及实体间联系的数据模型。</p><h2 id="数据结构（二维表）">数据结构（二维表）</h2><h2 id="数据操作">数据操作</h2><p>集合运算操作包括选择（select）、投影（project）、连接（join）、交（intersection）、并（union）、差（difference）等。<br>专门针对元组的关系操作包括数据行插入（Insert）、 修改（Update）、删除（Delete）操作。</p><h2 id="数据关系约束">数据关系约束</h2><p>在关系模型中，数据关系约束是指关系表中实体数据完整性、关联表之间数据一致性等要求，一般由业务需求来确定。<br>在关系模型中，可定义关系表的数据约束如下：<br>属性列取值类型<br>属性列取值范围<br>属性列取值是否唯一<br>属性列是否允许空值<br>关联表的参照完整性约束</p><h2 id="数据操作-2">数据操作</h2><p>关系模型数据操作采用基于关系代数的数据操作，包括传统的集合运算操作和专门的关系运算操作。<br>1.<strong>关系并运算∪</strong>的结果集是由属于R或属于S的所有元组组成，前提是关系R与关系S需有相同属性组成。<br>2.<strong>关系差运算</strong>-的结果集是由属于R，而不属于S的所有元组组成，前提是关系R与关系S需有相同属性组成。<br>3.<strong>关系交运算</strong>∩的结果集是由既属于R又属于S的所有元组组成，前提是关系R与关系S需有相同属性组成。<br>4.<strong>笛卡儿积运算</strong>的结果集是由所有属于R的元组与所有属于S的元组进行组合而成。</p><h2 id="完整性约束">完整性约束</h2><h2 id="关系模型完整性约束">关系模型完整性约束</h2><p>关系模型完整性是指在关系数据模型中对关系实施的完整性约束。<br>完整性约束作用：<br>消除关系表的元组重复存储<br>保持关联表的数据一致性<br>实现业务数据规则</p><h3 id="实体完整性约束（主键应非空且唯一）">实体完整性约束（主键应非空且唯一）</h3><p>实体完整性是指在关系表中实施的主键取值约束，以保证关系表中的每个元组可以被唯一标识。<br>1.每个关系表中的主键属性列都不允许为空值（NULL），否则就不可能标识实体。<br>2.现实世界中的实体是靠主键来标识，主键取值应该唯一，并区分关系表中的每个元组。</p><h3 id="参照完整性约束（主键与外键一致）">参照完整性约束（主键与外键一致）</h3><p>参照完整性是指关系表之间需要遵守的数据约束，以保证关系之间关联列的数据一致性。<br>若关系R中的外键F与关系S中的主键K相关联，则R中外键F值必须与S中主键K值一致。<br>外键（Foreign key）——在关联的两个关系中，它们具有一个或多个相同属性。若关联列在第一个关系中作为主键，则在第二个关系中作为外键。</p><h3 id="用户自定义完整性约束">用户自定义完整性约束</h3><p>用户自定义完整性是指用户根据具体业务对数据处理规则要求所定义的数据约束。<br>1.定义列的数据类型与取值范围<br>2.定义列的缺省值<br>3.定义列是否允许取空值<br>4.定义列取值唯一性<br>5.定义列之间的数据依赖性</p>]]></content>
    
    
    <summary type="html">数据库原理及应用（二）</summary>
    
    
    
    <category term="数据库" scheme="https://xlxq.fun/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://xlxq.fun/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库管理</title>
    <link href="https://xlxq.fun/posts/92ac8f89.html"/>
    <id>https://xlxq.fun/posts/92ac8f89.html</id>
    <published>2023-10-12T11:18:02.000Z</published>
    <updated>2023-10-12T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>概述</h1><p>数据库管理(Database Management)是指为保证数据库系统的正常运行和服务质量必须进行的系统管理工作。</p><h2 id="数据库管理目标">数据库管理目标</h2><p>1.保障数据库系统正常稳定运行<br>2.充分发挥数据库系统的软硬件处理能力<br>3.确保数据库系统安全和用户数据隐私性<br>4.有效管理数据库用户及其角色权限<br>5.解决数据库系统性能优化、系统故障与数据损坏等问题<br>6.最大程度地发挥数据库对其所属机构的作用</p><h2 id="数据库管理内容">数据库管理内容</h2><p>1.DBMS系统运行管理<br>2.数据库性能监控<br>3.数据库索引管理<br>4.数据库查询优化<br>5.数据库事务并发控制<br>6.数据库角色管理<br>7.数据库用户管理<br>8.数据库对象权限管理<br>9.数据安全管理<br>10.数据库备份和恢复</p><h2 id="数据库DBMS功能结构">数据库DBMS功能结构</h2><img src="/post-img/Pasted image 20230826205526.png" alt="图片损坏" style="zoom:100%;" /><h2 id="数据库DBMS系统结构">数据库DBMS系统结构</h2><img src="/post-img/Pasted image 20230826205557.png" alt="图片损坏" style="zoom:100%;" /><h1>事务管理</h1><p>在数据库应用系统中，完成一个业务处理通常需要多个操作步骤才能完成处理。在每个操作步骤中，都可能遭遇失败，若没有一个处理机制，就可能造成操作数据混乱，从而破坏数据一致性。</p><h2 id="事务">事务</h2><p>在数据库中，事务（Transaction）是指由构成单个业务处理单元的一组数据库访问操作，要求它们要么都成功执行，要么都不执行。</p><h2 id="事务状态">事务状态</h2><img src="/post-img/Pasted image 20230826205718.png" alt="图片损坏" style="zoom:100%;" /><h2 id="事务特性（ACID）">事务特性（ACID）</h2><p>原子性（Atomicity）：事务所有操作在数据库中要么全部执行，要么全部不执行。<br>一致性（Consistency）：事务多次执行，其结果应一致。<br>隔离性（Isolation）：事务与事务之间隔离，并发执行透明。<br>持续性（Durability ）：事务完成后，数据改变必须是永久的。</p><h2 id="事务并发执行">事务并发执行</h2><p>事务并发执行是指多个事务程序在数据库系统中同一时段运行。<br>事务并发执行原因：<br>1.改善系统的资源利用率<br>2.减少事务运行的平均等待时间</p><h2 id="事务SQL程序">事务SQL程序</h2><img src="/post-img/Pasted image 20230826205906.png" alt="图片损坏" style="zoom:100%;" /><h3 id="基本框架">基本框架</h3><img src="/post-img/Pasted image 20230826205922.png" alt="图片损坏" style="zoom:100%;" /><h2 id="默认事务处理方式">默认事务处理方式</h2><p>若用户没有显式地定义事务时，DBMS按默认事务方式处理，即每执行一个SQL语句将自动构成一个事务。若将多条SQL语句定义为一个事务时，才使用专门的事务SQL语句显式地定义事务。</p><h1>并发控制</h1><p>并发控制目的：<br>支持并发事务处理，使更多用户并行操作，提高系统的并发访问能力。<br>保证一个事务工作不会对另一个事务工作产生不合理的影响。<br>需解决的问题：<br>1.丢失更新数据<br>T1、T2两个事务并发执行，它们均对数据库共享数据A进行了非锁定资源的读写操作。<br>当事务T1和T2均读入该共享数据A并修改，T2提交的结果破坏了T1提交的结果，导致T1的修改被丢失。<br>2.不可重复读取<br>事务T1读取某一数据后，事务T2对其做了修改（插入，删除），当事务T1再次读该数据时，得到与前一次不同的值。<br>3.脏数据读取<br>脏数据读取是指一个事务读取了被取消持久化（被恢复）的共享数据。</p><h2 id="事务调度">事务调度</h2><p>并发事务调度就是控制多个事务的数据操作语句按照恰当的顺序访问共享数据，使这些事务执行之后，避免造成数据的不一致性，即解决“丢失更新数据”、“不可重复读”、“脏数据读”等问题。</p><h3 id="原理">原理</h3><p>在DBMS中，事务管理器将并发执行事务的SQL数据操作请求提交给并发控制调度器。由并发控制调度器将各个事务的SQL数据操作请求按照一定顺序进行调度执行，并完成对数据库缓冲区的读写操作。</p><h3 id="策略">策略</h3><p>按一定顺序串行<br>在事务并发执行中，只有当事务中数据操作调度顺序的执行结果与事务串行执行结果一样时，该并发事务调度才能保证数据操作的正确性和一致性。符合这样效果的调度称为可串行化调度。</p><h2 id="锁机制">锁机制</h2><p>为了解决多个事务并发对共享数据进行新增、更新、删除、查询带来的数据不一致性问题时，需要对共享数据进行加锁访问。<br>1.资源锁定访问<br>在DBMS中，通过加入锁表机制，来实现共享数据锁定访问，其加锁方式包含如下类型。<br>排它锁定(Lock-X)——锁定后，不允许其它事务对共享数据再加锁<br>共享锁定(Lock-S)——锁定后，只允许其它事务对共享数据添加读取锁<br>2.资源锁定粒度<br>数据库——粒度最大<br>表——粒度较大<br>页面——粒度中等<br>行——粒度小<br>3.资源锁定实施方式<br>隐式锁定-DBMS缺省执行<br>显式锁定-加锁命令显式执行</p><h2 id="控制协议">控制协议</h2><p>为了实现并发事务对共享数据访问的串行化调度执行，还必须约束它们对共享数据的操作访问必须是以互斥方式进行。这就需要用到基于数据库锁机制的并发控制协议。</p><h3 id="锁操作的相容性">锁操作的相容性</h3><img src="/post-img/Pasted image 20230826210714.png" alt="图片损坏" style="zoom:100%;" /><h3 id="加锁协议">加锁协议</h3><p>一级加锁协议：任何事务在修改共享数据对象之前，必须对该数据执行排它锁定指令，直到该事务处理完成，才进行解锁指令执行。可避免出现更新丢失问题<br>二级加锁协议：在一级加锁协议基础上，针对并发事务的共享数据读操作，必须对该数据执行共享锁定指令，读完数据后即刻释放共享锁定。该加锁协议不但可以防止“丢失更新”的数据不一致性问题，还可防止出现脏读数据问题<br>三级加锁协议：在一级加锁协议基础上，针对并发事务对共享数据进行读操作，必须对该数据执行共享锁定指令，直到该事务处理结束才释放共享锁定。该加锁协议不但可以防止“丢失更新”、“脏读”的数据不一致性问题，还可防止出现“不可重复读取”的数据一致性问题。<br><img src="/post-img/Pasted image 20230826210831.png" alt="图片损坏" style="zoom:100%;" /></p><h2 id="二阶段锁定协议">二阶段锁定协议</h2><p>一个给定的并发事务调度，当且仅当它是可串行化时，才能保证正确调度。<br>保证可串行化的一个协议是：二阶段锁定协议<br>二阶段锁定协议规定每个事务必须分两个阶段提出加锁和解锁申请:<br>增长阶段，事务只能获得锁，但不能释放锁。<br>缩减阶段，事务只能释放锁，但不能获得新锁。</p><h2 id="死锁">死锁</h2><p>在基于锁机制的并发事务执行中，如果这些事务同时锁定两个以及以上资源时，可能会出现彼此都不能继续执行的状态，即事务死锁状态</p><h3 id="死锁出现的必要条件">死锁出现的必要条件</h3><p>互斥条件<br>请求和保持条件<br>不剥夺条件<br>环路等待条件</p><h3 id="防范死锁的策略">防范死锁的策略</h3><p>允许用户一次发出当前所需全部资源的锁定，使用完成后，再释放给其它用户访问。<br>规定所有应用程序锁定资源的顺序必须完全相同。</p><h3 id="解决死锁的方法">解决死锁的方法</h3><p>当发生死锁时，回滚其中的一个事务，并取消它对数据库所做的改动</p><h1>安全管理</h1><h2 id="存取安全模型">存取安全模型</h2><p>身份验证:从应用系统层面确认登录用户是否是合法使用者<br>权限控制:从DBMS系统层面通过存取权限机制控制用户对数据的访问<br>系统防护:从操作系统层面提供的安全机制防范非法系统访问<br>加密存储:从数据存储层面通过加密算法对数据库中数据进行加密存储</p><h2 id="用户、角色、权限管理">用户、角色、权限管理</h2><h3 id="用户管理">用户管理</h3><p>用户要访问数据库，必须先在DBMS中创建其账号，并成为数据库的用户。此后，用户每次访问数据库，都需要在DBMS进行身份验证，只有合法用户才能进入系统，访问操作数据库对象。<br>在数据库安全管理中，DBMS需要对每个用户进行管理，如用户创建、用户修改、用户删除管理等。<br><img src="/post-img/Pasted image 20230826211241.png" alt="图片损坏" style="zoom:100%;" /><br><img src="/post-img/Pasted image 20230826211303.png" alt="图片损坏" style="zoom:100%;" /><br><img src="/post-img/Pasted image 20230826211317.png" alt="图片损坏" style="zoom:100%;" /></p><h3 id="权限管理">权限管理</h3><p>数据库权限管理是指DBA管理员或数据库对象拥有者对其所拥有对象进行权限控制设置。<br>权限管理基本操作：授予权限、收回权限、拒绝权限<br>权限类别：数据库系统权限、数据库对象访问操作权限、数据库对象定义操作权限<br><img src="/post-img/Pasted image 20230826211429.png" alt="图片损坏" style="zoom:100%;" /></p><h3 id="角色管理">角色管理</h3><p>在DBMS中，为了方便对众多用户及其权限进行管理，通常将一组具有相同权限的用户定义为角色(Role)。<br>角色管理内容：创建角色、修改角色、删除角色<br><img src="/post-img/Pasted image 20230826211534.png" alt="图片损坏" style="zoom:100%;" /></p><h1>数据库备份与恢复</h1><p>数据库备份——是指将数据库当前数据和状态进行副本复制，以便当数据库受到破坏或丢失数据时可以进行修复。<br>数据库恢复——是指数据库中数据丢失或被破坏时，从备份副本将数据库从错误状态恢复到某一正确状态。<br>备份内容——包括数据文件、日志文件等。<br>备份角色——可以是服务器管理员（sysadmin）、数据库所有者（db_owner）、数据库备份员（db_backupoperator）角色之一。</p><h2 id="备份方法">备份方法</h2><img src="/post-img/Pasted image 20230826211650.png" alt="图片损坏" style="zoom:100%;" />1.通过备份文件进行恢复  2.利用事务日志按前滚或回滚方式进行数据库恢复]]></content>
    
    
    <summary type="html">数据库原理及应用（四）</summary>
    
    
    
    <category term="数据库" scheme="https://xlxq.fun/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://xlxq.fun/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库编程</title>
    <link href="https://xlxq.fun/posts/8c5e4b35.html"/>
    <id>https://xlxq.fun/posts/8c5e4b35.html</id>
    <published>2023-10-12T11:18:02.000Z</published>
    <updated>2023-10-12T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>数据库连接技术（ODBC）</h1><p>开放式数据库互连Open DataBase Connectivity<br>实现了应用程序对多种不同DBMS的数据库的访问，实现了数据库连接方式的变革。<br>ODBC定义了一套基于SQL的、公共的、与数据库无关的API（应用程序设计接口）；<br>使每个应用程序利用相同的源代码就可访问不同的数据库系统，存取多个数据库中的数据；<br>从而使得应用程序与数据库管理系统（DBMS）之间在逻辑上的独立性，使应用程序具有数据库无关性。</p><h2 id="层次结构">层次结构</h2><img src="/post-img/Pasted image 20230826212141.png" alt="图片损坏" style="zoom:100%;" /><p><strong>ODBC应用程序接口：</strong><br>是一种使用ODBC技术实现应用程序与数据库互连的标准接口。<br>ODBC驱动程序管理器：<br>用于管理系统中的各种驱动程序。<br><strong>驱动程序：</strong><br>是一个用于支持ODBC函数调用的模块，通常是一个动态链接库DLL。不同RDBMS的驱动程序是不同的。每种数据库都要向ODBC驱动程序管理器注册它自己的驱动程序。<br>建立与数据源的连接<br>向数据源提交请求<br>在应用程序需求时，转换数据格式<br>返回结果给应用程序<br>将运行错误格式化为标准代码返回<br>需要时可声明和处理游标。<br><strong>数据源：</strong><br>驱动程序与数据库系统连接的桥梁。<br>它不是数据库系统，而是用于表达ODBC驱动程序与DBMS特殊连接的命名。<br>在连接中，用数据源名来代表用户名、服务器名、连接的数据库名等；<br>可以将数据源名看成是与一个具体数据库建立的连接；<br>创建数据源最简单的方法是使用Windows的ODBC驱动程序管理器<br><strong>SQL Server DBMS:</strong><br>是用户向各数据库厂商购买的管理数据库的管理软件；<br>是管理数据库的系统软件；<br>用户可以执行SQL语句；<br>创建数据库、表、视图等；<br>对数据库进行权限管理。<br><strong>SQL Server DB：</strong><br>用户创建的数据库；<br>用于存储用户数据、对象。</p><h2 id="应用程序使用ODBC访问数据库的步骤">应用程序使用ODBC访问数据库的步骤</h2><p>1.首先必须用ODBC管理器注册一个数据源；<br>2.管理器根据数据源提供的数据库位置、数据库类型及ODBC驱动程序等信息，建立起ODBC与具体数据库的联系；<br>3.应用程序只需将数据源名提供给ODBC，ODBC就能建立起与相应数据库的连接；<br>4.这样，应用程序就可以通过驱动程序管理器与数据库交换信息；<br>5.驱动程序管理器负责将应用程序对ODBC API的调用传递给正确的驱动程序；<br>6.驱动程序在执行完相应的SQL操作后，将结果通过驱动程序管理器返回给应用程序</p><h1>数据库连接技术（JDBC）</h1><p>JDBC（Java DataBase Connectivity，Java数据库连接）技术的简称 ，是一种用于执行SQL语句的Java API。<br>它由一组用Java编程语言编写的类和接口组成。这个API由java.sql.* 包中的一些类和接口组成，它为数据库开发人员提供了一个标准的API，使他们能够用纯Java API 来编写数据库应用程序。<br>注意：使用JDBC访问数据库需要相应数据库的JDBC驱动程序。</p><h2 id="工作原理">工作原理</h2><img src="/post-img/Pasted image 20230826212609.png" alt="图片损坏" style="zoom:100%;" /><h2 id="JDBC程序访问数据库步骤">JDBC程序访问数据库步骤</h2><img src="/post-img/Pasted image 20230826212616.png" alt="图片损坏" style="zoom:100%;" />1.加载驱动2.建立连接3.创建Statement对象4.执行SQL语句5.ResultSet保存结果集6.关闭连接<h1>JavaWeb数据库编程</h1><h2 id="Web容器">Web容器</h2><p><a href="http://1.Web">1.Web</a> 容器提供了运行servlet 所需的环境；<br>2.它负责实例化、初始化、调用服务方法并从服务中移除servlet，管理Servlet 的生命周期；<br>3.实现Servlet API；<br>4.它充当Web 服务器和Servlet 之间的桥梁；<br>5.将请求从Web 服务器转发到Servlet；<br>6.将响应从Servlet 转发到Web 服务器。</p><h2 id="Servlet工作流程">Servlet工作流程</h2><img src="/post-img/Pasted image 20230826212907.png" alt="图片损坏" style="zoom:100%;" />1客户机将请求发送到服务器； 2.Servlet程序是由Web服务器调用，Web服务器收到客户端的Servlet访问请求后，解析客户端的请求；3.服务器上的Web容器转载并实例化Servlet；4.调用Servlet实例对象的init()方法；5.调用Servlet的service()方法并将请求和响应对象作为参数传递进去；6.Servlet 创建一个响应，并将其返回到Web容器。7.Web容器将响应发回客户机。8.服务器关闭或Servlet空闲时间超过一定限度时，调用destory()方法退出。<h2 id="MyBatis访问数据库技术">MyBatis访问数据库技术</h2><p>MyBatis 是Apache的开源项目iBatis，基于Java的持久层框架，提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）。<br>MyBatis 是支持普通 SQL查询、存储过程和高级映射的优秀持久层框架。MyBatis 使用简单的XML或注解用于配置和原始映射，将接口和 Java 的POJOs（Plain Ordinary Java Objects，普通的 Java对象）映射成数据库中的记录，而不是使用JDBC代码和参数实现对数据的检索。</p><h3 id="基本步骤">基本步骤</h3><img src="/post-img/Pasted image 20230826213134.png" alt="图片损坏" style="zoom:100%;" />1.读取配置文件SqlMapConfig.xml，此文件作为Mybatis的全局配置文件，配置了Mybatis的运行环境等信息。mapper.xml文件即SQL映射文件，文件中配置了操作数据库的SQL语句，此文件需要在SqlMapConfig.xml中加载；2.SqlSessionFactoryBuilder通过Configuration生成sqlSessionFactory对象。3.通过sqlSessionFactory打开一个数据库会话sqlSession会话，操作数据库需要通过sqlSession进行。4.Mybatis底层自定义了Executor执行器接口操作数据库，Executor接口负责动态SQL的生成和查询缓存的维护，将MappedStatement对象进行解析，SQL参数转化、动态SQL拼接，生成JDBC Statement对象。<h1>数据库存储过程</h1><p>存储过程（Stored Procedure）是一种数据库的对象；<br>由一组能完成特定功能的SQL 语句集构成；<br>是把经常会被重复使用的SQL语句逻辑块封装起来，经编译后，存储在数据库服务器端；<br>当被再次调用时，而不需要再次编译；<br>当客户端连接到数据库时，用户通过指定存储过程的名字并给出参数，数据库就可以找到相应的存储过程予以调用。</p><h2 id="创建存储过程的语法">创建存储过程的语法</h2><img src="/post-img/Pasted image 20230826213230.png" alt="图片损坏" style="zoom:100%;" /><h2 id="执行存储过程">执行存储过程</h2><img src="/post-img/Pasted image 20230826213322.png" alt="图片损坏" style="zoom:100%;" /><img src="/post-img/Pasted image 20230826213330.png" alt="图片损坏" style="zoom:100%;" /><h2 id="删除存储过程">删除存储过程</h2><img src="/post-img/Pasted image 20230826213350.png" alt="图片损坏" style="zoom:100%;" /><h2 id="PL-SQL基本语法">PL/SQL基本语法</h2><h3 id="声明局部变量">声明局部变量</h3><img src="/post-img/Pasted image 20230827152456.png" alt="图片损坏" style="zoom:100%;" />record是指在不明确变量类型的时候，为保证程序语法的格式而使用的占位符它可以存储一个实体类数据（类比，因为SQL中没有实体类的概念），也就是一个实例对象的全部数据（或部分）都可以存放在一个record类型的变量中<h3 id="条件语句">条件语句</h3><img src="/post-img/Pasted image 20230827152658.png" alt="图片损坏" style="zoom:100%;" /><h3 id="循环语句">循环语句</h3><img src="/post-img/Pasted image 20230827152711.png" alt="图片损坏" style="zoom:100%;" /><img src="/post-img/Pasted image 20230827152719.png" alt="图片损坏" style="zoom:100%;" /><h3 id="遍历命令结果">遍历命令结果</h3><img src="/post-img/Pasted image 20230827152746.png" alt="图片损坏" style="zoom:100%;" /><h1>数据库触发器</h1><p>触发器是特殊类型的存储过程，主要由操作事件(INSERT、UPDATE、DELETE) 触发而被自动执行。<br>触发器可以实现比约束更复杂的数据完整性，经常用于加强数据的完整性约束和业务规则。<br>触发器本身是一个特殊的事务单位。<br>特点：<br>与表相关联：必须定义在表或视图上。<br>自动触发：由执行INSERT、DELETE、UPDATE操作时触发，不能直接调用，也不能传递或接受参数<br>是事务的一部分：触发器和触发语句作为可在触发器内回滚的单个事务</p><h2 id="分类">分类</h2><p>1.INSERT触发器、DELETE触发器、UPDATE触发器<br>2.语句级触发器、行级触发器<br>3.BEFORE触发器：在触发事件之前执行触发器。<br>AFTER触发器：在触发事件之后执行触发器。<br>INSTEAD OF触发器：当触发事件发生后，执行触发器中指定的函数，而不是执行产生触发事件的SQL 语句，从而替代产生触发事件的SQL操作。在表或视图上，对于INSERT、UPDATE 或 DELETE 三种触发事件，每种最多可以定义一个INSTEAD OF 触发器</p><h2 id="触发器相关的特殊变量">触发器相关的特殊变量</h2><p>（1）NEW<br>数据类型是RECORD。对于行级触发器，它存有INSERT或UPDATE操作产生的新的数据行。对于语句级触发器，它的值是NULL。<br>（2）OLD<br>数据类型是RECORD。对于行级触发器，它存有被UPDATE或DELETE操作修改或删除的旧的数据行。对于语句级触发器，它的值是NULL。<br>（3）TG_OP<br>数据类型是text；是值为INSERT、UPDATE、DELETE 的一个字符串，它说明触发器是为哪个操作引发。<br>总结：NEW和OLD用于行级触发器，存放修改前（或后）的数据，可以调用数据行中某个字段的数据<br>TG_OP用于语句级触发器，存储触发器的触发类型</p><p>关于语句级触发器（default）和行级触发器（FOR EACH ROW）<br>语句级的语句针对的是SQL语句，当一条SQL语句执行的操作同时修改了数据库表中的任意条数据时，触发器只会执行一次；这种触发器是针对整个 SQL 语句的操作。当执行一条 SQL 语句时，语句级触发器会在整个语句执行完成后被激活，无论这条语句涉及多少行数据。它们对整个语句的操作进行处理，而不是逐行处理。<br>行级的行针对是数据库表，每当修改一行数据时，触发器都会执行一次；这种触发器是针对表的每一行数据的操作。当对表进行 INSERT、UPDATE 或 DELETE 操作时，行级触发器会在每一行上被激活。它们对表中每一行的操作进行处理。</p><h2 id="语法和使用">语法和使用</h2><h3 id="创建触发器">创建触发器</h3><img src="/post-img/Pasted image 20230827153644.png" alt="图片损坏" style="zoom:100%;" /><h3 id="修改触发器">修改触发器</h3><img src="/post-img/Pasted image 20230827153748.png" alt="图片损坏" style="zoom:100%;" /><h3 id="删除触发器">删除触发器</h3><img src="/post-img/Pasted image 20230827153759.png" alt="图片损坏" style="zoom:100%;" /><h3 id="使用步骤">使用步骤</h3><p>（1）检查数据库中将要创建的触发器所依附的表或视图是否存在，如果不存在，必须首先创建该表或视图。<br>（2）创建触发器被触发时所要执行的触发器函数，该函数的类型必须是TRINGER型，是触发器的执行函数。但要注意，有些数据库不需要独立定义触发器函数，而是在创建触发器时，定义触发器的过程体。<br>（3）创建触发器，一般需要指明触发器依附的表，触发器被触发执行的时间，触发器是行级触发器还是语句级触发器，触发器执行需要满足的条件</p><h1>数据库游标</h1><p>（1）游标（Cursor）是一种临时的数据库对象；<br>（2）用来存放从数据库表中查询返回的数据记录；<br>（3）提供了从结果集中提取并分别处理每一条记录的机制；<br>（4）游标总是与一条SQL查询语句相关联；<br>（5）游标包括：SQL语言的查询结果，指向特定记录的指针。</p><h2 id="声明">声明</h2><p>（1）在存储过程中游标类型的变量。例如：游标变量  refcursor;<br>refcursor是关键字；<br>此时，游标变量还没有绑定查询语句，因此不能访问游标变量。<br>（2） 使用游标专有的声明语法，如：<br>游标名  CURSOR [ ( arguments ) ] FOR query;<br>其中arguments为由逗号分隔的参数列表，用于打开游标时向游标传递参数，类似于存储过程或函数的形式参数；query是select数据查询语句，返回的值存储在游标变量中。</p><h2 id="打开">打开</h2><p>（1）OPEN FOR:<br>其声明形式为：<br>OPEN unbound_cursor FOR query;<br>打开未绑定的游标变量，其query查询语句是返回记录的SELECT语句。<br>（2）OPEN FOR EXECUTE<br>其声明形式为：  OPEN unbound_cursor FOR EXECUTE query-string;<br>打开未绑定的游标变量。EXECUTE将动态执行查询字符串。<br>（3）打开一个绑定的游标，其声明形式为：<br>OPEN bound_cursor [ ( argument_values ) ];<br>仅适用于绑定的游标变量，只有当该变量在声明时包含接收参数，才能以传递参数的形式打开该游标，参数将传入到游标声明的查询语句中</p><h2 id="读取">读取</h2><p>其声明形式为：    FETCH cursor INTO target;<br>FETCH命令从游标中读取下一行记录的数据到目标中，读取成功与否，可通过PL/SQL内置系统变量FOUND来判断。</p><h2 id="关闭">关闭</h2><p>CLOSE cursorName;<br>当游标数据不再需要时，需要关闭游标，以释放其占有的系统资源，主要是释放游标数据所占用的内存资源，cursorName是游标名。</p><h2 id="游标和存储过程">游标和存储过程</h2><p>游标不是存储过程，它是一种对象，可以体现为存储过程中的变量，这个特殊的变量可以与某条查询语句查询出来的数据绑定，暂时存储这些数据，并可通过循环将这些数据逐条提供给变量，便于存储过程使用，这可以使得查询结果与存储过程分离，更直观，具有封装性和可重用性</p>]]></content>
    
    
    <summary type="html">数据库原理及应用（三）</summary>
    
    
    
    <category term="数据库" scheme="https://xlxq.fun/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://xlxq.fun/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库设计</title>
    <link href="https://xlxq.fun/posts/841393be.html"/>
    <id>https://xlxq.fun/posts/841393be.html</id>
    <published>2023-10-12T11:18:02.000Z</published>
    <updated>2023-10-12T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>数据库设计方案</h1><p>1.数据库应用架构设计<br>在不同应用需求场景中，数据库的应用架构方式是不同的。数据库应用架构可分为单用户结构、集中式结构、客户/服务器结构和分布式结构。<br>2.数据库结构模型设计<br>数据库结构模型设计一般分为概念层、逻辑程、物理层设计，它们的设计模型分别为概念数据模型、逻辑数据模型和物理数据模型。<br>3.数据库应用访问方式设计<br>数据库应用对数据库访问可以有多种方式，如直接本地接口连接访问、基于标准接口连接访问、基于数据访问层框架连接访问</p><h1>数据库结构模型</h1><h2 id="概念数据模型">概念数据模型</h2><p>(Concept Data Model，CDM)是一种面向用户的系统数据模型，它用来描述现实世界的系统概念化数据结构。使数据库设计人员在系统设计的初始阶段，摆脱计算机系统及DBMS的具体技术问题，集中精力分析业务数据以及数据之间的联系等，描述系统的数据对象及其组成关系。</p><h2 id="逻辑数据模型">逻辑数据模型</h2><p>(Logic Data Model，LDM)是在概念数据模型基础上，从系统设计角度描述系统的数据对象组成及其关联结构，并考虑这些数据对象<br>符合数据库对象的逻辑表示。</p><h2 id="物理数据模型">物理数据模型</h2><p>（Physical Data Model，PDM）是在逻辑数据模型基础上，针对具体DBMS所设计的数据模型。它用于描述系统数据模型在具体DBMS中的数据对象组织、存储方式、索引方式、访问路径等实现信息。</p><h1>数据库开发过程及设计策略</h1><h2 id="数据库开发过程">数据库开发过程</h2><img src="/post-img/Pasted image 20230826195242.png" alt="图片损坏" style="zoom:100%;" /><p><strong>1）数据需求分析阶段</strong><br>从现实业务获取数据表单、报表、查询、业务规则、数据更新的说明<br>分析系统的数据特征、数据类型、数据取值约束<br>描述系统的数据关系、数据处理要求<br>建立系统的数据字典<br><strong>2）数据库设计阶段</strong><br>数据库模型结构设计（概念数据模型、逻辑数据模型、物理数据模型）<br>数据库索引、视图、查询设计<br>数据库表约束设计<br>数据库触发器、存储过程设计<br><strong>3）数据库实现阶段</strong><br>数据库创建<br>数据模型物理实现<br><strong>4）数据库测试阶段</strong><br>数据库数据上线<br>数据库系统测试</p><h2 id="设计策略">设计策略</h2><p>自底向上设计<br>自顶向下设计<br>自内向外设计<br>混合策略设计</p><h1>E-R模型</h1><p>E-R模型是“实体-联系模型”（Entity-Relationship Model）的简称。它是一种描述现实世界概念数据模型、逻辑数据模型的有效方法。</p><h2 id="E-R模型的基本元素">E-R模型的基本元素</h2><h3 id="实体">实体</h3><p>实体(Entity)是指问题域中存在的人、事、物、地点等客观事物在逻辑层面的数据抽象。它用于描述事物的数据对象，如客户、交易、产品、订单等。</p><h3 id="属性">属性</h3><p>属性是指描述实体特征的数据项。每个实体都具有1个或多个属性。</p><h3 id="标识符">标识符</h3><p>标识符是指标识不同实体实例的属性。标识符可以是1个或多个属性。<br>标识符与主键的区别是标识符是一个逻辑概念，主键是物理概念。</p><h3 id="联系">联系</h3><p>联系(Relationship)是指实体之间的联系，如“学生”与“成绩”的联系、“孩子”与“父亲”、“母亲”的联系等。<br>联系中关联的实体数目称为联系度数。</p><h2 id="实体-联系类型">实体-联系类型</h2><img src="/post-img/Pasted image 20230826195725.png" alt="图片损坏" style="zoom:100%;" />上述实体之间的联系反映了一个给定实体有多少实例与另一实体实例存在的数量对应关系。通常采用术语**基数**（Cardinality）来表示。在实体之间除了需要反映了数量对应关系，有时还需要反映实体参与关系的必要性，即**可选（optional）或强制**（mandatory）。<img src="/post-img/Pasted image 20230826195817.png" alt="图片损坏" style="zoom:100%;" />鸟足版本：<img src="/post-img/Pasted image 20230826195846.png" alt="图片损坏" style="zoom:100%;" /><h2 id="E-R模型方法">E-R模型方法</h2><p>理解E-R模型的继承联系<br>理解E-R模型中的强弱实体联系<br>掌握E-R模型扩展建模方法</p><h3 id="实体继承联系">实体继承联系</h3><p>在E-R模型中，实体之间除了基本联系外，还存在继承联系。继承联系用于表示实体之间的相似性关系。<br>在实体继承联系中，一端是具有公共属性的实体，称为父实体；另一端是与父实体具有相似属性，同时也具有特殊性的一个或多个实体，称为子实体。<br>在继承联系中，还可以分为互斥性继承联系和非互斥性继承联系。<br><img src="/post-img/Pasted image 20230826201437.png" alt="图片损坏" style="zoom:100%;" /><br>还可以分为完整继承和非完整继承。如果父实体实例必须属于子实体中的某一个，则称为完整继承联系；否则是非完整继承联系。<br><img src="/post-img/Pasted image 20230826201448.png" alt="图片损坏" style="zoom:100%;" /></p><h3 id="强弱实体联系">强弱实体联系</h3><p>在E-R模型中，按照实体之间的语义关系，可以将实体分为<strong>弱实体和强实体</strong>。弱实体是指那些对于另外实体有依赖关系的实体，即一个实体的存在必须以另一实体的存在为前提。而被依赖的实体称为强实体。<br>其中，根据弱实体在语义上对强实体依赖程度的不同，<strong>弱实体又分为标识符（ID）依赖弱实体和非标识符（非ID）依赖弱实体两类</strong>。如果弱实体的标识符中含有所依赖实体的标识符，则该弱实体称为标识符（ID）依赖弱实体。在有依赖联系的弱实体中，并非所有弱实体都是标识符（ID）依赖弱实体，它们可以有自己的标识符，这样的弱实体即为非标识符（ID）依赖弱实体。</p><h1>数据库建模设计</h1><h2 id="概念数据模型-2">概念数据模型</h2><p>概念数据模型设计是通过对现实世界中数据实体进行抽取、分类、聚集和概括等处理，建立反映系统业务数据组成结构的过程，一般是采用E-R模型方法进行建模设计。<br>设计步骤：<br>1.业务数据分析，抽取数据实体<br>2.定义实体属性及其标识（类图）<br>3.建立实体联系，构建局部E-R模型图（类图间通过鸟足版本建立联系）<br>4.分类、聚集和概括各个部分E-R模型图（添加新类图和联系）<br>5.完善全局E-R模型图，建立系统业务数据组成结构</p><h2 id="CDM-LDM-PDM模型转换设计">CDM/LDM/PDM模型转换设计</h2><h3 id="数据模型元素对应关系">数据模型元素对应关系</h3><img src="/post-img/Pasted image 20230826201917.png" alt="图片损坏" style="zoom:100%;" /><h3 id="不同层次数据模型转换方案">不同层次数据模型转换方案</h3><img src="/post-img/Pasted image 20230826201928.png" alt="图片损坏" style="zoom:100%;" /><h3 id="转换原理">转换原理</h3><p>CDM/LDM到PDM转换原理：<br>当使用关系数据库时，物理数据模型（PDM）即为关系模型。CDM/LDM到PDM的转换其实就是E-R模型到关系模型的转换。<br>E-R模型到关系模型转换原理：<br>1.将每一个实体转换成一个关系表，实体属性转换为关系表的列，实体标识符转换为关系表的主键或外键。<br>2.将实体之间的联系转化为关系表之间的参照完整性约束。<br>将实体转换为关系关系表时，注意如果是弱实体，应在弱实体的关系表中添加一项属性，也就是其所依赖的实体的标识符（主键）</p><h3 id="实体联系转换参照完整性约束">实体联系转换参照完整性约束</h3><h4 id="“1-1实体联系”转换表示">“1:1实体联系”转换表示</h4><p>将其中任意一个实体的主键放入另一个实体中做外键</p><h4 id="“1-N实体联系”转换表示">“1:N实体联系”转换表示</h4><p>两个实体分别转换为关系表，然后将父实体关系表的主键放入子实体关系表中做外键，便可将1:N实体联系转换为关系表参照完整性约束。</p><h4 id="“M-N实体联系”转换表示">“M:N实体联系”转换表示</h4><p>M:N实体联系不能像1:1和1:N实体联系那样直接转换。需要创建一个新的关联表，该关联表分别参照原有实体对应的关系表。（新的关系表中存放两个关系表的主键，在这个新关系表中，它们既是主键又是外键）</p><h3 id="实体继承联系转换参照完整性约束">实体继承联系转换参照完整性约束</h3><p>当带有实体继承联系的E-R模型转换关系模型时，首先父实体和子实体都各自转换为表，其属性均转换为表的列，然后将父表中的主键放置到子表中，既做主键又做外键。</p><h3 id="实体递归联系转换参照完整性约束">实体递归联系转换参照完整性约束</h3><h4 id="“1-N实体递归联系”的转换">“1:N实体递归联系”的转换</h4><p>首先将递归实体转换为表，其属性转换为列，标识符转换为主键，同时还将标识符转换为外键，实现自己对自己的参照。<br><img src="/post-img/Pasted image 20230826202931.png" alt="图片损坏" style="zoom:100%;" /></p><h4 id="“M-N实体递归联系”的转换">“M:N实体递归联系”的转换</h4><p>增加一个关联表，该表分别参照原实体对应的关系表，并对原关系表建立两个参照完整性约束。<br><img src="/post-img/Pasted image 20230826203032.png" alt="图片损坏" style="zoom:100%;" /></p><h1>数据库规范化设计</h1><p>1.减少数据库中的冗余数据，尽量使同一数据在数据库中仅保存一份，有效降低维护数据一致性的工作量。<br>2.设计合理的表间依赖关系和约束关系，便于实现数据完整性和一致性。<br>3.设计合理的数据库结构，便于系统对数据高效访问处理。<br>非规范数据关系在数据操作中出现的问题：<br>不规范的关系表可能存在数据冗余，引出数据访问操作异常现象，难以使数据库保持数据的一致性。</p><h2 id="函数依赖">函数依赖</h2><p>定义：设有一关系模式R（U）， U 为关系R的属性集合，X和Y为属性U的子集。设t，s是关系R中的任意两个元组，如果t[X] = s[X]，则t[Y] = s[Y]。那么称Y函数依赖于X，表示为X→Y。<br>函数依赖的左部称为决定因子，右部称为依赖函数。决定因子和依赖函数都是属性的集合。<br>理解：比如说一个实体有五个属性A,B,C,D,E,其中A,B是候选键（A，B任意一个可以指明这个实体，从而得到它的所有属性，这时X包含A或B，则Y中的任一元素均能被A推出，则Y函数依赖于X）<br>函数依赖反映属性或属性组之间相互依存、互相制约的关系，即关系表中属性之间的依赖关系。</p><h3 id="完全函数依赖和部分函数依赖">完全函数依赖和部分函数依赖</h3><p>X能推出Y，但X的任意子集不能推出Y，则Y完全依赖于X，否则Y部分依赖于X<br>这表明这个关系模式的实体应该是复合键</p><h3 id="属性传递依赖">属性传递依赖</h3><p>设X、Y、Z是某关系的不同属性集，有X→Y，Y推不出X， Y→Z，若X→Z，称Z对X存在函数传递依赖。</p><h3 id="多值传递依赖">多值传递依赖</h3><p>设U是关系模式R的属性集，X和Y是U的子集，Z=U-X-Y，xyz表示属性集XYZ的值。对于R的关系r，在r中存在元组（x, y1, z1）和（x, y2, z2）时，也存在元组（x, y1, z2）和（x, y2, z1），那么在模式R上存在多值函数依赖。<br>例  对于教学关系R（课程, 教师, 课程参考书），一门课程可以有多个任课教师，也可以有多本参考书；每个任课教师可以任意选择他的参考书。该关系存在多值函数依赖。</p><h2 id="关系规范化范式">关系规范化范式</h2><p>关系规范化是把一个有访问异常的关系分解成结构良好的关系的过程，使得这些关系有最小的冗余或没有冗余。<br>规范化范式（Normal Form，NF）是指关系表符合特定规范化程度的模式。</p><h3 id="第一范式">第一范式</h3><p>如果关系表中的属性不可再细分，该关系满足第1范式。反之，该表就不是关系表。</p><h3 id="第二范式">第二范式</h3><p>如果关系满足第1范式，并消除了关系中的属性部分函数依赖，该关系满足第2范式。<br>有一个关系（A,B,N,O,P）,其复合主键为（A,B）,那么N,O,P这三个非键属性都不存在只依赖A或只依赖B情况，则该关系满足第2范式,反之,不满足第2范式。</p><h3 id="第三范式">第三范式</h3><p>如果关系满足第2范式，并切断了关系中的属性传递函数依赖，该关系满足第3范式。<br>若有一个关系（A,N,O,P）,主键为（A）,那么非键属性N,O或P都不能由单个的N,O或P或它们的组合所确定。该关系满足第3范式。</p><h3 id="巴斯-科德范式（BCNF）">巴斯-科德范式（BCNF）</h3><p>在关系中，所有函数依赖的决定因子都是候选键，该关系满足BCNF范式。<br>关系STUDENT(StudentNum, Name, Email)中，决定因子StudentNum也是候选键，该关系满足BCNF范式。</p><h3 id="第四范式">第四范式</h3><p>如果关系满足BCNF范式，并消除了多值函数依赖，该关系满足第4范式。<br>设学校中某一门课程由多个教师讲授，每个教师可有自己的参考书。用关系模式Teaching（Course，Teacher，Book）来表示课程、教师和参考书之间的关系。 该关系Teaching（Course，Teacher，Book），属于BCNF范式；但是存在多值函数依赖，即不满足4NF。<br>将原表进行分解处理，可分解为Teaching（TeachID，CourseID，TeacherID，BookID）、Course（CourseID，CourseName）、 Teacher（TeacherID，TeacherName）、Book（BookID，BookName）后，即可消除多值依赖，便可满足4NF范式。</p><h2 id="关系规范化程度利弊">关系规范化程度利弊</h2><p>关系的规范化程度越高，关系数据库存储的冗余数据就越少，可消除的数据访问异常就越多。<br>不过关系的规范化程度越高，分解出来的关系表就越多，但实现数据查询访问时，需关联多表，其效率降低。</p><h2 id="逆规范化处理">逆规范化处理</h2><p>所谓逆规范化，就是适当降低规范化范式约束，不再要求一个关系表必须达到很高的规范化程度，而是允许适当的数据冗余性，以获取数据访问性能。<br>逆规范化处理的基本方法：<br>（1）增加冗余列或派生列<br>（2）多个关系表合并为一个关系表</p>]]></content>
    
    
    <summary type="html">数据库原理及应用（五）</summary>
    
    
    
    <category term="数据库" scheme="https://xlxq.fun/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://xlxq.fun/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库概论</title>
    <link href="https://xlxq.fun/posts/bef137fa.html"/>
    <id>https://xlxq.fun/posts/bef137fa.html</id>
    <published>2023-10-12T11:18:02.000Z</published>
    <updated>2023-10-12T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>基本概念</h1><h2 id="数据库">数据库</h2><p>数据库是一种依照特定数据模型组织、存储和管理数据的文件集合，这些文件一般存放在外部存储器中，以便长久保存数据，并可快速访问<br>特征：三个基本特点（永久存储、有组织、可共享）<br>1.数据按一定的数据模型组织、描述和储存<br>2.可为各种用户共享<br>3.冗余度较小<br>4.数据独立性较高<br>5.易扩展</p><h2 id="数据">数据</h2><p>数据是描述事物的符号记录，包括文字，图形，声音，图像等，它是数据库中存储的基本对象</p><h2 id="数据库管理系统">数据库管理系统</h2><p>数据库管理系统是为于用户与操作系统之间的一层数据管理软件<br>用于科学的组织和存储数据、高效的获取和维护数据</p><h2 id="数据库系统">数据库系统</h2><p>数据库系统是指在计算机系统中引入数据库后的系统构成，简称为数据库<br>由<strong>数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员和用户</strong>构成</p><h2 id="数据模型">数据模型</h2><p>数据模型是指描述事物对象的数据结构组成、数据语义练习、数据约束的抽象结构及其说明<br>包含：<br><strong>数据结构</strong>是用于描述事物对象的静态特征，包括事物对象的<strong>数据组成、数据类型、数据性质</strong>等<br><strong>数据操作</strong>用于描述事物对象的动态特征，包括<strong>数据的插入、修改、删除和查询</strong>等访问操作。<br><strong>数据约束</strong>用于描述数据结构中<strong>数据之间的语义联系、数据之间的制约和依存关系，以及数据动态变化的规则</strong>等。</p><h3 id="数据库使用的数据模型">数据库使用的数据模型</h3><h4 id="层次数据模型">层次数据模型</h4><p>采用树结构来组织、存储和管理数据</p><h4 id="网状数据模型">网状数据模型</h4><p>采用网状图结构组织、存储和管理数据</p><h4 id="关系数据模型">关系数据模型</h4><p>采用“二维表”结构组织、存储和管理数据，并以关联列实现表之间的联系。<br>关系数据模型优点：<br>数据结构简单、操作灵活<br>支持关系与集合运算操作<br>支持广泛使用的SQL数据库操作语言标准<br>拥有众多的软件厂商产品与用户<br>关系数据模型局限：<br>只用于结构化数据的组织与存储管理<br>支持的数据类型较简单<br>难以支持互联网广泛应用的非结构化数据和复杂数据管理</p><h4 id="其它数据模型">其它数据模型</h4><p>如对象数据模型、键值对数据模型、列式数据模型、文档数据模型、图形数据模型等</p><h1>数据库系统</h1><p>是一类基于数据库进行数据管理与信息服务的软件系统。<br>由用户、数据库应用程序、数据库管理系统和数据库四个部分组成。<br><strong>数据库用户</strong>是指数据库系统的使用人员，如应用程序员，系统分析员，数据库管理员，最终用户<br><strong>数据库应用程序</strong>是一种在DBMS支持下对数据库中数据进行访问处理的应用程序。<br>数据库应用程序基本功能:<br>通过窗口输入框采集用户输入数据<br>通过接口连接访问数据库<br>执行用户数据查询<br>通过表单列表输出结果数据<br><strong>数据库管理系统</strong>是一种专门用来创建数据库、管理数据库、维护数据库，并提供外部对数据库进行访问的系统软件。<br>数据库管理系统一般具有如下基本功能:<br>创建数据库、数据库表以及其它对象<br>读写、修改、删除数据库表中数据<br>维护数据库结构<br>执行数据访问规则<br>提供数据库并发访问控制和安全控制<br>执行数据库备份和恢复<br><strong>数据库</strong>是一种依照特定数据模型组织、存储和管理数据的文件集合。</p><h2 id="关系数据库系统">关系数据库系统</h2><h3 id="关系数据库中的数据内容">关系数据库中的数据内容</h3><p>在<strong>关系数据库</strong>中，除了存储和管理应用的<strong>用户数据</strong>外，还需要存储与管理数据库本身的<strong>元数据、索引数据、运行数据</strong>等系统数据。</p><h3 id="关系数据库的对象组织">关系数据库的对象组织</h3><p>用户表：存储用户的应用数据<br>系统表：存储数据库系统自身数据<br>视图：通过虚拟表实现数据查询处理<br>索引：通过目录数据结构支持快速的数据查询<br>约束：对关系表及其数据施加规则<br>存储过程：在数据库内部实现特定功能程序的数据处理<br>触发器：在数据库内部实现数据操作事件触发自动执行的过程程序</p><h1>数据库应用系统</h1><h2 id="数据库应用系统类型">数据库应用系统类型</h2><p>1.业务处理系统<br>2.管理信息系统<br>3.决策支持系统</p><h2 id="数据系统应用结构">数据系统应用结构</h2><p><strong>1.单机用户结构</strong><br>在单机用户结构系统中，整个数据库应用系统都装在一台计算机上，由一个用户进行访问操作，数据不能共享，数据冗余度大。<br><strong>2.集中式结构</strong><br>特点: 数据库系统的应用程序、DBMS、数据，都部署在同一服务器上运行，多个用户使用自己的计算机终端网络连接服务器，并可实现共享访问数据库。<br>优缺点: 结构简单，易于维护，但是当终端用户增加到一定数量后，服务器及网络将成为数据存取访问的瓶颈，使系统的性能大大地降低。<br><strong>3.客户/服务器结构</strong><br>特点:数据库应用系统的数据集中在数据库服务器管理、应用分布客户机处理。客户端应用程序通过网络并发访问数据库服务器中的数据库。<br>优缺点:在客户/服务器结构系统中，客户机程序与数据库服务器分工进行数据处理，提高了系统的负载分担能力，但仍会因大量客户端并发访问数据库服务器，导致系统性能瓶颈。<br><strong>4.分布式结构</strong><br>特点：分布式结构的数据库系统既实现数据分布，又实现处理分布。分布式数据库系统的各服务器结点数据库在逻辑上是一个整体，但物理分布在计算机网络的不同服务器结点上运行。每个数据库服务器可通过网络既支持多个本地客户机访问，也支持远程客户机访问。网络中的每一个数据库服务器都可以独立地存取与处理数据，并执行全局应用。<br>优缺点:分布式结构数据库系统适合跨地区的大型机构及企业等组织对数据库应用的需求，其处理性能强，但数据库的分布处理与维护有一定的开销与技术难度。</p><h2 id="数据库应用系统生命周期">数据库应用系统生命周期</h2><p>1.需求分析<br>2.系统设计<br>3.系统实现<br>4.系统测试<br>5.系统运行与维护</p><h1>典型数据库管理系统</h1><p>ACCESS——微软公司推出的桌面数据库管理系统<br>SQL SERVER——微软公司推出的商用数据库管理系统<br>Oracle Database——甲骨文公司推出的企业级数据库管理系统<br>IBM DB2——IBM公司推出的企业级数据库管理系统<br>Sybase ASE——Sybase公司推出的企业级数据库管理系统<br>MySql——应用广泛的开源关系数据库管理系统<br>PostgreSQL——技术领先的开源对象-关系数据库管理系统<br>Sybase SQL Anywhere——Sybase推出的移动计算数据库管理系统<br>SQLite——开源的轻量级嵌入式数据库管理系统</p>]]></content>
    
    
    <summary type="html">数据库原理及应用（一）</summary>
    
    
    
    <category term="数据库" scheme="https://xlxq.fun/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://xlxq.fun/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>垃圾回收</title>
    <link href="https://xlxq.fun/posts/72f47432.html"/>
    <id>https://xlxq.fun/posts/72f47432.html</id>
    <published>2023-10-11T11:18:02.000Z</published>
    <updated>2023-10-11T11:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>分类</h1><ol><li><strong>Minor GC（年轻代垃圾回收）:</strong><ul><li>针对年轻代（Young Generation）进行垃圾回收</li><li>当年轻代满时触发（通常由Eden区满、S0或S1区满触发）</li><li>垃圾对象相对较少，停顿时间较短。存活对象会被移到年老代。</li></ul></li><li><strong>Major GC（主要垃圾回收）:</strong><ul><li>Major GC 这个术语在Java中并不是一个官方的术语，有时也被用来指代Full GC。</li><li>有时人们使用 “Major GC” 来表示一次垃圾回收中涉及老年代的部分，即Full GC中清理老年代的过程。</li></ul></li><li><strong>Full GC（完全垃圾回收或老年代垃圾回收）:</strong><ul><li>针对整个堆（包括年轻代和老年代）进行垃圾回收。</li><li>当年轻代和老年代都满时触发，也可能由永久代（jdk7）满触发。</li><li>清理的范围更广，涉及整个堆。通常停顿时间相对较长。</li></ul></li></ol><h1>垃圾回收算法</h1><h2 id="标记-清除算法（Mark-and-Sweep）">标记-清除算法（Mark and Sweep）</h2><ul><li><strong>标记阶段：</strong> 从根节点开始，通过可达性分析标记所有能够被访问到的对象。</li><li><strong>清除阶段：</strong> 通过遍历整个堆，清除未被标记的对象，即垃圾对象。</li><li><strong>优点：</strong> 简单，容易实现。不需要移动对象。</li><li><strong>缺点：</strong> 产生内存碎片。 暂停时间较长。</li></ul><h2 id="复制算法（Copying）"><strong>复制算法（Copying）</strong></h2><ul><li>将堆分为两个区域，每次只使用其中一个。将存活的对象从一个区域复制到另一个区域。清理当前区域的所有对象。</li><li><strong>优点：</strong> 无内存碎片。适用于小对象，存活对象较少的场景（新生代）。</li><li><strong>缺点：</strong> 需要额外的空间。需要复制对象，移动开销较大。</li></ul><h2 id="标记-整理算法（Mark-and-Compact）"><strong>标记-整理算法（Mark and Compact）</strong></h2><ul><li>标记可达对象，将存活对象向一端移动，然后清理未标记的区域。</li><li><strong>优点：</strong> 无内存碎片。相较于复制算法，减少了对象复制的开销。</li><li><strong>缺点：</strong> 移动对象可能导致引用更新的复杂性。暂停时间相对较长。</li></ul><h2 id="分代回收算法（Generational）"><strong>分代回收算法（Generational）:</strong></h2><ul><li>将堆分为年轻代和老年代。大部分对象在年轻代被快速回收，少部分晋升到老年代。</li><li><strong>优点：</strong> 利用了对象的生命周期不同的特性，针对不同年代使用不同的垃圾回收策略。</li><li><strong>缺点：</strong> 需要额外的管理。不能解决所有的垃圾回收问题。</li></ul><h1>垃圾回收器</h1><ol><li><strong>Serial</strong> Garbage Collector:（串行垃圾回收器）<ul><li>单线程执行，适用于小型应用或测试环境。</li></ul></li><li><strong>Parallel</strong> Garbage Collector:<ul><li>多线程执行，充分利用多核处理器。</li><li>在新生代使用并行垃圾回收器，老年代使用串行垃圾回收器。</li></ul></li><li><strong>Concurrent Mark-Sweep (CMS)</strong> Garbage Collector:<ul><li>主要用于老年代的垃圾回收。</li><li>在标记和清理阶段允许与应用程序线程并发执行，目标是<strong>最小停顿时间</strong>。</li></ul></li><li><strong>Garbage First（G1）</strong> Garbage Collector:<ul><li>适用于大堆内存，具有低停顿时间的需求。</li><li>将堆划分为多个区域（region），通过并行和并发阶段实现垃圾回收。</li></ul></li></ol><h1>CMS</h1><p>四阶段：<strong>初始标记，并发标记，重新标记，并发清除</strong><br>其中第一、三阶段需要STW（stop the world，暂停用户线程）</p><ol><li>初始标记：标记所有直接被GCroot关联的对象，速度比较快</li><li>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程，耗时较长，但是是并发执行，不需要暂停用户线程</li><li>重新标记：修正并发标记期间,因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要STW，但时间不会太长</li><li>并发清除：清理删除掉标记阶段判定的已经死亡的对象,释放内存空间，不需要移动存活对象,可以与用户线程同时并发（产生内存碎片）<br>由于最耗费时间的并发标记与并发清除阶段都是不需要暂停用户线程的,所以整体的回收是低停顿的</li></ol><h1>G1</h1><p>回收步骤与CMS相似，<strong>初始标记，并发标记，最终标记，筛选回收</strong><br>重要概念和特点：</p><ol><li>区域（region）：把堆内存分割为很多不相关的区域(Region)(物理上不连续)，所有region均可以用来当作eden，survivor，old，humongous（存储大对象）（<strong>区域化内存布局</strong>）</li><li>Region之间是复制算法（从若干个rigion回收融合到一个region）,但整体上实际可看作是标记-整理算法</li><li>G1除了追求低停顿外,还能建立可预测的停顿时间模型,能让使用者明确指定在一个长度为M毫秒的时间片段内,消耗在垃圾收集上的时间不得超过N毫秒（<strong>可预测停顿时间</strong>），因为会优先回收价值高的region（<strong>垃圾优先</strong>）</li><li>可以只选取部分区域进行内存回收,这样缩小了范围,因此对于全局停顿情况的发生也能得到较好的控制，可以进行<strong>混合回收</strong>，同时处理新生代和老年代</li><li><strong>并行和并发</strong>执行垃圾回收操作，并行加快标记和复制的速度，并发减少垃圾回收对应用程序的停顿时间</li></ol><h1>补充</h1><h2 id="关于GC-root">关于GC root</h2><p>GCroot（垃圾收集根）是指一组对象，这些对象被认为是在垃圾收集时安全的，不会被垃圾收集器回收。垃圾收集根是整个对象图的起始点，垃圾收集器通过这些根对象能够追踪到其他对象的引用链，从而确定哪些对象是可达的，哪些是不可达的，进而进行垃圾回收。<br>以下是一些常见的 GCroot 类型：</p><ol><li><strong>栈中的局部变量和输入参数：</strong><ul><li>方法中的局部变量和输入参数，以及调用方法时传递的参数，都是GCroot。这是因为它们是程序执行的起点。</li></ul></li><li><strong>静态变量（类变量）：</strong><ul><li>存储在静态变量中的对象也是GCroot，因为它们随着类的加载而存在，不依赖于特定的实例。</li></ul></li><li>JNI 引用：<ul><li>通过 Java Native Interface (JNI) 创建的引用，允许 Java 代码访问和调用本地库的接口。JNI 引用也是 GCroot。</li></ul></li><li>活动的线程：<ul><li>正在运行的线程本身也是 GCroot，因为它们持有一些对象的引用，而这些引用不能被垃圾收集。</li></ul></li><li>Finalizer 引用：<ul><li>当一个对象的finalize()方法被调用时，这个对象是 GCroot，因为在finalize()方法中可能会重新建立对象的引用关系。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">JVM</summary>
    
    
    
    <category term="JVM" scheme="https://xlxq.fun/categories/JVM/"/>
    
    
    <category term="JVM，java" scheme="https://xlxq.fun/tags/JVM%EF%BC%8Cjava/"/>
    
  </entry>
  
  <entry>
    <title>三次握手和四次挥手</title>
    <link href="https://xlxq.fun/posts/f45a2f4a.html"/>
    <id>https://xlxq.fun/posts/f45a2f4a.html</id>
    <published>2023-10-10T11:18:02.000Z</published>
    <updated>2023-10-23T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层协议。在建立连接和断开连接时，TCP 使用三次握手和四次挥手来确保通信的可靠性和正确性。</p><h1>三次握手与四次挥手</h1><h2 id="三次握手过程">三次握手过程</h2><ol><li><strong>客户端向服务器发送连接请求</strong>： 客户端发送一个 SYN（同步）标志位被置为 1 的数据包给服务器，并指定初始序列号（Seq=X）。</li><li><strong>服务器响应确认请求</strong>： 服务器收到 SYN 包后，如果同意连接，会发送一个 ACK（确认）标志位和 SYN 标志位都被置为 1 的数据包给客户端，表示确认收到请求，并分配自己的序列号（Seq=Y），同时也会回复一个确认序号（Ack=X+1），表示收到的请求已确认。</li><li><strong>客户端发送确认响应</strong>： 客户端收到服务器的确认后，也会向服务器发送一个 ACK 标志位被置为 1 的数据包，表示对服务器的响应已确认，同时也会回复一个确认序号（Ack=Y+1），表示收到的响应已确认。<br>这样，客户端与服务器之间的连接就建立起来了，可以开始进行数据的传输。</li></ol><h2 id="四次挥手过程">四次挥手过程</h2><ol><li><strong>客户端发送断开连接请求</strong>： 客户端发送一个 FIN（结束）标志位被置为 1 的数据包给服务器，表示客户端不再发送数据。</li><li><strong>服务器确认断开连接请求</strong>： 服务器收到客户端的 FIN 包后，会向客户端发送一个 ACK 标志位被置为 1 的数据包，表示收到了客户端的断开请求。</li><li><strong>服务器向客户端发送断开连接请求</strong>： 当服务器不再发送数据时，会向客户端发送一个 FIN 标志位被置为 1 的数据包，表示服务器准备好断开连接。</li><li><strong>客户端确认断开连接请求</strong>： 客户端收到服务器的 FIN 包后，会向服务器发送一个 ACK 标志位被置为 1 的数据包，表示确认收到服务器的断开请求。<br>当客户端收到确认后，等待一段时间（TIME_WAIT 状态，<code>2MSL</code>），确保服务器接收到确认信息，然后关闭连接。服务器在接收到客户端的确认后，也会关闭连接。这样，客户端与服务器之间的连接就断开了。</li></ol><h2 id="三次握手状态转变">三次握手状态转变</h2><h3 id="客户端">客户端</h3><ol><li><strong>CLOSED</strong>：初始状态，表示连接未建立。</li><li><strong>SYN_SENT</strong>：发送了SYN包后进入此状态，等待服务器的确认。</li><li><strong>ESTABLISHED</strong>：收到服务器的确认后进入此状态，连接建立成功。</li></ol><h3 id="服务器端">服务器端</h3><ol><li><strong>CLOSED</strong>：初始状态，表示连接未建立。</li><li><strong>LISTEN</strong>：准备接受连接请求，等待客户端发送SYN包。</li><li><strong>SYN_RCVD</strong>：收到客户端的SYN包后进入此状态，发送确认和自己的SYN包。</li><li><strong>ESTABLISHED</strong>：收到客户端的确认后进入此状态，连接建立成功。</li></ol><h2 id="四次挥手状态转变">四次挥手状态转变</h2><h3 id="客户端-2">客户端</h3><ol><li><strong>ESTABLISHED</strong>：初始状态，表示连接正常进行。</li><li><strong>FIN_WAIT_1</strong>：发送了FIN包后进入此状态，等待服务器的确认。</li><li><strong>FIN_WAIT_2</strong>：收到服务器的确认后进入此状态，等待服务器的FIN包或超时。</li><li><strong>TIME_WAIT</strong>：收到服务器的FIN包后进入此状态，等待服务器的确认或超时。</li><li><strong>CLOSED</strong>：收到服务器的确认后进入此状态，连接关闭。</li></ol><h3 id="服务器端-2">服务器端</h3><ol><li><strong>ESTABLISHED</strong>：初始状态，表示连接正常进行。</li><li><strong>CLOSE_WAIT</strong>：收到客户端的FIN包后进入此状态，发送确认。</li><li><strong>LAST_ACK</strong>：发送了自己的FIN包后进入此状态，等待客户端的确认。</li><li><strong>CLOSED</strong>：收到客户端的确认后进入此状态，连接关闭。</li></ol><h2 id="图解">图解</h2><img src="/post-img/Pasted image 20240317105405.png" alt="图片损坏" style="zoom:100%;" /><h1>为什么是三次握手</h1><h2 id="分析">分析</h2><ol><li>“握手”也就是客户端和服务器端进行数据通信的过程是需要资源的，而且由于TCP是通信的基础，因此在真实的网络请求中建立连接的次数是非常多的，因此需要尽可能地找到最小的“握手”次数来保证连接的稳定性</li><li>很显然，通过四次握手必然能够实现稳定的连接（双方能够互相发送消息），并且这种连接是具有实时性的，不会因为网络通信问题导致两端的连接状态不一致</li><li>现在的问题是能否将四次握手简化至三次甚至两次？如果简化至两次，考虑一种情况，如果只有两次握手，即客户端发送连接请求，服务器接受连接请求并发送确认，连接就建立成功了。但是，如果这个确认包由于某些原因在网络中被延迟，而客户端已经认为连接已经建立成功，那么客户端就会开始发送数据了。然而，服务器并不知道客户端已经开始发送数据，因为它从未收到客户端的确认，所以也不会发送数据的确认。这样就可能导致两边的连接状态不一致，客户端认为连接已建立，而服务器并不知情。当最终确认包到达服务器时，服务器可能会误解为这是一个新的连接请求，从而建立了一个新的连接。这就会导致两个问题：<strong>一是旧的连接处于半开状态，消耗了服务器的资源；二是客户端发送的数据在新连接上丢失，因为服务器并不知道它已经发送了数据。</strong></li><li>综上分析：<strong>三次握手是消耗资源最少的能够保证有效连接以及确保连接时效性的最佳连接确认方式</strong></li></ol><h2 id="三次握手的作用">三次握手的作用</h2><ol><li><strong>初始化序列号</strong>：在通信开始之前，需要确定<strong>初始的序列号以及确认号</strong>。这两个序列号是 TCP 进行数据传输的基础。通过三次握手，客户端和服务器可以相互交换初始的序列号，从而确保后续的数据传输能够正确地同步。</li><li><strong>确认双方的发送和接收能力</strong>：通过三次握手，客户端和服务器可以确认对方的发送和接收能力正常。在第三次握手中，服务器发送确认消息，客户端接收并发送确认消息，这样双方就可以确认彼此的能力，以及连接是否能够正常建立。</li><li><strong>防止旧连接的影响</strong>：在网络中，可能会存在旧的连接或者延迟的数据包。通过三次握手，可以确保只有最新的连接才能够建立，避免了旧连接对新连接的影响。</li><li><strong>防止重复的连接请求</strong>：如果没有三次握手，客户端可能会发送多个连接请求，导致服务器建立多个连接。通过三次握手，可以防止重复的连接请求，确保只有一条连接被正确地建立。</li></ol><h1>补充</h1><h2 id="MSL">MSL</h2><ol><li>MSL（Maximum Segment Lifetime，最大报文生存时间）是 TCP 协议中的一个概念，指的是 TCP 报文在网络中允许存在的最长时间。</li><li>MSL 的值通常由实现 TCP 协议的操作系统决定，一般为 2 分钟（120 秒）。</li><li>MSL 的主要作用是确保网络中的旧数据报文能够及时丢弃，以避免旧的报文在网络中产生混乱。当一个 TCP 连接被关闭时，连接的每一端都会在关闭之后等待 MSL 的时间，以确保连接中的所有数据报文都已经在网络中完全传输并被丢弃。这样可以确保网络中不会再出现与旧连接相关的数据报文，避免对新连接的影响。<br><strong>四次挥手时为什么要等2MSL</strong></li><li>保证A发送的最后一个ACK报文段一定能被B接收到</li><li>防止已失效的连接请求报文段重新出现在新的连接中（使本次请求产生的所有数据都消失在网络中）</li></ol>]]></content>
    
    
    <summary type="html">计算机基础</summary>
    
    
    
    <category term="计算机基础" scheme="https://xlxq.fun/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://xlxq.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JVM组成部分</title>
    <link href="https://xlxq.fun/posts/c1464964.html"/>
    <id>https://xlxq.fun/posts/c1464964.html</id>
    <published>2023-10-10T10:19:03.000Z</published>
    <updated>2023-10-10T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>组成架构</h1><h2 id="类加载器">类加载器</h2><p>类加载器是用于加载编译后的<code>class</code>文件的，但它只负责将符合格式要求的<code>class</code>字节码信息加载进内存，而只要符合格式规范的<code>class</code>文件都能被加载，至于加载进入的<code>class</code>文件到底是否能执行就并不是它负责的了，这是执行引擎子系统的范围之内的责任。</p><h3 id="分类">分类</h3><ol><li><strong>启动类加载器</strong>（bootstrap）：使用C++语言实现，是JVM自身的一部分，主要负责将<code>&lt;JAVA_HOME&gt;\lib</code>路径下的核心类库或<code>-Xbootclasspath</code>参数指定的路径下的jar包加载到内存中。只为JVM提供加载服务，开发者不能直接使用它来加载自己的类。</li><li><strong>扩展类加载器</strong>（extention）：主要负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录下或者由系统变量<code>-Djava.ext.dir</code>指定位路径中的类库。它可以直接被开发者使用。</li><li><strong>应用类加载器</strong>（application）：负责加载系统类路径<code>java -classpath</code>或<code>-D java.class.path</code>指定路径下的类库，也就是经常用到的<code>classpath</code>路径。应用程序类加载器也可以直接被开发者使用。一般情况下，该类加载器是程序的默认类加载器，我们可以通过ClassLoader.getSystemClassLoader()方法可以直接获取到它。</li><li><strong>自定义类加载器</strong>（user）：在Java程序中，运行时一般都是通过如上三种类加载器相互配合执行的，如果有特殊的加载需求也可以自定义类加载器，通过继承<code>ClassLoader</code>类实现。</li></ol><h3 id="双亲委派模型">双亲委派模型</h3><p>各加载器之间是<strong>层级引用关系</strong>，而非继承或包含关系，当一个类加载器需要加载类时，它首先会委托给父加载器加载。这种委托的关系使得加载器之间形成了一种树状结构，即<strong>启动类加载器-&gt;扩展类加载器-&gt;应用类加载器-&gt;自定义类加载器</strong>。例如：虽然<strong>扩展类加载器不是启动类加载器的直接子类</strong>，但由于委托关系，可以说扩展类加载器在某种程度上扮演了启动类加载器的子加载器角色。这种委托是<strong>双亲委派</strong>思想的体现，即：<strong>向上委托，向下加载</strong></p><ul><li>自下向上检查类是否已经被加载</li><li>从上至下尝试加载类<br>作用：</li></ul><ol><li>避免重复加载</li><li>保障Java核心类的安全性问题</li></ol><h3 id="打破双亲委派模型">打破双亲委派模型</h3><h4 id="线程上下文类加载器">线程上下文类加载器</h4><p>线程上下文类加载器（Thread Context ClassLoader）允许在运行时动态地为线程设置类加载器。<br>最典型的应用场景是Java的SPI机制，位于<code>rt.jar</code>包中的SPI接口，是由Bootstrap类加载器完成加载的，在SPI接口中，会经常调用实现者的代码，所以一般会需要先去加载自己的实现类，但实现类并不在Bootstrap类加载器的加载范围内，而是位于<code>classpath</code>路径下，应该由<code>App</code>类加载器进行加载，此时就必须使用线程上下文类加载器来打破双亲委派规则。当父加载器无法完成类加载工作，会将其直接交由线程上下文类加载来进行加载。而通常<code>App</code>类加载器会被设置为默认的线程上下文类加载器。</p><h4 id="重写loadClass方法">重写loadClass方法</h4><p>无论是<code>ExtClassLoader</code>还是<code>AppClassLoader</code>加载器，其本身都未打破<code>ClassLoader.loadClass()</code>方法中定义的双亲委派逻辑，<code>Bootstrap、Ext、App</code>这些JVM自带的类加载器都默认会遵守双亲委派模型。<br>因此若想打破双亲委派模型，可以实现自定义类加载器，并重写loadClass方法</p><h3 id="类加载过程">类加载过程</h3><ol><li><strong>加载</strong>：加载阶段是指通过完全限定名查找Class文件二进制数据并将其加载进内存的过程。大体流程会分为三步：<ul><li>通过完全限定名查找定位<code>.class</code>文件，并获取其二进制字节流数据</li><li>把字节流所代表的<strong>静态存储结构转换为运行时数据结构</strong></li><li>在<strong>堆</strong>中间中为其创建一个<code>Class</code>对象，作为程序访问这些数据的入口</li></ul></li><li><strong>连接</strong>：连接步骤包含了验证、准备、解析三个阶段。这三个阶段中，前两个执行顺序是确定的，但解析阶段不一定，可能会发生在初始化之后。<ul><li><strong>验证：</strong> 验证确保被加载的类的正确性，包括文件格式的验证、元数据的验证、字节码的验证等。</li><li><strong>准备：</strong> 在准备阶段，类加载器为<strong>类的静态变量</strong>分配内存，并设置<strong>默认初始值</strong>（不是在代码中赋的值）。这里的静态变量是指类的成员（static修饰），但不包含final修饰，因为<code>final</code>在编译的时候就会分配了，准备阶段会显示初始化。</li><li><strong>解析：</strong> 解析阶段是虚拟机将类的符号<strong>引用转换为直接引用</strong>的过程，这个过程可能在初始化阶段之前或之后。</li></ul></li><li><strong>初始化</strong>：在初始化阶段，类加载器执行类的初始化代码，包括对静态变量的赋值和执行静态块中的代码。</li><li>使用：当一个类完整的经过了类加载过程之后，在内存中已经生成了Class对象，同时在Java程序中已经通过它开始创建实例对象使用时，该阶段被称为使用阶段。</li><li>卸载：当一个Class对象不再被任何一处位置引用，即不可触及时，Class就会结束生命周期，该类加载的数据也会被卸载。Java虚拟机自带的类加载器加载的类，在虚拟机的生命周期中始终不会被卸载。</li></ol><h3 id="类加载的时机">类加载的时机</h3><p>类加载器在以下情况下会触发类的加载：</p><ul><li>当创建类的实例对象时，也就是使用<code>new</code>关键字。</li><li>当调用类的静态方法时。</li><li>当访问类的静态字段（被<code>final</code>修饰、已在编译期把结果放入常量池的静态字段除外）时。<br>需要注意的是，类的加载是<strong>懒汉式</strong>的，即只有在需要使用类的时候才会加载。</li></ul><h2 id="执行引擎">执行引擎</h2><p>执行引擎子系统担任着JVM的“翻译官”角色，它负责将加载进内存的<code>class</code><strong>字节码指令“翻译”成机器语言</strong>交由硬件执行。而字节码可以通过解释器和即使编译器两种途径转换为机械指令。<code>HotSpot</code>虚拟机中，采用的便是<strong>解释器+即时编译器</strong>混合执行的工作模式。</p><h2 id="运行时数据区">运行时数据区</h2><p>运行时数据区是整个JVM中的重点，开发者编写的所有代码最终都会被加载在这里之后再开始执行。Java运行时数据区主要可分为PC程序计数器、本地方法栈、虚拟机栈、元数据空间(方法区)以及堆空间五大区域，<strong>其中堆空间和方法区是线程共享的，而程序计数器，本地方法栈和虚拟机栈则是线程私有的</strong>。</p><h3 id="堆">堆</h3><ul><li>Java堆是Java虚拟机管理的最大的一块内存区域，被所有线程共享。</li><li>在Java程序运行时，系统运行过程中产生的大部分实例对象以及数组对象都会被放到堆中存储。</li><li>对于JVM来说，堆空间是唯一的，每个JVM只会存在一个堆空间，同时容量大小会在创建时就被确定，但可以通过参数<code>-Xms</code> 和<code>-Xmx</code>指定堆的起始内存大小和最大内存大小。</li><li>一般所说的新生代、老年代、永久代是一种逻辑上的说法（1.8前物理也分代）。</li><li>本质上来说，Java堆结构是跟JVM运行时所使用的垃圾回收器息息相关的，由GC器决定了运行时的堆空间会被划分为何种结构。</li></ul><h3 id="方法区（元数据空间）">方法区（元数据空间）</h3><ul><li>方法区（Method Area），也称为元数据空间（Metadata Space），是 Java 虚拟机的内存区域之一，用于<strong>存储类的结构信息、常量、静态变量、即时编译器编译后的代码</strong>等数据。</li><li>方法区在 Java 虚拟机的内存模型中是一个逻辑上的概念，它不一定要求在实现中与堆区分配在物理上是不同的内存空间。</li><li>方法区在不同的 Java 虚拟机实现中可能有所不同，有些虚拟机可能会将方法区中的部分数据存储在堆区或其他内存区域中。</li><li>方法区的<strong>大小是有限制</strong>的，在一些情况下可能会出现内存溢出（Out of Memory）的错误。</li></ul><h3 id="虚拟机栈">虚拟机栈</h3><ul><li>生命周期与线程相同</li><li>每个方法的执行都会创建一个栈帧，用于存储<strong>局部变量表、操作数栈、动态链接、方法出口</strong>等信息。</li><li>栈帧的大小在编译时就已经确定，因此在栈上分配的内存是确定的。</li></ul><h3 id="程序计数器">程序计数器</h3><ul><li>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。生命周期与线程一致，随线程启动而生，线程销毁而亡。</li><li>是JVM所有内存区域中唯一不会发生OOM的区域，GC机制不会触及的区域。</li><li>在多线程环境下，每个线程都有一个独立的程序计数器，互不影响，用于记录各自线程执行的位置。</li><li>当线程执行一个Java方法时，记录线程正在执行的字节码指令地址，当执行引擎处理完某个指令后，程序计数器需要进行对应更新，将指针改向下一条要执行的指令地址，执行引擎会根据PC计数器中记录的地址进行对应的指令执行。</li><li>当线程在执行一些由<code>C/C++</code>编写的<code>Native</code>方法时，PC计数器中则为空（<code>Undefined</code>）。</li><li>保证线程发生CPU时间片切换后能恢复到正确的位置执行。</li></ul><h3 id="本地方法栈">本地方法栈</h3><ul><li>本地方法栈类似于Java虚拟机栈，但是为本地方法服务。</li><li>本地方法栈也是线程私有的，用于存储本地方法（由Native关键字修饰的方法）的信息。</li><li>当开始执行一个本地方法时，就会进入不再受虚拟机限制的环境，级别与虚拟机一样，可以直接访问JVM的任何内存区域，也可以直接使用CPU处理器的寄存器和本地内存等。本地方法栈只是存储了线程要运行这个方法的必要信息。</li></ul><h2 id="本地方法接口和本地方法库">本地方法接口和本地方法库</h2><p>本地方法接口的作用主要是为了融合不同的编程语言为Java所用，它的初衷是融合C/C++程序。因为在Java诞生时，正是C语言横行的时候，要想立足就必须要有一个能够调用C代码的模块，于是就专门在内存中开辟了一块区域处理标记为native的方法。简而言之，本地方法接口就是一个Java调用非Java代码的接口，这个非Java代码一般泛指C语言所编写的本地方法库中的函数。</p><h1>补充</h1><h2 id="符号引用与直接引用">符号引用与直接引用</h2><p>符号引用到直接引用的转换是为了在程序运行时能够快速访问到目标，提高执行效率。这个过程发生在类加载的链接阶段，确保在程序执行时能够正确地调用类的方法和访问类的字段。</p><h3 id="解释">解释</h3><p><strong>符号引用：</strong> 符号引用是一种编译时的引用，它以一种符号形式来表示目标，而不直接指向目标。在Java中，符号引用可以是类和接口的全限定名、字段的名称和描述符、方法的名称和描述符等。<br><strong>直接引用：</strong> 直接引用是可以直接指向目标的引用，相对于符号引用，它是在虚拟机加载类的过程中将符号引用转换而来的。直接引用可以是指向方法区的指针、指向堆中对象的指针、直接存储常量值等。</p><h3 id="符号引用转换为直接引用的过程">符号引用转换为直接引用的过程</h3><ol><li>在链接的解析阶段，虚拟机将符号引用转换为直接引用。解析主要有两种方式：静态解析和动态解析。</li><li><strong>静态解析：</strong><ul><li>静态解析是在编译期间完成的，通过类加载器进行。</li><li>对于一些被<code>final</code>修饰的静态变量，编译期已经确定了其值，可以直接将符号引用转换为常量值。</li></ul></li><li><strong>动态解析：</strong><ul><li>动态解析是在运行期间完成的，主要针对方法和字段的动态调用。</li><li>虚拟机会根据类的方法表或字段表在运行时动态地解析符号引用，转换为直接引用。</li><li>动态解析的过程可以涉及到方法的动态绑定（多态）等机制。</li></ul></li></ol><h3 id="举例">举例</h3><p>考虑一个方法调用的过程，例如 <code>obj.method()</code>，其中 <code>obj</code> 是一个对象引用，<code>method</code> 是一个方法的符号引用。在解析阶段，虚拟机会将这个符号引用转换为实际的方法地址，这个地址就是直接引用。这个转换的过程涉及到动态绑定，即根据实际类型来确定调用哪个版本的方法。</p><h2 id="自定义类加载器的作用">自定义类加载器的作用</h2><ul><li>当<code>class</code>文件不在<code>classpath</code>路径下时，需要自定义类加载器加载特定路径下的<code>class</code></li><li>当一个<code>class</code>文件是通过网络传输过来的并经过了加密处理，需要首先对<code>class</code>文件做了对应的解密处理后再加载到内存中时，需要自定义类加载器</li><li>线上环境不能停机时，要动态更改某块代码，这种情况下需要自定义类加载器。比如：当需要实现热部署功能时(一个class文件通过不同的类加载器产生不同class对象从而实现热部署功能)</li></ul><h2 id="虚拟机栈中栈帧的组成">虚拟机栈中栈帧的组成</h2><ol><li><strong>局部变量表（Local Variable Table）</strong>：<ul><li>局部变量表用于存储方法中的局部变量和参数。每个局部变量在局部变量表中占据一个槽位（Slot），槽位的大小可以是 32 位或 64 位，取决于局部变量的数据类型。</li><li>局部变量表从索引为 0 的位置开始，按顺序存储方法的参数和局部变量。</li></ul></li><li><strong>操作数栈（Operand Stack）</strong>：<ul><li>操作数栈用于存储方法执行过程中的操作数和中间结果。当方法调用一个操作时，操作数栈用于传递参数和保存临时数据。</li><li>操作数栈是一个后进先出（LIFO）的数据结构，可以执行各种运算指令，如加减乘除等。</li></ul></li><li><strong>动态链接（Dynamic Linking）</strong>：<ul><li>动态链接用于在运行期间解析调用方法的引用。每个栈帧都包含一个指向运行期常量池中该方法的符号引用的指针，用于动态链接。</li></ul></li><li><strong>方法出口（Return Address）</strong>：<ul><li>方法出口存储了方法执行完毕后返回的地址。当方法执行结束时，程序将跳转到方法出口所指向的地址，继续执行接下来的指令。</li></ul></li></ol><h2 id="方法区包含的主要内容">方法区包含的主要内容</h2><ol><li><strong>类的结构信息</strong>：<ul><li>方法区存储了加载的类的结构信息，包括类的字段、方法、构造方法等信息，以及方法的字节码等。</li></ul></li><li><strong>运行时常量池</strong>：<ul><li>方法区中包含每个类的运行时常量池，用于存储编译时生成的各种字面量（如字符串、数字）、符号引用（如类和方法的引用）等信息。</li></ul></li><li><strong>静态变量</strong>：<ul><li>方法区存储了类的静态变量，即被 static 修饰的成员变量，这些变量在程序运行期间只会被初始化一次，并且在整个程序生命周期内都可以被访问。</li></ul></li><li><strong>即时编译器编译后的代码</strong>：<ul><li>方法区还存储了即时编译器（JIT Compiler）编译后的本地机器代码（Native Code），这些代码用于执行经过优化的方法。</li></ul></li></ol><h2 id="堆的分代结构">堆的分代结构</h2><ul><li>JDK7及之前：堆空间包含新生代、年老代以及永久代。</li><li>JDK8：堆空间包含新生代和年老代，永久代被改为元数据空间，位于堆之外。</li><li>JDK9：堆空间从逻辑上保留了分代的概念，但物理上本身不分代。</li><li>JDK11：堆空间从此以后逻辑和物理上都不分代。</li></ul>]]></content>
    
    
    <summary type="html">JVM组成</summary>
    
    
    
    <category term="JVM" scheme="https://xlxq.fun/categories/JVM/"/>
    
    
    <category term="java，JVM" scheme="https://xlxq.fun/tags/java%EF%BC%8CJVM/"/>
    
  </entry>
  
  <entry>
    <title>mysql索引</title>
    <link href="https://xlxq.fun/posts/71014c5a.html"/>
    <id>https://xlxq.fun/posts/71014c5a.html</id>
    <published>2023-09-16T12:18:02.000Z</published>
    <updated>2023-09-16T12:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>分类</h1><h2 id="按物理结构">按物理结构</h2><p>在 B+ 树的索引中，叶子节点可能存储了当前的键值，也可能存储了当前的键值以及整行的数据，这就是聚簇索引和非聚簇索引。 在 InnoDB 中，只有主键索引是聚簇索引，如果没有主键，则挑选一个唯一键建立聚簇索引。如果没有唯一键，则隐式的生成一个键来建立聚簇索引。当查询使用聚簇索引时，在对应的叶子节点，可以获取到整行数据，因此不用再次进行回表查询。</p><ol><li><strong>聚簇索引</strong>指索引的键值的逻辑顺序与表中相应行的物理顺序一致，即每张表只能有一个聚簇索引，也就是我们常说的<strong>主键索引</strong></li><li><strong>非聚簇索引</strong>的逻辑顺序则与数据行的物理顺序不一致，通常会需要回表查询</li></ol><h2 id="按数据结构">按数据结构</h2><ol><li><strong>B-Tree 索引</strong>：<ul><li>B-Tree（平衡树）索引是最常见的数据库索引类型。</li><li>它适用于大多数情况，支持等值查询、范围查询和排序操作。</li><li>B-Tree索引对于静态和动态数据都很有效，适用于大多数关系型数据库系统。</li></ul></li><li><strong>B+Tree 索引</strong>：<ul><li>B+Tree索引是B-Tree的变种，常用于关系型数据库系统。</li><li>与B-Tree不同，B+Tree索引中只包含叶子节点，内部节点只用于导航，这使得B+Tree索引更适合范围查询和排序操作。</li></ul></li><li><strong>哈希索引</strong>：<ul><li>哈希索引使用散列函数将索引键映射到存储桶（存储位置），通常用于等值查询。</li><li>哈希索引对于等值查询非常高效，但不支持范围查询和排序操作。</li><li>哈希索引在某些情况下可以提供非常快的查询性能，但不适用于所有场景。</li></ul></li><li><strong>全文索引</strong>：<ul><li>全文索引用于搜索文本数据，如文章、博客帖子或文档。</li><li>它支持文本内容的关键字搜索，允许模糊查询和全文搜索。</li><li>全文索引通常用于全文搜索引擎或数据库系统的全文搜索功能。</li></ul></li></ol><h3 id="Hash和B-树索引的区别">Hash和B+树索引的区别</h3><p>哈希索引适用于等值查询，具有快速的等值查询性能和较小的存储开销。<br>B+树索引更通用，适用于各种查询类型，包括等值查询、范围查询和排序操作，但通常需要更多的存储空间。<br><strong>1. 数据结构：</strong></p><ul><li><strong>哈希索引：</strong> 哈希索引使用哈希函数将索引键映射到存储桶（或槽位）中。每个存储桶可以包含一个或多个具有相同哈希值的索引键。哈希索引将索引键与存储桶之间的关系存储在内存中或磁盘上。</li><li><strong>B+树索引：</strong> B+树索引是一种树状结构，通常是平衡树，包括根节点、内部节点和叶子节点。叶子节点包含了实际的索引键和指向数据行的指针。B+树索引的内部节点用于导航和范围查询。<br><strong>2. 支持的查询类型：</strong></li><li><strong>哈希索引：</strong> 哈希索引主要适用于等值查询，即查找具有特定键值的行。哈希索引不支持范围查询和排序操作，因为它将键映射到离散的存储桶中，无法提供有序的数据访问。</li><li><strong>B+树索引：</strong> B+树索引支持等值查询、范围查询和排序操作。它可以在树结构中按照键值的顺序访问数据，因此非常适合各种查询类型。<br><strong>3. 存储和空间需求：</strong></li><li><strong>哈希索引：</strong> 哈希索引通常需要相对较小的存储空间，因为它将键映射到存储桶，但需要注意，存储桶的数量可能会影响性能。</li><li><strong>B+树索引：</strong> B+树索引通常需要更多的存储空间，因为它包含了更多的数据结构，包括内部节点和叶子节点。但由于其平衡树结构，它能够提供高效的范围查询和排序操作。<br><strong>4. 写操作的性能：</strong></li><li><strong>哈希索引：</strong> 哈希索引对于等值查询的写操作（插入、更新、删除）通常非常高效，因为它可以在常数时间内找到特定键值。但对于范围删除或更新操作，哈希索引可能需要扫描整个索引，性能较差。</li><li><strong>B+树索引：</strong> B+树索引对于等值查询和范围查询的写操作都相对高效，因为它的平衡树结构允许根据键值顺序访问数据。</li></ul><h3 id="B-树和B树的区别">B+树和B树的区别</h3><ol><li>B+ 树<strong>减少了 IO 次数</strong>：<ul><li>由于索引文件很大因此索引文件存储在磁盘上，B+ 树的非叶子结点只存关键字不存数据，因而单个页可以存储更多的关键字，即一次性读入内存的需要查找的关键字也就越多，磁盘的随机 I/O 读取次数相对就减少了。</li></ul></li><li>B+ 树<strong>查询效率更稳定</strong>：<ul><li>由于数据只存在在叶子结点上，所以查找效率固定为 O(log n)，所以 B+ 树的查询效率相比B树更加稳定。</li></ul></li><li>B+ 树<strong>更加适合范围查找</strong>：<ul><li>B+ 树叶子结点之间用链表有序连接，所以扫描全部数据只需扫描一遍叶子结点，利于扫库和范围查询；B 树由于非叶子结点也存数据，所以只能通过中序遍历按序来扫。也就是说，对于范围查询和有序遍历而言，B+ 树的效率更高。</li></ul></li></ol><h3 id="为何使用B-树而非二叉查找树做索引">为何使用B+树而非二叉查找树做索引</h3><ol><li><strong>平衡性和稳定性：</strong><ul><li>B+树是一种自平衡树结构，而二叉查找树的平衡性不如B+树好。B+树的平衡性保证了在插入和删除操作后，树的高度保持相对稳定，从而保持了查询性能的稳定性。而BST的不平衡性可能会导致树的高度大幅增加，从而降低查询性能。</li></ul></li><li><strong>范围查询的效率：</strong><ul><li>B+树非常适合范围查询，因为它的叶子节点构成了一个有序链表，可以轻松执行范围查询操作。而BST需要在不同分支上进行搜索，效率相对较低。</li></ul></li><li><strong>提高磁盘io效率（顺序读取）：</strong><ul><li>B+树的节点通常比BST的节点大，因为它需要存储更多的键值对信息。然而，在磁盘上，顺序读取比随机读取更高效。由于B+树的有序性，磁盘IO更加连续，减少了随机读取，从而提高了磁盘IO效率。</li></ul></li><li><strong>叶子节点的存储（所有数据都存储在叶子节点上）：</strong><ul><li>B+树的叶子节点包含了所有索引数据，而内部节点仅包含索引键和指向子节点的指针。这样的设计使得B+树的叶子节点更适合内存缓存，因为它们通常更小，可以容纳更多的数据。相比之下，BST的所有节点都可能包含数据，会导致内存开销较大。</li></ul></li><li><strong>支持高度扇出（每个节点可以有多个子节点）：</strong><ul><li>B+树支持高度扇出（每个节点有多个子节点），这意味着在相对较低的高度下可以容纳大量数据。这对于大型数据库非常重要，因为它可以减少磁盘IO和提高查询性能。</li></ul></li></ol><h2 id="按应用类型">按应用类型</h2><ol><li>普通索引：MySQL 中的基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了提高查询效率。通过 ALTER TABLE table_name ADD INDEX index_name (column) 创建；</li><li>唯一索引：索引列中的值必须是唯一的，但是允许为空值。通过 ALTER TABLE table_name ADD UNIQUE index_name (column) 创建；</li><li>主键索引：特殊的唯一索引，也成聚簇索引，不允许有空值，并由数据库帮我们自动创建；</li><li>复合索引：组合表中多个字段创建的索引，遵守最左前缀匹配规则；</li><li>全文索引：只有在 MyISAM 引擎上才能使用（innoDB新版本支持），同时只支持 CHAR、VARCHAR、TEXT 类型字段上使用。</li></ol><h1>优缺点</h1><h2 id="优点">优点</h2><ol><li><strong>提高检索速度</strong>：<ul><li>最明显的优点是加速数据检索。索引允许数据库系统更快地定位和访问符合查询条件的数据行，特别是在大型数据表中，查询性能得到显著提升。</li></ul></li><li><strong>支持快速查找</strong>：<ul><li>索引使数据库系统能够在常数时间内快速查找特定值，而不是遍历整个数据表。</li></ul></li><li><strong>排序优化</strong>：<ul><li>索引可以提高排序操作的性能，因为数据库可以使用索引按顺序访问数据。</li></ul></li><li><strong>加速连接操作</strong>：<ul><li>当执行连接操作（例如JOIN）时，索引可以加速数据的匹配过程，提高关联查询的性能。</li></ul></li><li><strong>帮助确保数据完整性</strong>：<ul><li>唯一索引可以确保索引列中的数据唯一性，有助于维护数据完整性。</li></ul></li></ol><h2 id="缺点">缺点</h2><ol><li><strong>存储开销</strong>：<ul><li>索引占用额外的存储空间，因为索引数据结构需要额外的内存和磁盘空间。对于大型数据表，索引可以占据相当大的空间。</li></ul></li><li><strong>更新性能降低</strong>：<ul><li>当插入、更新或删除数据行时，索引需要维护，这可能会导致更新性能下降。每次更新都需要更新索引结构，这会增加写操作的开销。</li></ul></li><li><strong>查询性能下降（部分情况）</strong>：<ul><li>在某些情况下，使用不当的索引或过多的索引可以导致查询性能下降。过多的索引可能会导致查询优化器选择错误的索引，增加了查询的成本。</li></ul></li><li>维护成本：<ul><li>数据库维护索引需要额外的工作，包括创建、重新构建和优化索引。</li></ul></li><li>空间复杂性：<ul><li>对于复杂的查询，涉及多个表和多个索引时，查询优化可能变得复杂，不容易预测性能。</li></ul></li></ol><h1>索引设计原则</h1><ol><li><strong>选择唯一索引</strong>：<ul><li>唯一索引的值是唯一的，可以更快速的通过该索引来确定某条记录。</li><li>主键索引和唯一索引，在查询中使用是效率最高的。</li></ul></li><li><strong>为经常需要排序、分组和联合操作的字段建立索引</strong>：<ul><li>经常需要ORDER BY、GROUP BY、DISTINCT和UNION等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</li></ul></li><li><strong>为常作为查询条件的字段建立索引</strong>：<ul><li>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</li></ul></li><li><strong>尽量使用前缀来索引</strong>：<ul><li>如果索引字段的值很长，最好使用值的前缀来索引。例如，TEXT和BLOG类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</li></ul></li><li><strong>限制索引的数目</strong>：<ul><li>索引的数目不是越多越好。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。</li></ul></li><li><strong>尽量使用数据量少的索引</strong>：<ul><li>尽量使用字段长度小的列创建索引。如果索引的值很长，那么查询的速度会受到影响。</li></ul></li><li><strong>删除不再使用或者很少使用的索引</strong>：<ul><li>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</li></ul></li></ol><h1>补充</h1><h2 id="最左匹配原则">最左匹配原则?</h2><p>最左匹配原则是数据库索引优化的一个关键概念，它指导数据库系统在使用复合索引（Composite Index）时如何有效地匹配查询条件。<br>在最左匹配原则中，索引的复合键（Composite Key）中的多个列按照索引定义的顺序依次匹配查询条件。具体来说，当执行一个查询，涉及到复合索引的多个列时，数据库系统会首先使用索引的最左边的列来过滤数据，然后再逐渐向右匹配更多的列，直到满足查询条件或者不再匹配。<br>这个原则的关键在于，如果查询条件中涉及到复合索引的多个列，那么只有在最左边的列被用于查询时，索引才会发挥作用。如果最左边的列不在查询条件中，那么索引将无法有效利用。</p><p>举个例子，假设有一个复合索引 (A, B, C)，按照最左匹配原则：</p><ol><li>如果查询条件包括 A，那么索引可以被充分利用。</li><li>如果查询条件包括 A 和 B，那么索引也可以被充分利用。</li><li>如果查询条件包括 A、B 和 C，那么索引仍然可以被充分利用。</li><li>但如果查询条件只包括 B 或者 C，而不包括 A，那么索引将无法有效使用。</li><li>其余情况下（A,C），只有A能走索引而C无法走索引</li></ol><h2 id="覆盖索引">覆盖索引</h2><p>覆盖索引（Covering Index）是一种特殊类型的数据库索引，它包含了查询所需的所有列，而不仅仅是索引键列。当一个查询可以完全通过索引本身满足，而不需要访问实际数据表中的数据行时，就称之为覆盖索引。</p><p>覆盖索引具有以下特点和优点：</p><ol><li><strong>减少磁盘IO：</strong> 因为覆盖索引包含了查询所需的数据列，数据库系统可以直接从索引中获取数据，而无需访问数据表，从而减少了磁盘IO操作。这通常会显著提高查询性能，尤其是在大型数据表上。</li><li><strong>减少内存占用：</strong> 由于覆盖索引通常比完整数据行小，所以可以减少内存使用。这对于数据库缓存的性能有积极影响，因为更多的索引页可以驻留在内存中。</li><li><strong>加速查询速度：</strong> 覆盖索引可以加速查询速度，因为不需要额外的数据检索操作。这对于频繁执行的查询特别有用，如报表查询和分析查询。</li><li><strong>降低锁定的持续时间：</strong> 当查询使用覆盖索引时，需要锁定的数据行较少，因此可以减少锁定的持续时间，提高并发性。</li><li><strong>减少网络开销：</strong> 对于分布式数据库系统，使用覆盖索引可以减少数据传输的网络开销，因为不需要传输完整的数据行，只需要索引和查询的列。</li></ol><h2 id="索引下推">索引下推</h2><p>在不使用索引下推的情况下，在使用非主键索引进行查询时，存储引擎通过索引检索到数据，然后返回给 MySQL 服务器，服务器判断数据是否符合条件。<br>而有了索引下推之后，如果存在某些被索引列的判断条件时，MySQL 服务器将这一部分判断条件传递给存储引擎，然后由存储引擎通过判断索引是否符合 MySQL 服务器传递的条件，只有当索引符合条件时才会将数据检索出来返回给 MySQL 服务器。<br>总而言之，就是在进行多条件匹配时，不通过索引下推，引擎层可能会将满足第一个条件的所有行提交给服务器端进行筛选（这个过程可能产生多次回标），而有了索引下推后，服务器端将条件告诉引擎层，在引擎层就可以多匹配到条件，减少服务器端回表查询的次数。<br>索引条件下推优化可以<strong>减少存储引擎查询基础表的次数</strong>，也可以减少 MySQL 服务器从存储引擎接收数据的次数。</p><h2 id="索引的维护">索引的维护</h2><p>索引的维护包括页分裂（Page Split）和页合并（Page Merge）两个主要方面，它们是数据库系统在动态数据增删改的情况下，保持索引结构的平衡和高效的重要手段。</p><ol><li><strong>页分裂（Page Split）</strong>：<ul><li>当一个数据页（Index Page）已满，无法再容纳新的数据时，数据库系统会进行页分裂操作。</li><li>页分裂将满页分成两个新的数据页，以腾出空间来存储新的数据。通常是将数据页中的一部分数据移动到新的数据页中，然后在原页中插入新的数据，保持数据的有序性。</li><li>在 B-Tree 索引结构中，页分裂通常发生在树的中间节点或叶子节点上，以保持树的平衡性。</li></ul></li><li><strong>页合并（Page Merge）</strong>：<ul><li>当一个数据页中的数据删除后，导致页面的利用率过低时，数据库系统可能会进行页合并操作。</li><li>页合并将相邻的两个数据页合并成一个更大的数据页，以提高页面的利用率。通常是将两个数据页中的数据合并到一个新的数据页中，并更新父节点的索引。</li><li>在 B-Tree 索引结构中，页合并通常发生在叶子节点上，以减少索引的层次，提高查询性能。<br>页分裂和页合并是数据库系统中的动态操作，它们根据数据的增删改变化来保持索引结构的平衡和高效。通过合理的页分裂和页合并操作，数据库系统可以在保持索引结构的同时，保持较低的空间开销和高效的查询性能。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;分类&lt;/h1&gt;
&lt;h2 id=&quot;按物理结构&quot;&gt;按物理结构&lt;/h2&gt;
&lt;p&gt;在 B+ 树的索引中，叶子节点可能存储了当前的键值，也可能存储了当前的键值以及整行的数据，这就是聚簇索引和非聚簇索引。 在 InnoDB 中，只有主键索引是聚簇索引，如果没有主键，则挑选一个唯一键建</summary>
      
    
    
    
    <category term="mysql" scheme="https://xlxq.fun/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://xlxq.fun/tags/mysql/"/>
    
  </entry>
  
</feed>
